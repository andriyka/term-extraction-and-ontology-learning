Fuzzy Calendar Algebra and Its Applications to Data Mining Wan-Jui Lee Department of Electrical Engineering, National Sun Yat-Sen University, Taiwan wrlee@water.ee.nsysu.edu.tw Abstract Temporal expressions are widely used in our daily life.
Calendar algebra has been studied for years to provide a formal specification for constructing temporal expressions.
However, temporal requirements specified by human beings tend to be ill-defined or uncertain.
To deal with such kind of uncertain information, we propose the fuzzy calendar algebra which allows users to describe desired temporal expressions easily and naturally.
The operations provided reflect the way in which people reason about temporal requirements in daily life.
By using the fuzzy calendar algebra, users can define complicated calendars with multiple time granularities in which different time intervals can have different weights according to their matching degrees to the specified calendar.
This can help users to discover the knowledge in the time intervals that are of interest to them.
We show the usefulness of the algebra by incorporating it with an incremental data miner to mine fuzzy temporal association rules from temporal databases.
1.
Introduction Efforts to construct and reason about temporal expressions have been conducted for a long time and have become an important topic in the areas of temporal databases, problem solving, natural language understanding, and data mining.
Calendar algebra has been studied for years to provide a formal specification for constructing temporal expressions in terms of closely related granularities (e.g., day, month, year) that are organized into calendars (e.g., 3 February, 1978).
Key elements, especially expressiveness, effectiveness, and compactness, have been investigated for calendar algebra.
For expressiveness, the class of calendars represented in the formalism should be large enough to be of practical use.
As for effectiveness, algorithms to reason about different time granularities should be pro-  Shie-Jue Lee Department of Electrical Engineering, National Sun Yat-Sen University, Taiwan leesj@ee.nsysu.edu.tw vided in the framework.
In particular, an effective solution should be provided to the problem of equivalence and classification which concern the identity of two calendar representations and the containment of one calendar to another, respectively.
Finally, temporal expressions should be described as compact as possible.
The research of calendar algebra can be roughly categorized into two directions, the generation of temporal granularities [4, 6, 11, 5, 8, 9, 15] and the definition of operations for constructing calendars [7, 20, 16, 14].
Various operations have been defined to allow users to capture the characteristics of calendars naturally and expressively.
Soo et al.
proposed the uniform representation of calendar systems and tried to incorporate the idea into SQL2 [18].
A mechanism supporting the definition of calendars and a query language for them were developed.
Three kinds of data types, event, interval, and span, are defined in the query language.
In [7], another calendar system that supports calendars in a database system with extensible relational and active features was proposed.
A language was developed to support the specification of a calendar, and operations like dicing and slicing were defined for creating desired time intervals.
Other operations, such as merge, select, and extract, were also proposed in [20].
Features about calendar operations were also studied.
Ramaswamy et al.
[16] used calendar algebra to select interesting time periods in which knowledge could be discovered.
Three operations, always, sometimes, and temporal, were introduced to specify queries in the object-oriented context in [14].
These operations are to be used to evaluate a proposition or answer questions, e.g., whether an event always/sometimes occurs in a time period, or when a certain event holds.
However, temporal requirements specified by human beings tend to be ill-defined or uncertain.
To deal with such kind of uncertain information, we borrow the fuzzy set theory [19] and propose the fuzzy calendar algebra to allow users to describe desired temporal expressions easily and natu-  Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE  rally in terms of fuzzy calendars.
Five operations, and, or, not, xor, and sub, are provided to help users construct and manipulate complicated fuzzy calendars.
These operations reflect the way in which people reason about temporal requirements in daily life.
By using the fuzzy calendar algebra, users can define complicated calendars with multiple time granularities in which different time intervals can have different weights according to their matching degrees to the specified calendar.
This can help users to discover the knowledge in the time intervals that are of interest to them.
We show the usefulness of the algebra by incorporating it with an incremental data miner to mine fuzzy temporal association rules from temporal databases.
Firstly, the transactions of the database are divided into a sequence of partitions.
Then the weight of each partition is inferred, denoting the matching degree of the corresponding time period to the fuzzy calendar specified in the user's queries.
Temporal patterns in the divided time periods of different matching degrees are then efficiently produced, and the number of database scans can be effectively reduced.
Experimental results have shown that this approach of finding fuzzy temporal association rules is very effective.
The rest of the paper is organized as follows.
In Section 2, the fuzzy calendar algebra, together with the construction of fuzzy calendars, is described.
Operations for the fuzzy calendar algebra are defined.
A formal description about fuzzy temporal association rules is given and the process of discovering fuzzy temporal association rules from temporal databases is described in Section 3.
Simulation results are presented in Section 4.
Finally, a conclusion is given in Section 5.
2.
Fuzzy Calendar Algebra A calendar is, in general, a structured collection of time intervals.
Operations such as during, overlaps, meets, etc., have been proposed for users to construct their own calendars [16].
However, it is hard or even impossible for users to provide a crisp description about their desired calendars.
To formulate human reasoning into the process of knowledge discovery, fuzzy theory is adopted for the construction of calendars in this section.
Fuzzy concepts and operations are introduced to help users express their desired calendars easily and conveniently.
2.1.
Basic Fuzzy Calendars To construct a calendar, the hierarchy of time granularity, e.g.
week, month, and year, has to be determined to handle descriptions of multiple time granu-  (a)  (b)  (c)  Figure 1.
Basic fuzzy calendars associated with the time granularity of (a) week, (b) month, and (c) year.
larities [10].
For each time granularity, fuzzy sets which describe the distribution of all the time intervals in the time granularity can be specified.
Each fuzzy description of a time granularity, e.g., in the middle of a year, at the very beginning of a month, or at the end of a week, etc., forms a basic fuzzy calendar.
Definition 1 A basic fuzzy calendar, A, characterizes a fuzzy proposition about the collection of time intervals in a time granularity U , described by a membership function uA where uA : Ti - [0, 1] for every time interval Ti [?]
U .
The function value uA (Ti ) indicates the matching degree of Ti to A.
Some example basic fuzzy calendars are shown in Figure 1.
Usually, the shapes and the number of fuzzy sets describing a time granularity are arbitrarily specified by the user.
Hedges such as very and more or less can also be used.
With such fuzzy descriptions about time, users don't have to know the exact boundaries between interesting and non-interesting time intervals.
Furthermore, the time intervals which are more important can have a larger membership degree and will contribute a bigger influence, which is intuitively desirable.
Fuzzy calendars can also be used to describe crisp time intervals.
For example, Wednesday and May can be described by fuzzy calendars with singletons, as shown in Figure 2.
Temporal relations such as before and after  Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE  1.
A and B denotes A[?
]B, with the resulting membership function uA[?
]B defined by uA[?
]B [?]
uA x uB .
(1)  2.
A or B denotes A[?
]B, with the resulting membership function uA[?
]B defined by uA[?
]B [?]
uA + uB - uA x uB .
(a)  (b)  Figure 2.
Singletons describing crisp time intervals, (a) Wednesday and (b) May, respectively.
(2)  3. not A denotes the complement of A, A, and the resulting membership function uA is defined by uA [?]
1 - uA .
(3)  4.
A xor B denotes the symmetric difference of A and B, A [?]
B, with the resulting membership function uA[?
]B defined by uA[?
]B  [?]
uA x (1 - uB )2 + uB x (1 - uA )2 +uA x uB x (1 - uA x uB ).
(4)  5.
A sub B denotes the subtraction of calendar B from calendar A, A - B, and uA-B (a)  (b)  Figure 3.
Membership functions describing the years (a) before and (b) after year 2000, respectively.
can also be represented by setting membership functions to be step functions, as shown in Figure 3.
2.2.
Operations on Fuzzy Calendars In real life, complicated temporal expressions, such as on the weekends and at the end of a year, are required and it is important for users to easily describe these temporal requirements.
We provide five operations, and, or, not, xor, and sub, to help users to construct complex fuzzy calendars based on basic fuzzy calendars.
Definition 2 A fuzzy calendar is defined recursively as follows: 1.
A basic fuzzy calendar is a fuzzy calendar.
2.
Let A and B be two fuzzy calendars.
Then A and B, A or B, not A, A xor B, and A sub B are also fuzzy calendars.
The semantics of these operations are described below.
Definition 3 Let A and B be fuzzy calendars with membership functions uA and uB , respectively.
[?]
uA - uA x uB  (5)  is the resulting membership function.
Note that we use the algebraic sum and product, respectively, for the definitions of or and and, instead of max and min that are usually used.
The main reason is that max and min are not satisfactory in some situations.
For instance, when we take the and of two fuzzy sets, we want the larger fuzzy set to have a larger impact on the result.
But if we use the min operation, the larger fuzzy set will have no impact at all.
Similarly, the smaller fuzzy set will have no impact on the result if max is chosen as the operation for or.
Consider Figure 1.
Let the basic fuzzy calendars begin of a week, middle of a week, end of a week, begin of a month, middle of a month, end of a month, begin of a year, middle of a year, and end of a year be represented by bw, mw, ew, bm, mm, em, by, my, and ey, with membership functions ubw , umw , uew , ubm , umm , uem , uby , umy and uey , respectively.
Then the complex fuzzy calendar c1 which is ((in the middle of a month and at the end of a year) or (at the end of a week and at the beginning of a year)) can be described by the following membership function: uc1  = (umm[?
]ey ) + (uew[?
]by ) -(umm[?
]ey )x(uew[?
]by ).
(6)  Let c2 be the fuzzy calendar ((not at the end of a year) and (in the middle of a year, but not at the end of a month)).
Then it can be described by uc2  =  Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE  (uey - )x(umy-em ).
(7)  Finally, the fuzzy calendar c3 which is (at the beginning or end of a month, but not simultaneously) can be described by uc3  =  ubm[?
]em  (8)  with the xor operation.
To calculate the matching degree of a time period, T , to a certain fuzzy calendar, A, we transform A to a fuzzy proposition of the following form The date is in A.  than the user-specified support and confidence thresholds, respectively.
Let FC be the specified fuzzy calendar, and wi be the matching degree, or weight, of the time period Ti corresponding to partition Pi in the database D, where wi is calculated as in Eq.(10).
For a given itemset I [?]
I, a transaction t is said to contain I if and only if I [?]
tc .
Let |Pi (I)| be the number of transactions containing itemset I in partition Pi .
The weighted count of an itemset I in D, denoted sD (I), is defined to be  (9)  Then the matching degree is computed as uA (T ).
For example, referring to Figure 1, the matching degree of the time period T = 2003/09/20 (Sat.)
to the fuzzy calendar c1 of Eq.
(6) is computed as uc1 (T ) = (umm (20) x uey (9)) + (uew (6) x uby (9)) -((umm (20) x uey (9)) x (uew (6) x uby (9))) = (0.2 x 0.67) + (1.0 x 0.0) - ((0.2 x 0.67) x(1.0 x 0.0)) = 0.13.
(10)  3.
Application in Knowledge Discovery  sD (I) =  n   (|Pk (I)| x wk ).
(11)  k=1  We say that an itemset I is frequent, with respect to a support threshold of s% if n  sD (I) >= [ (|Pk | x wk )]xs%  (12)  k=1  where |Pk | denotes the  number of transactions in partition Pk .
The term [ nk=1 (|Pk | x wk )]xs% is called the weighted count threshold of D. A fuzzy temporal association rule with respect to a fuzzy calendar, FC, is an implication of the form  We show how fuzzy calendar algebra can be used to help discover knowledge from temporal databases.
We assume that all the transactions are placed in order in a temporal database.
By incorporating fuzzy calendar algebra with a data miner, called PWM, an interesting type of knowledge, called fuzzy temporal association rules, can be efficiently discovered from temporal databases.
The fuzzy temporal association rules discovered should have weighted support and confidence greater than the user-specified minimum support and confidence, respectively.
where X [?]
I, Y [?]
I, and X [?]
Y = [?].
As usual [1], X and Y are required to be non-empty and a rule thus contains at least two items.
The association rule X=F C Y is said to have weighted support s% in the database D if  3.1.
Fuzzy Temporal Association Rules  For an association rule X=F C Y , let  Let I = {i1 , i2 , ..., im } be a set of items.
Let D be a temporal database of transactions where each transaction t is associated with an identifier TID, a time information tt indicating the time when the transaction occurred, and a set of items tc such that tc [?]
I.
Let D be divided into a sequence of n partitions, P1 , P2 , .
.
.
, and Pn , each Pi containing a set of transactions occurring in the corresponding time period Ti with the duration being that of the smallest time granularity.
Mining fuzzy temporal association rules in a database is to discover interesting patterns from the partitions divided in D, with corresponding time periods weighted by their matching degrees to the queried fuzzy calendar.
The fuzzy temporal association rules discovered should have weighted support and confidence greater  X =F C Y  n  sD (X[?
]Y ) = [ (|Pk | x wk )]xs%.
(13)  (14)  k=1  sD (X[?
]Y )/sD (X) = c%.
(15)  The rule is said to hold in D with weighted confidence c%.
For a given pair of confidence and support thresholds, c% and s%, and a given fuzzy calendar FC, the problem of mining fuzzy temporal association rules from the database D is to find out all the association rules that have weighted confidence and support greater than or equal to c% and s%, respecitvely.
As usual, two subproblems are involved.
The first subproblem is to find, with respect to FC, all frequent itemsets in D. The second subproblem is, from the set of frequent itemsets, to find out all the association rules that have a weighted confidence value greater than or equal  Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE  to c%.
Given a frequent itemset I, associated rules related to I are constructed as follows.
Let I be decomposed into X and Y such that X[?
]Y = I and X[?
]Y = [?].
X=F C Y is an association rule if sD (I)/sD (X) >= c%.
Since the solution to the second subproblem is straightforward [1], major research efforts have been spent on the first subproblem, i.e., finding frequent itemsets.
Therefore, our research mainly focuses on the first subproblem.
Given the support threshold s%, our mining system finds out the set fi  n  L = X|X [?]
I[?
]sD (X) >= [ (|Pk | x wk )]xs% (16)  D  Partition  Date  P1  2003/09/15 (Mon.)
P2  2003/09/16 (Tue.)
P3  2003/09/17 (Wed.)  TID 1 2 3 4 5 6 7 8 9  Items A,C,D,E,F B,D,F A,D,E A,B,D,E,F A,B,C,E,F B,F A,D,E,F A,B,D,F A,D,F  Table 1.
A transaction database.
k=1  from the temporal database D. For convenience, an itemset that contains exactly k items is called a kitemset.
The set of frequent k-itemsets is commonly denoted by Lk .
Note that the fuzzy temporal association rules defined above are identical to traditional association rules if the weights of all the time periods in D are set to the same value.
3.2.
Mining Fuzzy Temporal Association Rules In mining a time-variant database, traditional mining methods treat transactions in different time periods individually and process them with the same procedure without fully considering the time-variant characteristics of the items and transactions.
Consequently, some interesting rules may not be discovered.
We provide a method to remedy this disadvantage.
The fuzzy calendar algebra is used to describe desired temporal requirements, and then PWM (Progressive Weighted Miner) [13] is adopted to discover fuzzy temporal association rules from a database.
In general, a database is too large to be held in main memory.
Thus, the data mining techniques applied to very large databases have to be highly scalable for efficient execution.
By partitioning a transaction database into n partitions, P1 , P2 , .
.
.
, Pn , PWM employs a progressive filtering scheme to generate the set of candidate itemsets for the database.
One partition is considered at a time, and the cumulated information discovered in previous partitions, including a progressive candidate set of 2-itemsets, C2 , their partial occurrence counts, and the corresponding partial supports required, is carried over along to the subsequent partitions.
When all the partitions have been processed, the set of candidate itemsets, C, for the database can be obtained.
For each frequent itemset I, there must exist some partition Pk , 1 <= k <= n, such that I is frequent from partition Pk to Pn .
Suppose E is a candidate 2-itemset  from Pk to Pt , 1 <= k <= t <= n. Let the current partition be Pt+1 .
If we detect that E is not frequent from Pk to Pt+1 , then E can be deleted from C2 .
If E is indeed frequent, it must be frequent in some later partition Pk , k fi > k, and we can add it to C2 again with starting partition being Pk .
Therefore, after each partition, Pi , is processed, new partial frequent 2-itemsets may be added into C2 , with their starting partition and partial counts being recorded.
Furthermore, the old itemsets in C2 are checked if they are continually frequent from its starting partition to Pi .
If a candidate 2-itemset is no longer partially frequent, this itemset is removed from C2 .
After all partitions have been processed, the set of candidate 2-itemsets, C2 , which is close to the set of frequent 2-itemsets, is obtained.
Based on C2 , all candidate k-itemsets, k >= 3, are generated.
Finally, one database scan is applied to calculate the supports of all candidate itemsets and frequent itemsets are determined.
Fuzzy temporal association rules can then be formed from the discovered frequent itemsets.
3.3.
An Example We give an example for illustration.
Consider the database D, shown in Table 1, which contains 9 transactions and is segmented into three partitions, P1 , P2 , and P3 , each containing 3 transactions.
Let the support and confidence thresholds be 40% and 75%, respectively.
Assume that the queried fuzzy calendar is the fuzzy calendar c1 given in Section 2, i.e., c1 represents ((in the middle of a month and at the end of a year) or (at the end of a week and at the beginning of a year)).
The membership function of c1 is shown in Eq.(6).
Assume that umm , uey , uew , and uby are the membership functions shown in Figure 1.
Firstly, we calculate the weights w1 , w2 , and w3 for partitions P1 , P2 , and P3 , respectively.
The time interval T1 of P1 is 2003/09/15 (Mon.).
The membership degrees of T1 with respect to umm , uey , uew , and uby  Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE  itemset AD AE DE DF  P1 start 1 1 1 1  count 1.34 1.34 1.34 1.34  Table 2.
Candidate 2-itemsets generated from partition P1 .
are umm (15) = 1.0, uey (9) = 0.67, uew (1) = 0.0, and uby (9) = 0.0, respectively.
Therefore, w1 becomes w1 = umm (15)xuey (9) + uew (1)xuby (9) -((umm (15)xuey (9))x(uew (1)xuby (9))) = (1.0x0.67) + (0.0x0.0) - ((1.0x0.67) x(0.0x0.0)) = 0.67.
Similarly, we have T2 of P2 being 2003/09/16 (Tue.)
and T3 of P3 being 2003/09/17 (Wed.), and w2 = umm (16)xuey (9) + uew (2)xuby (9) -((umm (16)xuey (9))x(uew (2)xuby (9))) = (1.0x0.67) + (0.0x0.0) - ((1.0x0.67) x(0.0x0.0)) = 0.67. w3 = umm (17)xuey (9) + uew (3)xuby (9) -((umm (17)xuey (9))x(uew (3)xuby (9))) = (0.8x0.67) + (0.0x0.0) - ((0.8x0.67) x(0.0x0.0)) = 0.536.
Now we generate candidate 2-itemsets C2 for D partition by partition.
* Processing of P1 .
The weighted count threshold for P1 is 0.4x3x0.67 = 0.804.
The accumulative weighted count threshold for P1 is also 0.804.
Among all the possible combinations of 2-itemsets in P1 , only AD, AE, DE, and DF have accumulative weighted counts greater than or equal to 0.804.
Therefore, these 2-itemsets, together with their accumulative weighted counts (count) and starting partitions (start), are recorded as shown in Table 2.
* Processing of P2 .
The weighted count threshold for P2 is m2 = 0.4x3x0.67 = 0.804.
The accumulative weighted count threshold from partition P1 to partition P2 is 0.804 + 0.804 = 1.608.
We find that 5 new 2-itemsets, AB, AF , BE, BF , and EF in P2 have weighted counts greater than m2 , so they are added to C2 .
Furthermore, the old itemsets AD, AE, DE, and DF have their accumulative weighted counts greater than 1.608.
Therefore, they are retained in C2 .
The information kept after processing P2 is shown in the left part of Table 3.  itemset AB AD AE AF BE BF DE DF EF  P2 start 2 1 1 2 2 2 1 1 2  count 1.34 2.01 2.68 1.34 1.34 2.01 2.01 2.01 1.34  itemset AB AD AE AF BF DE DF EF  P3 start 2 1 1 2 2 1 1 2  count 1.87 3.61 3.21 2.94 2.54 2.54 3.61 1.87  Table 3.
Candidate 2-itemsets generated after scanning partition P2 and P3 , respectively.
* Processing of P3 .
The weighted count threshold for P3 is 0.4x3x0.536 = 0.643.
All new 2-itemsets generated in P3 have weighted counts less than 0.643.
The itemsets generated in P1 all have accumulative weighted counts greater than 2.25 and the itemsets generated in P2 , except BE, have accumulative weighted counts greater than 1.45, so they are retained in C2 and BE is deleted from C2 .
The resulting candidate 2-itemsets after processing P3 are shown in the right part of Table 3.
Therefore, we have C2 C3 C4 Ck  = = = =  {AB, AD, AE, AF, BF, DE, DF, EF }, {ABF, ADE, ADF, AEF, DEF }, {ADEF }, [?
], k >= 5.
By scanning D once, we have the sets of frequent kitemsets, Lk , k >= 2, of D along with their counts to be L2  =  L3 Lk  = =  {(AD, 3.61), (AE, 3.21), (AF, 3.61), (BF, 3.21), (DE, 2.54), (DF, 3.61), (EF, 2.54)}, {(ADE, 2.54), (ADF, 2.94), (AEF, 2.54)}, [?
], k >= 4,  and L = L2 [?
]L3 .
The association rules can then be obtained from the frequent itemsets in L.  4.
Experimental Results In this section, experimental results obtained with a PC with AMD Athlon XP CPU and 1.0G memory are presented.
4.1.
Experiment 1 In this experiment, we compare our fuzzy calendar algebra with the calendar algebra proposed in [16].
The  Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE  Figure 4.
Performance comparison between the calendar algebra and our fuzzy calendar algebra with a simple calendar.
calendar algebra defines operators such as dicing, slicing, and flatten to construct complex calendars.
The time intervals are obtained from a specified calendar and the calendric association rules are discovered in these time intervals.
For a complex calendar, the calendar algebra decomposes the calendar into basic ones, and then the time intervals of each basic calendar are separately searched.
This approach is not efficient since one time interval may be searched with several different basic calendars.
On the contrary, our fuzzy calendar algebra checks each time interval only once and can easily find out all the time intervals in a given calendar.
Repetitive and unnecessary searches in a time interval can be avoided, and the performance is improved.
We use 1825 time intervals collected in 5 years, with each time interval representing one day in a year.
The execution time for finding out the desired time intervals by the calendar algebra and the fuzzy calendar algebra, respectively, is shown in Figure 4.
The calendar algebra searches each time interval twice while the fuzzy calendar algebra searches each time interval only once, and thus we can clearly see that our method is more efficient in interpreting calendars.
For more complicated calendars, i.e., containing more basic calendars, our fuzzy calendar algebra performs even better, as shown in Figure 5.
4.2.
Experiment 2 In this experiment, we'd like to show the effectiveness of our strategy for mining fuzzy temporal patterns.
The number of candidates and frequent itemsets discovered are reported.
The execution time for discovering the itemsets is also presented.
The dataset,  Figure 5.
Performance comparison between the calendar algebra and our fuzzy calendar algebra with complicated calendars.
support threshold 0.02 0.03 0.04 0.05 0.06 0.07 0.08  number of candidate itemsets 1889 1043 911 635 327 245 179  number of frequent itemsets 1167 796 633 512 243 182 115  Table 4.
The Number of candidates and frequent itemsets discovered.
T 10.I4.D100K.C10%, containing synthetic data [1] is used, where T is the mean size of a transaction, I is the mean size of potential maximal frequent itemsets, D is the number of transactions in units of K, i.e., 1000, and C is the correlation between items in terms of percentage.
The dataset is partitioned into 200 partitions and there are 500 transactions in each partition.
To infer from these partitions with our fuzzy calendar algebra, we assume the first partition being the time interval of 2003/01/01, the second partition being of 2003/01/02, .
.
.
, and so on.
The calendar we are interested in is the one given in Eq.(6).
The number of candidates and frequent itemsets discovered are given in Table 4 and the execution time for discovering these itemsets is shown in Figure 6.
From Table 4 and Figure 6, proper numbers of frequent itemsets can be discovered in acceptable time with our method.
5.
Conclusion We have presented the fuzzy calendar algebra which supports fuzzy queries on calendars.
Fuzzy calendars  Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE  Figure 6.
Execution time with different support thresholds.
are natural and easy for use in the sense that they capture the way in which human beings reason with time requirements.
To accommodate temporal expressions with multiple time granularities, five operations, and, or, not, xor, and sub, are introduced.
We have shown the usefulness of the fuzzy calendar algebra by incorporating it with PWM to mine fuzzy temporal association rules from temporal databases.
Firstly, the transactions of the database are divided into a sequence of partitions.
Then the weight of each partition is inferred, denoting the matching degree of the corresponding time period to the fuzzy calendar specified in the user's queries.
Temporal patterns in the divided time periods of different matching degrees are then efficiently produced, and the number of database scans can be effectively reduced.
Experimental results have shown that this approach of finding fuzzy temporal association rules is very effective.
References [1] R. Agrawal and R. Srikant.
Fast algorithms for mining association rules.
In Proceedings of the International Very Large Database Conference , pages 487-499, 1994.
[2] C. Antunes and A. Oliveira.
Temporal data mining: an overview.
In Proceedings of KDD Workshop on Temporal Data Mining, pages 1-13, 2001.
[3] W. H. Au and K. C. C. Chan.
Farm: A data mining system for discovering fuzzy association rules.
In Proceedings of the 8th IEEE International Conference on Fuzzy Systems, pages 1217-1222, 1999.
[4] C. Bettini, C. E. Dyreson, W. S. Evans, and R. T. Snodgrass.
A glossary of time granularity concepts.
Temporal Databases: Research and Practice, Lecture Notes in Computer Science, (1399):406-413, 1998.
[5] C. Bettini and R. D. Sibi.
Symbolic representation of user-defined time granularities.
Annals of Mathematics and Artificial Intelligence, 30(1-4):53-92, 2000.
[6] C. Bettini, X. S. Wang, and S. Jajodia.
Temporal semantic assumptions and their use in databases.
IEEE Trans.
Knowledge and Data Engineering, 10(2):277-296, 1998.
[7] R. Chandra, A. Segev, and M. Stonebraker.
Implementing calendars and temporal rules in next generation databases.
In Proceedings of 10th International Conference on Data Engineering, pages 264-273, 1994.
[8] C. E. Dyreson, W. S. Evans, H. Lin, and R. T. Snodgrass.
Efficiently supporting temporal granularities.
IEEE Trans.
Knowledge and Data Engineering, 12(4):568- 587, 2000.
[9] G. Becher, F. Clerin-Debart and P. Enjalbert.
A model for time granularity in natural language.
In Proceedings of the 5th International Workshop on Temporal Representation and Reasoning, pages 29-36, 1998.
[10] C. Giannella, J. Han, J. Pei, X. Yan, and P. S. Yu.
H. Kargupta, A. Joshi, K. Sivakumar, and Y. Yesha (eds.
), Next Generation Data Mining, chapter Mining Frequent Patterns in Data Streams at Multiple Time Granularities.
2003.
[11] I.
A. Goralwalla, Y. Leontiev, M. T. Ozsu, D. Szafron, and C. Combi.
Temporal granularity: Completing the puzzle.
Journal of Intelligent Information Systems, 16(1):41-63, 2001.
[12] C. M. Kuok, A. W. C. Fu, and M. H. Wong.
Mining fuzzy association rules in databases.
SIGMOD Record, 27(1):41-46, 1998.
[13] C. H. Lee, J. C. Ou, , and M. S. Chen.
Progressive weighted miner: An efficient method for time-constraint mining.
In Proceedings of 7th Pacific-Asia Conference on Knowledge Discovery and Data Mining, pages 449- 460, 2003.
[14] I. Merlo, E. Bertino, E. Ferrari, S. Gadia, and G. Guerrini.
Querying multiple temporal granularity data.
In Proceedings of the Seventh International Workshop on Temporal Representation and Reasoning, pages 103- 114, 2000.
[15] P. Ning, X. S. Wang, and S. Jajodia.
An algebraic representation of calendars.
Annals of Mathematics and Artificial Intelligence, 36(1-2):5-38, 2002.
[16] S. Ramaswamy, S. Mahajan, and A. Silberschatz.
On the discovery of interesting patterns in association rules.
In Proceedings of the International Very Large Database Conference, pages 368-379, 1998.
[17] J. F. Roddick and M. Spiliopoulou.
A survey of temporal knowledge discovery paradigms and methods.
IEEE Trans.
Knowledge and Data Engineering, 14(4):750- 767, 2002.
[18] M. D. Soo, R. T. Snodgrass, C. E. Dyreson, C. S. Jensen, and N. Kline.
Architectural extensions to support multiple calendars.
Technical Report TR-32, Computer Science Department, University of Arizona, 1992.
[19] L.A. Zadeh.
Fuzzy sets.
Information and Control, 8:338- 353, 1965.
[20] R. J. Zhang and E.Unger.
Calendar algebra.
Technical Report TR-CS-96-1, Kansas State University, 1996.
Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME'04) 1530-1311/04 $20.00 (c) 2004 IEEE