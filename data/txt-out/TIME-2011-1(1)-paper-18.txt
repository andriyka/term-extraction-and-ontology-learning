2011 Eighteenth International Symposium on Temporal Representation and Reasoning  Temporal Access to the Iteration Sequences A unifying approach to dZxed point logics Alexei Lisitsa Department of Computer Science University of Liverpool Liverpool, UK Email: A.Lisitsa@liverpool.ac.uk  approximations computed iteratively.
We suggest to look on the iteration process itself and augment the logic with an access to the iteration stages via temporal formulae.
As a result we get a logic FO+TAI (temporally accessible iteration) which naturally subsumes many (virtually all deterministic variants of) inductive logics, including logics with least dZxed point, indZationary dZxed point, variants of partial dZxed points, as well as logics with anti-monotone and non-monotone inductions.
We present the semantics of FO+TAI for dZnite structures only.
The case of indZnite structures requires considering transdZnite iterations and temporal access to the iteration stages would need a variant of temporal logic over ordinals (e.g.
[6]).
This case requires further investigations and will be treated elsewhere.
We show that over dZnite structures FO+TAI is not less expressive than all mentioned inductive logics and at the same time has the same expressive power as FO+PFP.
Further, we show that adding the same machinery to the logic of monotone inductions (FO+LFP) does not increase its expressive power.
Finally, we show that the extension of the modal mu-calculus with the temporal access leads to the more expressive logic closed under assume-guarantee specidZcations The paper is organized as follows.
In the next section we introduce classical dZxed-point logics and dZrst-order temporal logics.
Based on that in the Section III we dedZne the logic FO+TAI.
In Section IV we demonstrate how to dedZne in FO+TAI classical inductive constructs.
In Section V it is shown that FO+TAI subsumes the logic of non-monotone induction FO+ID.
In Section VI we consider expressive power of FO+TAI and its monotone fragment.
In Section VII we consider the same idea applied to the modal d-calculus.
Section VIII concludes the paper.
AbstractaThe semantics of dZxed point constructions is commonly dedZned in terms of iteration sequences.
For example, the least dZxed point of a monotone operator consists of all points which eventually appear in the approximations computed iteratively.
We take this temporal reading as the starting point and develop a systematic approach to temporal dedZnitions over iteration sequences.
As a result, we propose an extension of dZrst-order predicate logic with an iterative operator, in which iteration steps may be accessed by temporal logic formulae.
We show that proposed logic FO+TAI subsumes virtually all known deterministic dZxed point extentions of dZrst-order logic as its natural fragments.
On the other hand we show that over dZnite structures FO+TAI has the same expressive power as FO+PFP (FO with partial dZxed point operator), but in many cases providing with more concise dedZnitions.
Finally, we show that the extension of modal mu-calculus with the temporal access leads to the more expressive logic closed under assume-guarantee specidZcations operator.
I. I NTRODUCTION The logics with inductive operators (or, dZxed point constructs) play an important role in foundations of computer science.
Logical languages with dZxed point constructs serve as theoretical models of query languages in database theory and, when considered over linearly ordered dZnite structures, can be used to characterize computational complexity classes within descriptive complexity theory [24], [14], [15].
The relationships between dZxed point logics and complexity have many interesting aspects a the logics redZect faithfully computations over structures and this led to formulation of a new notion of relational complexity [4].
On the other hand, tantalizing open problems in computational complexity can be formulated in logical terms, for example PTIME = PSPACE if and only if logics with least dZxed point and partial dZxed points have the same expressive power over classes of dZnite models [3].
In other direction, modal logic with dZxed points, d-calculus, is one of the unifying formalisms used in the research on model checking and veridZcation [9].
Not necessarily monotone inductive dedZnitions also appear in the research on semantics of logic programming [11], in formalization of reasoning [8] and in the revision theory [19].
In this paper we propose a simple mechanism which ainternalizesa the various variants of the inductive dedZnitions within a single logic.
Semantics of dZxed-point operators is usually dedZned by using an iteration and in terms of awhat the iteration converges toa.
For example, the least dZxed point of a monotone operator consists of all points which eventually appear in the 1530-1311/11 $26.00 AS 2011 IEEE DOI 10.1109/TIME.2011.28  II.
P RELIMINARIES A.
Fixed point extensions of dZrst-order logic We start with a short review of inductive dedZnability, which will set up a context in which logics with temporally accessible iteration naturally appear.
In this paper we will mainly deal with dedZnability over (classes of) dZnite structures, so unless otherwise stated all structures are assumed to be dZnite.
Let d(d, dL AZ) be a dZrst-order formula, where d is a relation symbol of some arity d and dL AZ is a tuple of individual variables of the length d (the same as the arity of d).
Consider a structure al with the domain d , interpreting all symbols in 57  aSS d1 (dLAZ1 ) a d1 (d1 , .
.
.
, dd , dLAZ1 ) dL' dL' a" .. d := .
dL' dL' aS dd (dLAZd ) a dd (d1 , .
.
.
, dd , dLAZd )  d  d except d and dL AZ.
Then one can consider a map ISd : 2d a dd 2 , i.e mapping d-ary relations over d to d-ary relations over d dedZned by d(d, dL AZ) as follows:  is a system of formulae.
Consider a structure al with the AZ.
domain d , interpreting all symbols in dd except dd and dL d1 d dd Then dd dedZnes a mapping ISdd : 2d A .
.
.
2d d a 2d , where all dd are arities of dd , as follows: ISdd (d1 , .
.
.
, dd ) = AZ)}.
DedZnitions of all mentioned {AZ d aL al aL= dd (d1 , .
.
.
, dd , d dZxed points naturally generalize to the case of simultaneous iteration  ISd (d ) = {AZ d aL al aL= d(d, d AZ)} Various dZxed-point constructions may then be dedZned.
If operator ISd is monotone then by classical Knaster-Tarski theorem [23] it has a least dZxed-point, that is the least relation d, such that d(AZ dL) a d(d, dL AZ) holds.
This least dZxed-point da can be obtaned as a limit of the following iteration: a a  d0 = a dd+1 = IS(dd )  dd0 = a  Over dZnite structures this iteration stabilizes on some dZnite step d aL 0: dd+1 = dd .
A simple syntactical property of d(d, dL AZ) which guarantees monotonicity of ISd is that this formula is positive in d. The IndZationary dZxed point of a not necessary monotone operator IS is dedZned as the limit of the following iteration: a a  ddd+1 = ISdd (d1d , .
.
.
ddd ).
The formula [dzd dV dd : d]dAAZ is true for a tuple of terms dAAZ if its interpretation belongs to d-th component dda of the corresponding simultaneous dZxed point.
Notice that the semantics of simultaneous PFP is dedZned componentwise: for the iteration above, dda = a if dd diverges and dda is the limit of dd if it exists.
For all mentioned logics, simultaneous induction can be eliminated and equivalent formulae with simple induction can be produced [10], [18].
d0 = a dd+1 = IS(dd ) aS dd  The indZationary dZxed point exists for an arbitrary operator and over dZnite structures the above iteration reaches it at some dZnite step.
The Partial dZxed point of an operator IS dedZned by an arbitrary formula d(d, dL AZ) is dedZned as follows.
Consider the iteration: a a  B. First-order temporal logic The language dZ a of dZrst-order temporal logic over the natural numbers is constructed in the standard way from a classical (non-temporal) dZrst-order language a and a set of future-time temporal operators aaVa (sometime), a a (always), a a (in the next moment), addeg a(until).
Formulae in dZ a are interpreted in dZrst-order temporal structures of the form d = a"dV, aaS , where dV is a nonempty set, the domain of d, and a is a function associating with every moment of time d a a an interpretation of predicate, function and constant symbols of a over dV.
Firstorder (nontemporal) structures corresponding to each point of time will be denoted dd = a"dV, a(d)aS.
Intuitively, the interpretations of dZ a-formulae are sequences of dZrst-order structures, or states of d, such as d0 , d 1 , .
.
.
, d d .
.
.
.
An assignment in dV is a function d from the set av of individual variables of a to dV.
If d is a predicate symbol then d a(d) (or simply d d if a is understood) is the interpretation of d in the state dd .
We require that (individual) variables and constants of dZ a are rigid, that is neither assignments nor interpretations of constants depend on the state in which they are evaluated.
The satisfaction relation dd aL=d d (or simply d aL=d d, if d is understood ) in the structure d for the assignment d is dedZned inductively in the usual way under the following semantics of temporal operators:  d0 = a dd+1 = IS(dd )  Partial dZxed point of IS is a dZxed point (limit) of the iteration (if it exists) and the empty set otherwise.
Aiming to resolve difdZculties in the dedZnition of semantics of partial dZxed point operator over indZnite structures in [18] an alternative general semantics (PFPgen) for such an operator has been proposed.
We will discuss it later in IV-D. Let IND is one of the above dZxed point operators (LFP, IFP, PFP or PFPgen) then the syntax of logic FO+IND extends the standard syntax of dZrst-order logic with the following construct.
Let d(d, dL AZ) be a formula with free individual variables including dL AZ = dL1 , .
.
.
, dLd and free predicate variable d. For the case IND aA LFP we additionally require that d(d, dL AZ) is positive in d. Then d := [dzd dVd,AZdL d]dAAZ is also formula.
Free individual variables of d are free variables occurring in d and dA other than dL AZ.
Semantics of such formula d is read then as follows: an interpretation of tuple of terms dAAZ belongs to the relation which is a dZxed point of the operator ISd of the corresponding type IND (i.e.
least, indZationary, partial, or generalized partial dZxed point, for IND aA LFP, IFP, PFP, PFPgen, respectively.)
Usually the above logics are dedZned in a way allowing also simultaneous inductive dedZnitions, i.e the formulae of the form [dzd dV dd : d]dAAZ where 58  d aL=d d d aL=d aVd d d aL=d d aL=d dddeg d and  iff iff iff iff  dd0 = a  d + 1 aL=d d there is d aL d such that d aL=d d d aL=d d for all d aL d there is d aL d such that d aL=d d d aL=d d for every d a$?
d < d  ddd+1 = ISdd (d1d , .
.
.
ddd ) induces a temporal structure d = d0 , .
.
.
, dd , .
.
., where every dd is a structure al extended by interpretation of dd by ddd .
Let d be an d-ary relation dedZned by d(AZ dSS ) on d0 (i.e on d ).
Then for any tuple d AZ a d d , al aL= [d(AZ dSS )][dz : d]AZ d iff d AZ a d.  Let d be a temporal structure and d(AZ dL) be a temporal formula with dL AZ only free variables and aLAZ dLaL = d. Then d(AZ dL) dedZnes a d-ary relation d on d0 as follows: d (AZ d) a d0 aL=d d(AZ dL) where d : dL AZ a d AZ.
III.
L OGIC WITH TEMPORALLY ACCESSIBLE ITERATION  Proposition 1 FO+TAI with simultaneous iteration has the same expressive power as FO+TAI with singular iteration.
In all variants of inductive logics we have discussed in the previous section, the semantics of dZxed-point construction can be dedZned in terms of iteration of operators, associated with some formulae.
In this section we described a logic which generalizes and subsumes all these logics.
The idea is simple: instead of dedZning a particular dZxed-point construct we allow arbitrary iterations of operators dedZned by formulae.
These iterations when evaluated over a structure give rise to the sequences of relations over that structure.
Then we allow dZrst-order temporal logic machinery to access these sequences of relations (temporal structures) and dedZne new relations in terms of these sequences.
The syntax of ds d + d d'dz (dZrst-order logic with temporally accessible iterations) extends the standard syntax of dZrstorder logic with the following construct.
Let d(d, dL AZ) be a formula with free individual variables dL AZ = dL1 , .
.
.
, dLd and free predicate variable d of arity d. Let d(AZ dSS ) be a dZrst-order temporal formula (dZ a-formula) with free individual variables dSS )][dzd,AZdL d]dAAZ is also formula, dSSAZ = dSS1 , .
.
.
, dSSd .
Then d := [d(AZ where dAAZ is a tuple of terms of the same length as dSSAZ.
The free variables of d are the free variables occurring in dAAZ and the free variables of d and d other than dSSAZ and dL AZ, respectively.
The semantics of this construct is dedZned as follows.
Let al be a structure with the domain d and interpretations of all predicate and functional symbols in al, which will be denoted by d d and d d .
Let d be an assignment providing an interpretation of free variables of d and d in d .
Consider the iteration d0 = a and dd+1 = ISd (dd ).
It gives rise to the temporal structure d = d0 , .
.
.
, dd , .
.
., where every dd is a structure al extended by an interpretation of d by dd .
In particular d0 is al augmented with the empty interpretation of d. Let d is an d-ary relation dedZned by d(AZ dSS ) on d0 (i.e on dSS )][dzd,AZdL d]AZ d iff d AZa d ).
Then for any tuple d AZ a d d , al aL= [d(AZ d .
As in other dZxed point logics, we also allow simultaneous iteration formulae, i.e.
the formulae of the form d := [d(AZ dSS )][dz : d]dAAZ where aSS dL' dL' d1 (dLAZ1 ) a d1 (d1 , .
.
.
, dd , dLAZ1 ) a" .. d := .
dL' dL' aS dd (dLAZd ) a dd (d1 , .
.
.
, dd , dLAZd )  Proof (hint).
The proof proceeds by standard argument based on faithful modelling of simultaneous iteration by a single iteration of higher-dimensional joint operator.
Full details of such modelling (for LFP, IFP, PFP) can be found in [10].
IV.
FO+TAI VS OTHER FIXED POINT LOGICS In this section we show that FO+TAI subsumes many dZxed point logics.
We start with classical dZxed point constructs.
A.
Least Fixed Point Translation of LFP construct in FO+TAI follows literally a description of the least dZxed point as a limit - least dZxed point consists of precisely those tuples which eventually appear in approximations: AZ)]dAAZ := [aVd(AZ dSS )][dzd,AZdL d(d, dL AZ)]dAAZ [dzds dd,AZdL d(d, dL Here we assume of course that d is positive in d(d, dL AZ).
B. IndZationary Fixed Point Similarly to the case of LFP we have for IndZationary Fixed Point the following dedZnition: [dzds dd,AZdL d(d, dL AZ)]dAAZ := [aVd(AZ dSS )][dzd,AZdL (d(AZ dL) a" d(d, dL AZ))]dAAZ C. Partial Fixed Point The following dedZnition AZ)]dAAZ := [d ds dd,AZdL d(d, dL [aV(d(AZ dSS ) aSS aAZ dL (d(AZ dL) a  AZ)]dAAZ d(AZ dL )))][dzd,AZdL d(d, dL  says that Partial Fixed Point consists of the tuples satisfying two conditions: 1) a tuple should appear at some stage d of iterations, and furthermore 2) approximations at the stages d and d + 1 should be the same.
is a system of formulae.
Simultaneous iteration  59  D. General PFP  where d d (d) is the temporal formula  In [18] an alternative semantics for PFP has been dedZned under the name general PFP.
Unlike the standard PFP general PFP generalizes easily to indZnite structures and having the same expressive power as standard PFP over dZnite structures provides sometimes with more concise and natural equivalent formulae.
As we mentioned in the Introduction, in this paper we consider only semantics over dZnite structures and for this case dedZnition of general PFP is as follows.
Let IS is an operator dedZned by an arbitrary formula d(d, dL AZ).
Consider the iteration: a d0 = a a dd+1 = IS(dd ) Then general partial dZxed point of IS is dedZned [18] as a set of tuples which occur at every stage of the dZrst cycle in the sequence of stages.
As noticed in [18], in general, this dedZnition is not equivalent to saying that the dZxed point consists of those tuples which occur at all stages starting from some stage.
Non-equivalence of two dedZnitions can be established if transdZnite iteration is allowed.
Since we consider the iteration over dZnite structures only, a cycle, that is a sequence dd , .
.
.
, dd with dd = dd , will necessarily appear at some dZnite stages d and d. Based on that, for the case of dZnite structures we have the following equivalent dedZnition of PFPgen in terms of FO+TAI:  aV(d(AZ dSS ) aSS aAZ dS (d(AZ dS) a  AZ)]dAAZ := [aV [d ds d dddd,AZdL d(d, dL  d(AZ dS )) aSS (aAZ dS (d(AZ dS) aSS  aAZ dS (d(AZ dS) a  AZd(AZ dS ))a"  d(AZ dS ))))  Similarly we have d [ddd,AZ AZ)]dAAZ := [d d (d)][dzd,AZdL d(d, dL AZ)]dAAZ dL d(d, dL  where d d (d) is the temporal formula aV(d(AZ dSS ) aSS aAZ dS (d(AZ dS) a  d(AZ dS )) aSS (aAZ dS (AZd(AZ dS) aSS  aAZ dS (d(AZ dS) a  d(AZ dS ))a"  d(AZ dS ))))  F. Further variations of FO+TAI dedZnitions In the above FO+TAI dedZnition for LFP it is assumed that d(d, dL AZ) is positive in d. If we consider the same dedZnition [aVd(AZ dSS )][dzd,AZdL d(d, dL AZ)]dAAZ for not necessarily positive (and monotone) d(d, dL AZ) than we get a dedZnition of an operator which does not have direct analogue in standard dZxed-point logics and may be considered as a variation of PFP, which we denote by d ds d aS .
It has turned out though that d ds d aS is easily dedZnable by simultaneous PFP, for details see Theorem 1.
If in the dedZnition of PFPgen we swap temporal operators we get a dedZnition of what can be called Recurrent Fixed Point (RFP)1 : [dds dd,AZdL d(d, dL AZ)]dAAZ := [  d(AZ dSS )][dzd,AZdL d(d, dL AZ)]dAAZ  aVd(AZ dSS )][dzd,AZdL d(d, dL AZ)]dAAZ  Again it is not difdZcult to demonstrate that dds d is dedZnable in terms of either PFP or PFPgen.
The dedZnition says that general PFP consists of those tuples which occur at all dZnite stages starting from some stage of iteration.
V. ID- LOGIC OF NON - MONOTONE INDUCTION Motivated by well-founded semantics for logic programming in [7] a logic ID of non-monotone dedZnitions has been introduced.
Similarly to already discussed dZxed point extensions, the syntax of ID-logic (this version2 we call FO+ID) extends the standard syntax of dZrst-order logic with the following construct.
Let d(d, dL AZ) be a formula with free individual variables dL AZ = dL1 , .
.
.
, dLd and free predicate variable dL) a d(d, dL AZ))]dAAZ is also formula.
d .
Then d := [dzdVd,AZdL (d (AZ Now we explain semantics of this construct in terms of FO+TAI, showing thereby that FO+ID is also subsumed by FO+TAI.
Since d(d, dL AZ) may have both negative and positive occurrences of d the iteration of the operator I"d applied to the empty interpretation of d will not necessary converge to a dZxed point.
In the semantics adopted in FO+ID, the extension of dedZned predicate is obtained as a common limit of iteratively computed lower and upper bounds (if it exists).
Introduce two new auxiliary predicate variables dd and ddV , with the intended meaning to be lower and negated upper approximations for the dedZned predicate.
Further, denote by  E. Anti-monotone induction AZ).
Let ISd be an operator associated with a formula d(d, dL It may turn out that this operator is anti-monotone, that is d a d a, => ISd (d a, ) a ISd (d ).
Syntactical condition which entails anti-monotonicity is that the predicate variable d has only negative occurrences in d(d, dL AZ).
An interesting analogue of classical Knaster-Tarski result holds [27], [11]: for antimonotone operator IS the iteration d0 = a, dd+1 = IS(dd ) converges to a pair of oscillating points d and d that is d = IS(d ) and d = IS(d).
What is more, one of the oscillating points is a least dZxed point d and another is the greatest dZxed point d of the monotone operator IS2 (where IS2 (d) = IS(IS(d))).
One may extend then the dZrst-order logic with suitable oscild d AZ)]dAAZ and [ddd,AZ AZ)]dAAZ lating points constructs [ddd,AZ dL d(d, dL dL d(d, dL for d(d, dL AZ) negative in d, with obvious semantics.
Because of the dedZnability of oscillating points as the dZxed points of IS2 , dZrst order logic extended with these constructs is no more expressive than FO+LFP and therefore than FO+TAI.
What is interesting here is that FO+TAI allows to dedZne oscillating points directly, not referring to LFP construct.
For the greater of two oscillating points we have  1 Notice, than in general, and similarly to PFPgen, neither of PFPaS or RFP dedZne dZxed points of any natural operators.
But we follow [18] and retain the name adZxed pointsa and FP in abbreviations.
2 In [7] the inductive dedZnitions of ID-logic are presented not by operators, but by special formulae called dedZnitions.
The difference is purely syntactical and insignidZcant for our discussion here.
d AZ)]dAAZ := [d d (d)][dzd,AZdL d(d, dL AZ)]dAAZ [ddd,AZ dL d(d, dL  60  d(dd ), respectively, by d(AZddV ) the result of replacement of all negative occurrences of d in d(d, dL AZ) with dd , resp.
with AZddV .
All positive occurrences of d remains unaffected in both cases.
Consider then the following dedZnition of the step of simultaneous iteration: { ddV (AZ dS ) a AZ[dzds dd,AZdL (d(dd ))]AZ dS d := dd (AZ dS ) a [dzds dd,AZdL (d(AZddV ))]AZ dS  we wish to consider.
In general the dedZnition of dd depends (syntactically) on the choice of dSSAZ, and all variables in dSSAZ may occur free in dd .
The dedZnition of dd is by induction on d. For atomic d we let dd = d, so that al aL=d dd iff ala , 0 aL=d d as required by (1).
We stipulate that the map d a dd commutes with all dZrst-order operations.
Let d, d be given and assume we have dedZned dd .
Then: a d is the result of replacing each subformula d(dAAZ) in d dd by the result of freely substituting dAAZ for dL AZ in da (or a by aAZ dL(dAAZ = dL AZ aSS d )).
a daVd = [d ds d dAZ dSS : d] where aSS a" d'ad da, (AZ dL) a [(d' a (da )(da, /d) aSS (AZd' a d(AZ dL))] d := aS d(AZ dSS ) a d(AZ dSS ) a" (d' aSS dd (da, /d))  Since both d(dd ) and d(AZddV ) are positive in d the least dZxed point operators in the right hand sides of the dedZnitions are well-dedZned.
Starting with dd0 = ddV0 = a and iterating this dedZnition one gets the sequences of lower and negated upper approximations ddd and ddVd .
If the lower and upper approximations converge to the same limit, i.e.
dda = AZddVa then by dedZnition [7] this limit is taken as the predicate dedZned by the above IDconstruct.
Summing up, the FO+ID formula d shown above is equivalent to the following formula of FO+TAI: dL) aSS aAZ dS (dd (AZ dS ) a AZddV (AZ dS ))][dz : d a ]dAAZ [aV(ddz (AZ  a  where d a is obtained of the above d by translation of the right hand side parts of S into FO+TAI.
VI.
E XPRESSIVE POWER We have seen in previous sections that FO+TAI is very expressive logic and subsumes many other dZxed-point logics, including most expressive (among mentioned) FO+PFP (and FO+PFPgen).
The natural question is whether FO+TAI is more expressive than FO+PFP?
In this section we answer this question negatively and show that for any formula in FO+TAI one can effectively produce an equivalent (over dZnite structures) FO+PFP formula.
Here, (da, /d) denotes replacement of the relation symbol d by a new one, da, , of the same arity.
A is 0-ary relation symbol representing aactivea.
d' is false initially and true thereafter.
ddddeg d = [d ds d dAZ dSS : d] where aSS d'ad dL' dL' a" a, dL) a [(d' a (da )(da, /d) aSS (AZd' a d(AZ dL))] d (AZ d := dl(AZ dSS ) a dl(AZ dSS ) a" (d' aSS AZdd (da, /d)) dL' dL' aS dSS )) d(AZ dSS ) a d(AZ dSS ) a" (dd (da, /d) aSS AZdl(AZ  Now we dedZne ([d][dzd,AZdL d](dAAZ))a to be the result of replacing dSS ) by aL.
every subformula d(AZ dL )) of dd (dAAZ/AZ Correctness of the proposed translation d a d a is established by induction along the construction.
Correctness of the base case and induction steps follows by routine check of dedZnitions.
Theorem 1 For every formula d := [d][dzd,AZdL d]dAAZ of FO+TAI there is an equivalent formula d a of FO + PFP  A. Temporally accessible monotone induction What happens if we apply temporal logic based access to the iteration steps of monotone induction?
Will the resulting logic be more expressive than the logic of the monotone induction?
Negative answer is given by the following theorem.
We dedZne a translation of TAI-formula d to a PFP-formula da satisfying al aL=d d a da for all structures al and assignments d to variables.
It is dedZned by induction on d construction.
If d is atomic, we dedZne da = d, and we stipulate that the operation aa commutes with all dZrst-order connectives and quantidZers.
Fix d(d, dL AZ) and suppose da is dedZned.
For each temporal formula d, we will dZrst dedZne an auxiliary PFP-formula dd with property (1) below, which can easily be used to show that the translation is correct.
Given a structure al with interpretations for all symbols of d, including d, we dedZne ala, to be the d) iff al aL= d(d; d AZ) same as al except that ala, aL= d(AZ for each d AZ a d aLAZdLaL .
Let ala be the temporal structure (al, ala, , ala,a, , .
.
.).
Then for all al and all assignments d of dZrst-order variables into (the domain of) al, we will have  Theorem 2 For every formula d := [d][dzd,AZdL d]dAAZ of FO+TAI with d positive in d there is an equivalent formula (d )a of FO + LFP  (1)  Proof.
The translation here uses the stage comparison theorem of Moschovakis [21].
With any monotone map ISd of arity d dedZned by a positive in d formula and a structure with dZnite domain d on can associate a rank function aL aLIS : d d a aaS{a} which when applied to any tuple of elements d AZ a dd yeilds the least number d such that d AZ a ISd (a) if such d exists and a otherwise, i.e.
when d AZ aa ISa d (a) AZ a$?IS AZd a d AZ, AZd a Stage comparison relation a$?IS dedZned as d AZd aL.
(a) and aL d AZ aLa$?aL ISa d  First, for simplicity of dedZnitions, we dZx a tuple dSSAZ of distinct variables containing all variables (free and bound) of all d  Theorem 3 (stage comparison [21]) For any dzds dd operator associated with a dZrst-order formula d(d, dL AZ) positive in  al aL=d dd a ala , 0 aL=d d  61  d the stage comparison relation a$?d is dedZnable in FO+LFP uniformly over all dZnite structures.
central in assumption-guarantee paradigm [20], [22], [2], [12], [25] for compositional or hierarchical veridZcation.
Within this paradigm a component of a system is specidZed in terms of assumptions about its environment and properties it guaranteed about its behaviour, provided the assumptions hold.
Reasoning about such specidZcations uses a kind of circular compositional rule and [25] provides with a unifying framework in which assume-guarantee semantics was given for properties expressible as dZxed points.
In [26] higher-order modal dZxed point logic was proposed which allows to dedZne assume-guarantee specidZcations for modal dZxed points.
We show here that there is an alternative way to dZx dcalculus, that is by adding the temporal access to it.
It makes an extended d-calculus more expressive and closed under assumeguarantee specidZcations.
Extend the standard synax of d-calculus by the following construct [d][dz : d] where d is a propositional linear time temporal formula and aSS d1 a d1 (d1 , .
.
.
, dd ) dL' dL' a" .. d := .
dL' dL' aS dd a dd (d1 , .
.
.
, dd )  The stage comparison relation can be used then to simulate time in modelling temporal access to the iteration steps within FO+LFP.
As above, the translation is dedZned by induction on formula structure.
We present here only the translation of dSS ) is a temporal formula and d is in [d(AZ dSS )][dzd,AZdL d]dAAZ where d(AZ FO+LFP.
For a formula [d(AZ dSS )][dzd,AZdL d]dAAZ, dedZne the translation of its temporal header d(AZ dSS ) in the context of iteration [dzd,AZdL d], to a formula in FO+LFP.
The translation is indexed by either a constant d  (from d dAdddA) or a tuple of variables of the same length as the arity of the predicate used in iteration dedZnition, i.e.
of d. Intuitively, [a]d  and [a]dVAZ denote interpretations at the 0th stage of iteration and at the stage aLAZ dVaLd , respectively.
a [d(AZ dL)]d  := aL (for the iteration predicate d) a [d (AZ dL)]d  := d (AZ dL) (for any predicate d other than iteration predicate).
a [d(AZ dL)]dVAZ := dL AZ a$?d dV AZ aSS d(AZ dL) (for the iteration predicate d ) a [d (AZ dL)]dVAZ := d (AZ dL) (for any predicate d other than iteration predicate) d  d  d  a [d aSS d ] := [d] aSS [d ] dV AZ dV AZ dV AZ a [d aSS d ] := [d] aSS [d ] d  d  a [AZd] := AZ[d] dV AZ dV AZ a [AZd] := AZ[d] d  d  a [adLd] := adL[d] dV AZ dV AZ a [adLd] := adL[d] a [ d ]d  := aAZ dV(d(AZ dV) aSS [d ]dVAZ ) a, a [ d ]dVAZ := adVAZa, (dddLdAd (AZ dV, dV AZa, ) aSS [d ]dVAZ ) d  dV AZ a [aVd ] := aAZ dV[dzds dd,AZdL d]AZ dV aSS [d ] a, dV AZ dVa, ((AZ dV a$?d dV AZa, ) aSS [d ]dVAZ ) a [aVd ] := aAZ d  a [dddeg d ] := aAZ dV([dzds dd,AZdL d]AZ dV aSS [d ]dVAZ ) aSS aAZ dVa, (AZ dVa, <d dV AZ) a dV AZa, [d] a, dV AZ a [dddeg d ] := aAZ dVa, (AZ dV a$?d dV AZa, aSS [d ]dVAZ ) aSS aAZ dVa,a, (AZ dV a$?d dV AZa,a, <d a,a, a, dV AZ dV AZ ) a [d] In the dedZnition of [ d ]dVAZ above, the expression dV, dV AZa, ) denotes a LFP formula dedZning the relation next dddLdAd (AZ with respect to linear order a$?d .
Now to get a formula in FO+LFP equivalent to [d(AZ dSS )][dzd,AZdL d]dAAZ we take the translation [d(AZ dSS )]d  in the context of [dzd,AZdL d]dAAZ.
Correctness of the proposed translation d a d a is established by induction along the construction.
Correctness of the base case and induction steps follows by routine check of dedZnitions.
where d1 , .
.
.
, dd have only positive occurences in d1 , .
.
.
, dd .
For a transition system with a set of states d the iteration of the monotone operator dsd associated with the above d gives rise to the sequence dAZ 0 = AZa and t dAZ d+1 = dsd (dAZ d ).
For every state d  a d this sequence induces a propositional temporal model d (d ) by letting d (d )d aL= dd iff d  a ddd .
DedZne now the semantics of [d][dz : d] to be the set of all points in d whose associated temporal models satisfy d , i.e.
{d  a d aL d (d ) aL= d}.
We call such a dedZned extenstion d+TAI.
DedZnition 1 (assume-guaranteed specidZcations [26]) For monotonic functions d', ds : 2d a 2d , the assumeguarantee property dd.d'(d) al dd.ds(d) a 2d is dedZned as d  a dd.d'(d) al dd.ds(d) iff ad aL 0.d  a [dd.d'(d)]d a d  a [dd.ds(d)]d+1 .
Proposition 2 For all d+TAI formulae d(d) and d(d ) positive in d and d , assume-guarantee property d(d) al d(d ) is dedZnable in d + d d'dz.
Proof.
Let d(d) al d(d ) aA [ d(d); d a d(d )].
(d a  d )][d a  Corollary 1 d+TAI is more expressive than d-calculus.
VII.
M ODAL d- CALCULUS WITH TEMPORAL ACCESS  VIII.
C ONCLUDING REMARKS Modal d-calculus [16] is an extenstion of a basic propositional modal logic with the monotone dZxed points.
It is an expressive logic subsuming many other propositional temporal logics and it is one of the unifying formalisms used in the research on model checking and veridZcation.
As it was shown in [26] the d-calculus is not closed under construction of the assume-guarantee specidZcations which are  We proposed in this paper the logic with temporally accessible iteration which provides the simple unifying framework for studying logics with inductive dZxed point operators.
Obvious next step is to extend the semantics to the case of indZnite structures.
Also of interest are modidZcations of FO+TAI with branching time access to incorporate non-deterministic inductive dedZnitions [5].
Further analysis of the modal variants,  62  [24] M. Vardi, The complexity of relational query languages.
In Proceedings of the 14th ACM Symposium on the Theory of Computing, 1982, pp 137-146.
[25] M. Viswanathan and R. Viswanathan, Foundations of Circular Compositional Reasoning,.
In Proceedings of the International Colloquim on Automata, Languages and Programming.
LNCS 2076, Springer-Verlag, 2001, pp 835-847.
[26] M. Viswanathan and R. Viswanathan, A Higher Order Modal Fixed Point Logic, in P. Gardner and N. Yoshida (Eds.
): CONCUR 2004, LNCS 3170, pp 512-528, 2004.
[27] S.Yablo.
Truth and redZection.
Journal of Philosophical Logic, 14: 297a 349, 1985.  including the logics with not necessarily monotone inductive dedZnitions and comparisons with MIC (modal iteration calculus) and MPC (modal partial iteration calculus) [17] are required.
Finaly notice that FO+TAI and its variants may dZnd applications in formal analysis of revision theory in the spirit of proposition from [19] to analyse athe nonmonotonic process by looking at the behaviour of interpretations under revision rulesa.
ACKNOWLEDGMENTS Author would like to thank anonymous referees for their helpful suggestions.
R EFERENCES [1] P. Aczel.
An introduction to inductive dedZnitions.
In Handbook on Mathemtical Logic, J. Barwise, ed., Horth-Holland Publishing Compant, 1977.
[2] M. Abadi, L. Lamport, Composing SpecidZcations.
ACM Transactions on Programming Languages and Systems 17 (1995) 507-534.
[3] S.Abiteboul and V. Vianu.
Computing with dZrst-order logic.
J. Compt.
Syst.
Sci., 50, 1995, pp 309-335.
[4] S. Abiteboul, M. Vardi, V. Vianu, Fixpoint logics, relational machines, and computational complexity.
Journal of ACM, v.44, January 1997, pp 30-56.
[5] A. Dawar and Y. Gurevich, Fixed-point logics.
Bulletin of Symbolic Logic, 8(1):65-88, 2002.
[6] S. Demri and D. Nowak.
Reasoning about transdZnite sequences.
International Journal of Foundations of Computer Science, 18(1), pp 87-112, 2007.
[7] M. Denecker, and E. Ternovska, A Logic of Non-Monotone Inductive DedZnitions, ACM Transactions on Computational Logic, Vol.
9, No.
2, Article 14, 2008.
[8] M. Denecker, and E. Ternovska, Inductive Situation Calculus, ArtidZcial Intelligence 171 (5-6), pp.
332-360, April, 2007.
[9] E. Allen Emerson, Model Checking and the Mu-calculus.
Descriptive Complexity and Finite Models: 185-214, American Mathematical Society.
1996 [10] H.-D. Ebbinghaus, J. Flum, Finite Model Theory, 2nd Edition, Springer, 1999 [11] M. Fitting, Fixpoint semantics for logic programming a a survey.
Theoretical Computer Science, 278, pp 25a31, 2002.
[12] T.A.
Henzinger, S. Qadeer, S.K.
Rajamani, S. Tasiran, An assumeguarantee rule for checking simulation.
In G. Gopalakrishnan, P. Windley, eds.
FMCAD 98: Formal Methods in Computer-aided Design, vol 1522 of LNCS, Springer-Verlag 91998) 421a432 [13] D.M.
Gabbay, M.A.
Reynolds, M. Finger.
Temporal Logic.
Mathematical Foundations and Computational Aspects, Volume 2, Oxford Science Publications, Clarendon Press, 2000.
[14] N. Immerman.
Relational queries computable in polynomial time.
Informaton and Control, 68, pp 86a104, 1986 [15] N. Immerman.
Descriptive Complexity, Springer-Verlag, 1999.
[16] D. Kozen, Results on the propositional d-calculus.
Theoretical Computer Science, 27, pp 333-354, 1983.
[17] S. Kreutzer, Pure and Applied Fixed-Point Logics, dissertation thesis, RWTH Aachen, 2002.
[18] S. Kreutzer, Partial Fixed-Point Logic on IndZnite Structures, Proceedings of CSL 2002, pp 337-351, 2002.
[19] B.
LA" dwe, Revision Forever!
in Conceptual Structures: Inspriration and Application, LNCS 4068, pp 22-36, 2006.
[20] J. Misra, K.M.
Chandy, Proofs of network processes.
IEEE Transactions on Software Engineering SE-7 (1981) 417a226 [21] Y.N.
Moschovakis.
Elementary Induction on Abstract Structures, North Holland, 1974.
[22] A. Pnueli, In transition from global to modular temporal reasoning about programs.
In: Logics and Models of Concurrent Systems.
Nato ASI Series.
Springer-Verlag (1984) 123-144 [23] A. Tarski, Lattice-theoretical dZxpoint theorem and its applications.
PacidZc Journal of Mathematics, 5, 285a309, 1955  63