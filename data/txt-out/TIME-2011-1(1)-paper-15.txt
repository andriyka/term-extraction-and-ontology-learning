INSTITUT NATIONAL DE RECHERCHE EN INFORMATIQUE ET EN AUTOMATIQUE  Logical time and temporal logics: Comparing UML MARTE/CCSL and PSL  NAdeg 7459 December 7, 2010  apport de recherche  ISRN INRIA/RR--7459--FR+ENG  ThA"me COM  ISSN 0249-6399  inria-00540738, version 1 - 7 Dec 2010  RASgis Gascon a FrASdASric Mallet a Julien DeAntoni  inria-00540738, version 1 - 7 Dec 2010  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL RASgis Gason , FrASdASri Mallet , Julien DeAntoni  ThA"me COM  SystA"mes ommuniants Projet AOSTE  inria-00540738, version 1 - 7 Dec 2010  Rapport de reherhe nAdeg 7459  Deember 7, 2010  22 pages  Abstrat:  The UML Prole for Modeling and Analysis of Real-Time and Embedded sys-  tems (MARTE) provides a means to speify embedded systems.
The Clok Constraint  Speiation Language (CCSL) allows the speiation of ausal, hronologial and timed properties of MARTE models.
Due to its purposedly broad sope of use, CCSL has an  expressiveness that an prevent formal veriation.
However, when addressing hardware  eletroni systems, formal veriation is an important step of the development.
The IEEE Property Speiation Language (PSL) provides a formal notation for expressing temporal logi properties that an be automatially veried on eletroni system models.
We want to identify the part of MARTE/CCSL amenable to support the lassial analysis methods from the Eletroni Design Automation (EDA) ommunity.
In this paper, we ontribute to this goal by omparing the expressiveness of CCSL and the Foundation Language of PSL.
We show that none of these languages is subsumed by the other one.
We identify the CCSL onstruts that annot be expressed in temporal logis and propose restritions of these operators so that they beome tratable in temporal logis. Conversely, we also identify the lass of PSL formulas that an be enoded in CCSL.
We dene translations between these fragments of CCSL and PSL using automata as an intermediate representation.
Key-words:  High-level design, Linear temporal logi, Language equivalene, Automaton  based approah  UnitAS de recherche INRIA Sophia Antipolis 2004, route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex (France) TASlASphone : +33 4 92 38 77 77 a TASlAScopie : +33 4 92 38 77 65  Temps logique et logiques temporelles: Comparaison de UML MARTE/CCSL et PSL RASsumAS :  Le prol UML MARTE (Modeling and Analysis of Real-Time and Embedded  systems) permet la spASiation de systA"mes embarquASs.
Le langage assoiAS CCSL (Clok Constraint Speiation Language) est ore la possibilitAS de spASier des propriAStASs ausales, hronologiques et temporelles sur les modA"les MARTE.
En raison de son large spetre d'appliations, CCSL a une grande expressivitAS qui empAShe l'appliation de ertaines tehniques de vASriation formelle.
Cependant, la vASriation formelle est une AStape importante du dASveloppement dans le domaine des hardware eletroni systems.
Pour e faire, le  standard IEEE PSL (Property Speiation Language) fourni des notations formelles pour l'expression de propriAStASs en logique temporelles qui peuvent AStre automatiquement vASriASe sur le modA"le du systA"me ASletronique.
Nous voulons identier le fragment de MARTE/CCSL suseptible de supporter les mASthodes d'analyses lassiques utilisASes dans la ommunautAS EDA (Eletroni Design Auto-  inria-00540738, version 1 - 7 Dec 2010  mation).
Dans e papier, nous ontribuons A  e but en omparant l'expressivitAS de CCSL et du fragment de PSL orrespondant A  la logique temporelle linASaire.
qu'auun de es langages n'est inlus dans l'autre.
Nous montrons  Nous identions les onstruteurs de  CCSL qui ne peuvent AStre exprimASs par les logiques temporelles propositionnelles et proposons en onsASquene des restritions de es opASrateurs de maniA"re A  les rendre exprimable dans PSL.
RASiproquement, nous identions la lasse de propriAStASs de PSL qui peuvent AStre odASes dans CCSL.
Nous dASnissons des tradution entre es deux fragment utilisant des automates omme reprASsentation intermASdiaire.
Mots-lASs :  Coneption haut niveau, Logique temporelle linASaire, Aquivalene de langages,  Approhe A  base d'automates.
Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL  3  1 Introdution The UML Prole for Modeling and Analysis of Real-Time and Embedded systems (MARTE [8a) provides a mean to speify several aspets of embedded systems, ranging from large software systems on top of an operating system to spei hardware designs.
The Clok Constraint Speiation Language (CCSL [1a) oers a general set of notations to speify ausal, hronologial and timed properties on these models and has been used in various subdomains [6, 5, 2a.
From this speiation, it is possible to simulate the behavior of a CCSL speiation at the model level.
CCSL has been formally dened; however, due to its broad sope of use CCSL has an expressiveness that an prevent formal veriation, sine the speied system an be, by intention, non-deterministi, innite, unbound.
Very wide speiations at the system level should be progressively rened into more preise desriptions down to a point where ode generation, shedulability, formal analysis beome possible.
MARTE/CCSL oers a support at all the renement steps.
In the domain of hardware eletroni systems, whih one of the subdomains targeted  inria-00540738, version 1 - 7 Dec 2010  by MARTE, formal veriation is an important step of the development.
To allow simulation and formal veriation of suh systems, the IEEE Property Speiation Language (PSL [10a) provides a formal notation for the speiation of eletroni system behavior, ompatible with multiple eletroni system design languages (VHDL, Verilog, SystemC, SystemVerilog).
Even though a MARTE/CCSL speiation overs a broad sope and several subdomains, the intent remains to oer exhaustive veriation apabilities when fousing on spei aspets within a subdomain.
When fousing on hardware eletroni systems, MARTE provides a support to apture strutural or behavioral, funtional or non-funtional aspets.
Its time model and CCSL , as part of MARTE, are natural andidates to express safety properties on MARTE models.
Two questions arise.
Is MARTE expressive enough to apture an abstrat view of hardware systems ?
Is CCSL expressive enough to express properties usually modeled in PSL ?
Some eorts has been made to answer the rst question [9, 13a.
We are addressing here the seond question.
The main ontribution of this paper is then the omparison of PSL and CCSL expressiveness.
The rst result is that none of these languages subsume the other one.
Consequently, we identied the CCSL onstruts that annot be expressed in temporal logis and proposed restritions to these operators so that they beome tratable in temporal logis. Conversely, we also identify a lass of PSL formulas that an be enoded in CCSL .
Then, We dene translations between these fragments of CCSL and PSL using automata as an intermediate representation.
These transformations make possible the ombined use of both formalisms to adequately address the right level, CCSL at the model level and PSL at the implementation level.
They also oer a way to provide an exhaustive analysis support for a lass of CCSL speiations.
The remaining of this paper is organized as follows.
In Set. 2 we introdue CCSL and PSL and determine whih kind of properties annot be expressed in eah language.
We  dene in Set. 3 the lass of Boolean automata whih is used in Set. 4 to dene translations between fragments of CCSL and PSL.
Set. 5 ontains onluding remarks and future work.
RR nAdeg 7459  R. Gason , F. Mallet , J. DeAntoni  4  2 Denitions of the languages We dene here the languages that we onsider in this paper and give rst omparisons related to their expressive power.
2.1 Clok Constraint Speiation Language CCSL is the ompanion language of MARTE UML prole for the design of embedded systems.
It ombines onstruts from the general net theory and from the synhronous languages.
CCSL oers a set of ausal and timed patterns lassially used in embedded systems.
More formally, the language CCSL is based on the notion of  loks  whih is a general name  to denote a totally ordered sequene of event ourenes, alled the Instants do not arry values.
CCSL denes a set of  lok relations :  instants  of the lok.  c1  is a sublok  inria-00540738, version 1 - 7 Dec 2010  r ::= c1 a c2 | c1 # c2 | c1 as c2 | c1 4 c2 .
where  c 1 , c2  represent loks of the system.
Informally,  c 1 a c2  means that  c2 , c1 # c2 that the instants of the two loks never our at the same time and c1 as c2 nth ourrene of c1 stritly preedes the nth ourrene of c2 for every n a Na .
The relation c1 4 c2 is the non strit version of the preedene relation.
of  that the  CCSL is a high level multilok language and the original semantis does not require totally ordered models.
However, at lower level or for simulation purposes, one needs to  represent the exeution as a totally ordered sequene. In this ontext, a possible semantis, introdued in [1a, identies loks with Boolean variables evolving along time .
In the  belongs to a set of propositions VAR and CCSL models VAR are nite or innite sequenes of elements in 2 .
The set of instants of the lok c  remaining, we will onsider that  c  c holds.
D be a CCSL model.
For suh a sequene, we denote in the following by |D| the length of D and we assume that |D| = D when D is an innite word.
We also use the notations D(i) th element of D and D i for the sux of D starting at the ith position.
To evaluate the for the i orresponds to the set of positions where the variable Let  satisfation of preedene relations, we need to know the number of ourrenes of the loks at eah position of  D.  We dene the funtion  DD  suh that for every  iaN  and  c a VAR  we  have  DD (c, i) = |{j a N  s.t.
ja$?i  and  c a D(j)}|.
The satisfation of CCSL relations is dened by:  A D |=ccsl c1 a c2  i for every  the oinidene relation  =  0 a$?
i a$?
|D|, if c1 a D(i) then c2 a D(i).
We also dene D |=ccsl c1 = c2 i D |=ccsl c1 a c2 and  suh that  D |=ccsl c2 a c1 .
A D |=ccsl c1 # c2  i for every  0 a$?
i a$?
|D|  we have  c1 6a D(i)  or  c2 6a D(i).
INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL A D |=ccsl c1 as c2 i for every 0 a$?
i a$?
|D| have DD (c1 , i) > DD (c2 , i).
A D |=ccsl c1 4 c2  i for every  0 a$?
i a$?
|D|  suh that  we have  DD (c1 , i) > 0  and  DD (c2 , i) > 0  we  DD (c1 , i) aL DD (c2 , i).
CCSL an also express more ompliated relations between loks by using  tions.
5  lok deni-  CCSL lok denitions allows one to dene a lok by ombination of other loks  given as arguments.
A lok denition is of the form  expression  c , e  where  c a VAR  and  e  is a  lok  dened by the following grammar:  e := c | e + e | e a e | e  e|e  e|e  e | e H bw | e $e n | e aSS e | e a" e  c a VAR, n a Na and bw : Na a B is a binary word.
The expressions e1 + e2 and e1 a e2 represent respetively the union and intersetion of e1 and e2 .
The strit and non strit sample expressions are denoted respetively by e1 e2 and e1 e2 .
The delay th ourrene of e .
operation e1 $e2 n is a variation of sampling that samples e1 on the n 2 The expression e1 e2 is the preemption (e1 up to e2 ), e H bw represents the ltering operation.
Finally, e1 aSS e2 (resp.
e1 a" e2 ) represents the fastest (resp.
slowest) of the loks that are slower (resp.
faster) than both e1 and e2 .
This orresponds to greatest lower bound  inria-00540738, version 1 - 7 Dec 2010  where  and lowest upper bound.
Given a lok expression  i  holds at position  of  D.  e  and a CCSL model  D  we note  D, i |=ccsl e i the expression e DD to expressions in  To dene this relation, we extend the funtion  a natural way:  DD (e, i) = |{j a N  s.t.
ja$?i  and  D, j |=ccsl e}|.
The satisfation relation for expressions is dened by:  A D, i |=ccsl c  i  c a D(i).
A D, i |=ccsl e1 + e2  i  A D, i |=ccsl e1 a e2  i  A D, i |=ccsl e1  i  e2  D, i |=ccsl e1 D, i |=ccsl e1  or  D, i |=ccsl e2 .
and  D, i |=ccsl e2 .
 D, i |=ccsl e2 ,   0 a$?
j < i D, k 6|=ccsl e2 .
there is  A D, i |=ccsl e1  e2  suh that  D, j |=ccsl e1  and for every  j < k < i  we have  suh that  D, j |=ccsl e1  and for every  j < k < i  we have  i   D, i |=ccsl e2 ,   RR nAdeg 7459  0 a$?
j a$?
i D, k 6|=ccsl e2 .
there is  R. Gason , F. Mallet , J. DeAntoni  6  A D, i |=ccsl e1 $e2 n   D, j |=ccsl e1   there is a position  k a {1, .
.
.
, n} e2  suh that  and  there are exatly  A D, i |=ccsl e1  0a$?ja$?i  n  i 1 , .
.
.
, i n (i n = i ) D, ik |=ccsl e2 .
distint positions  j < ik a$?
i  we have  and  suh that for every  i   D, i |=ccsl e1 ,   for every  j<i  A D, i |=ccsl e H bw  D, j 6|=ccsl e2 .
we have  i  inria-00540738, version 1 - 7 Dec 2010   D, i |=ccsl e  bw (DD (e, i)) = 1.
A D, i |=ccsl e1 a" e2  i either   DD (e1 , i) > DD (e2 , i) and D, i |=ccsl e1 ,   or  DD (c1 , i) < DD (c2 , i)  and  D, i |=ccsl e2 ,    or  DD (e1 , i) = DD (e2 , i)  and  D, i |=ccsl e1  A D, i |=ccsl e1 aSS e2  and  D, i |=ccsl e2 .
i either   DD (e1 , i) > DD (e2 , i) and D, i |=ccsl e2 ,   or  DD (e1 , i) < DD (e2 , i)  and    or  DD (c1 , i) = DD (c2 , i)  and we have  D, i |=ccsl e1 , D, i |=ccsl e1  or  D, i |=ccsl e2 .
A CCSL speiation is a list of denitions and relations seen as a onjuntion of onstraints.
We an represent it by a triple  A C a VAR A Def A Rel A model  A  hC, Def , Reli  suh that  is a set of loks,  is a set of denitions, is a set of relations.
D  over  2C  satises the speiation i  for every denition  c , e  in  Def  we have  c a D(i)  i  D, i |=ccsl e,  INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL A  every relation in  Rel  is satised by  7  D.  From the basis CCSL language, one an dene other expressions and relations.
For  instane, the following expressions will be useful in the following:  A c1 a c2  is the dierene of loks  enoded with the denition  A c $c n  c1  and  c1 , c + c2  c2 .
The denition  and the relation  c , c1 a c2  an be  c # c2 .
is a partiular ase of delay expression that we denote  c $ n.  This expression  represents the usual synhronous delay operation.
The resulting expression starts at the  A  nth  ourrene of  Alternane relation  inria-00540738, version 1 - 7 Dec 2010  ca,1 , c1 $ 1.  c  and then oinides with  c1 az= c2  Similarly,  c.  is dened by the relations  c1 =az c2  is dened by  c1 4 c2  c1 4 c2 and  and  c2 as ca,1  where  c2 as ca,1 .
2.2 Property Speiation Language The IEEE standard PSL [10a is a textual language to build temporal logi expressions.
PSL assertions are used for instane in hadware design and they an be validated by modelheking or equivalene heking tehniques.
Compared with the lassial linear temporal logi LTL, PSL provides sugaring onstruts to build expressions in an easier and more onise way.
However PSL is as expressive as LTL.
As it would be tedious to onsider the dierent sugaring operators of PSL in formal reasoning, we use in this paper the minimal ore language dened in [3a.
Let  VAR  be a set of propositions (Boolean variables) that aims at representing signals  of the system.
PSL atomi formulas are alled  Sequential Extended Regular Expressions  (SERE).
SEREs are basially regular expressions built over the Boolean algebra:  b ::= x | x | b aSS b | b a" b where  x a VAR  is a Boolean variable.
We also onsider the standard operators  1  a  and  a  that an be dened from the grammar above .
The set of SEREs is dened by:  r ::= b | r AV r | r aS r | ra where  b  is a Boolean formula.
onatenation,  r1 aS r2  The operators have their usual meaning: r1 AV r2 is the ra is the Kleene star operator.
From these regular  the union and  expressions, PSL linear properties  2 are dened by:  D ::= r | D aSS D | AZD | XD | DUD | r O D. 1 x a y is equivalent to x a" y 2 PSL standard also denes a  RR nAdeg 7459  and x a y to (x a y) aSS (y a x).
branhing time part that we do not onsider here.
R. Gason , F. Mallet , J. DeAntoni  8  where  r  is a SERE.
The operators  X  (next) and  U (until) are the lassial temporal logi FD aA a$?UD (eventually) and GD aA AZFAZD  operators.
We also use the lassial abbreviations  r O D is a sux onjuntion operator meaning that there must r and that D must be satised at the position orresponding  (always).
The formula  exist a nite prex satisfying to the end of this prex.
The semantis of PSL is dened in suh a way that properties an be interpreted over innite words as well as nite or trunated words.
This is important for some appliation domains of PSL suh that simulation or bounded model-heking.
Similarly to CCSL, the VAR that represents the set models of PSL are nite or innite sequenes over elements of 2 of variables that holds at eah position.
VAR and p a VAR, we note For every X a 2  X |=b p i p a X |=b is obvious.
The remaining of the Boolean satisfation relation (possibly empty) prex of the model.
So  D  and  X |=b p  i  p 6a X .
SEREs refer to a nite  is supposed to be nite in SERE satisfation  relation (whih is not the ase in PSL satisfation relation).
The SERE satisfation is dened  inria-00540738, version 1 - 7 Dec 2010  by indution as following:  A D |=re b  i  |D| = 1  A D |=re r1 AV r2  and  D(0) |=b b,  i there exist  A D |=re r1 aS r2  i  D |=re r1  A D |=re ra i either D = CT a and D2 |=re r .
D1 , D2  and  suh that  D = D1 D2  D1 |=re r1  and  and  D2 |=re r2 .
D |=re r2 .
or there exist  D1 , D2  suh that  D1 6= CT, D = D1 D2 , D1 |=re r  Finally, the satisfation of PSL properties is dened as following.
A D |=psl AZD  i  D 6|=psl D,  A D |=psl D1 aSS D2 A D |=psl XD  i  i  D |=psl D1  |D| > 1  and  and  D |=psl D2 ,  D 1 |=psl D,  A D |=psl D1 UD2 i j have D |=psl D1 ,  there is  A D |=psl r O D i and D2 |=psl D,  there is a nite prex  A D |=psl r r O a$?.
0 a$?
i < |D|  i for every nite prex  D1  suh that  of  D1 D  of  D  D i |=psl D2 and  D2  and for every  suh that  there is a nite word  D2  0a$?j<i  we  D = D1 D2 , D1 |=re r suh that  D1 D2 |=re  The addition of SEREs in PSL does not add expressiveness to the lassial temporal logi LTL.
Indeed, SEREs an be translated into LTL formulas.
However, this would imply an exponential blowup of the size of the formulas.
INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL  9  2.3 Comparing PSL and CCSL Sine CCSL and PSL share ommon models, we an ompare their expressive power.
Let be a CCSL speiation over a set of variables of variables  VD a VAR.
D is  and every model of  S S.  We will say that also a model of  VS a VAR  and  D  is enoded by (or simulated by)  The onverse simulation relation is a bit dierent.
S  a PSL formula over a set  D  i  VS a VD  CCSL models have the properties  that one an add an unbounded amount of empty states between two relevant states and left the satisfation unhanged.
This an easily be proved by indution on the struture of a CCSL speiation.
Lemma 1. i a$?
|D|  S  Let  the model  be a CCSL speiation.
For every model  Da,  D  satisfying  S  and every  0a$?
dened by  inria-00540738, version 1 - 7 Dec 2010  D a, (j) = D(j) for every j < i D a, (i) = a D a, (j) = D(j a 1) for every i < j a$?
|D| + 1 also satises  S.  This property is a onsequene of the multilok aspet of CCSL.
Even with the semantis we have introdued, it is not possible to ompletely link the exeution of a CCSL speiation to a global lok. However, the states where no loks hold are irrelevant in CCSL point of view as they do not make the system evolve.
So it is not really a problem to disard them.
Atually, this is what is done in the CCSL simulator TimeSquare.
We will say that simulated by of  S  i  VD a VS  and every model of  S with no irrelevant states  D  is  is also a model  D. By examining the denitions PSL and CCSL, we an already make the following obser-  vations.
Some CCSL relations or expressions impliitly introdue unbounded ounters.
For  c1 and c2 (or at least the c1 4 c2 .
The orresponding  instane, one have to store the number of ourrenes of the loks dierene between them) to enode the preedene relation  language is made of all the words suh that every nite prex ontains more ourrenes of  c1  than  c2 .
Suh a language is neither regular nor  D -regular  and annot be enoded in  PSL whih is as expressive as LTL and regular expressions.
The same remark holds for the expressions  c1 a" c2  and  c1 aSS c2 .
On the other hand, the dierent CCSL relations and expressions only states safety onstraints.
As a speiation is a onjuntion of suh onstraints the result is always a safety property.
CCSL annot express liveness like the reahabily property  Fp.
A similar problem  ours for the next operator in ase of nite exeutions.
There is no way to express that the model must have a next position whih an be stated by  Xa$?
in PSL.
To summarize, the  preliminary omparison of expressiveness of CCSL and PSL gives the following results.
Lemma 2.
(I) There are PSL formulas that annot be enoded in CCSL.
(II) There are CCSL speiations that annot be enoded in PSL.
RR nAdeg 7459  R. Gason , F. Mallet , J. DeAntoni  10  It is now lear that PSL and CCSL are not omparable in their whole denition.
However, we will see in the remaining of this paper that we an dene large fragments of these languages that an be enoded in eah other.
To that aim we will rst introdue a intermediate lass of automata well tted to dene translations between these fragments.
3 Boolean automata Translating diretly PSL properties into CCSL is not obvious.
For example, let us onsider the following PSL formula:  G(p0 a AZ(p1 Up2 )).
One an try to translate this property by onsidering its general meaning whih is there is always  p1  in an interval starting with  p0  and ending with  p2 .
It is more diult to dene a  modular approah by omposing atomi translations from PSL operator to CCSL.
We use an automaton based approah. We introdue in this setion a lass of automata manipulating  inria-00540738, version 1 - 7 Dec 2010  Boolean variables that we will use to establish relations between PSL and CCSL fragments.
3.1 Denition We onsider automata that handle propositional variables in  VAR.
The transitions of these  automata are labeled by Boolean formulas interpreted like guard.
automaton A Q  is a struture  A = hQ, q0 , F, A, V, I'i  is a set of states and  A F aQ  and  A V a VAR  AaQ  q0 a Q  Formally, a  Boolean  suh that:  an initial state,  are respetively the set of nal and aepting states,  is a set of propositions,  A I' : Q A Bool (V ) A Q formulas over VAR.
is a transition relation where  Bool (V )  is the set of Boolean  We use the denitions of Set. 2.2 for Boolean formulas.
A Boolean automaton is deterministi i for every state in Q there do not exist two outgoing transitions labeled with a, suh that D aSS D is satisable.
D  and  Da,  A onguration of A is a pair hq, Xi omposed of a state in Q and a subset of V .
We D D note hq, Xi a a hq a, , X a, i i there is a transition q a a q a, suh that X |=b D. A run of A is a V sequene D : N a (Q A 2 ) suh that D(0) is of the form hq0 , X0 i (one starts in the initial Di a D(i + 1).
A nite run is aepting state) and for every i a N, there exists Di suh that D(i) a i it ends in a nal state.
An innite run is aepting i it visits innitely often an aepting state (BAzhi ondition).
The language aepted by 2V orresponding to aepting runs.
A  in made of the words on the alphabet  Boolean automata an be omposed as following.
Consider two automata  A2 = hQ2 , (q0 )2 , V2 , I'2 i. hQ, q0 , V, I'i suh that: and  The produt automaton  A = A1 A A2  A1 = hQ1 , (q0 )1 , F1 , V1 , I'1 i  is the struture  INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL  11  A Q = Q1 A Q2 A {0, 1} where the last omponent of eah state (in {0, 1}) is only needed for the BAzhi aeptane ondition,  A q0 = h(q0 )1 , (q0 )2 , 0i, A F = F1 A F2 A {0, 1}  and  A = Q1 A A2 A {1},  A V = V1 aS V2 ,  inria-00540738, version 1 - 7 Dec 2010  A  For every  hq1 , q2 , ii  and  hq1a, , q2a, , ia, i  D1  Q  in  D2    there exist    if  i=0  then  ia, = 1  i  q1 a A1 ,    if  i=1  then  ia, = 0  i  q2 a A2 .
a q1a, q1 a  and  a q2a, q2 a  we have  s.t.
D  D  hq1 , q2 , ii a a hq1a, , q2a, , ia, i  is equivalent to  i  D1 aSS D2 ,  Note that the last omponent of eah state is not needed when every state is aepting (A1  = Q1  and  A2 = Q2 ),  whih will be the ase in the following.
3.2 CCSL and Boolean automata Sine CCSL express only safety, the aeptane ondition of automata annot be enoded.
However, if every run is aepting we an enode a deterministi Boolean automaton into a CCSL speiation.
Lemma 3.
Every deterministi Boolean automaton suh that every exeution is aepting  an be simulated by a CCSL speiation.
Proof.
Consider a Boolean automaton  A = hQ, I, V, I'i.
The sets of aepting and nal  states are not needed sine every exeution is aepting.
So, we forget them here.
We dene the set of loks denitions.
C = V a Q.
To enode  A,  we need the following CCSL  We dene a global lok and a lok orresponding to the set of states  Q  as  following:  (1) Glob , c  X  cQ ,  and  caC where  P  caX  c  lok  Iq  X.  X |=b D.  X X  qa, a aq  RR nAdeg 7459  X.
Similarly, we will note  For ease of presentation, we note For every state  orresponding to the inoming transitions of  (2) Iq ,  q  qaQ  is the CCSL union of all the loks in  CCSL intersetion of all the loks in D is a transition q a a q a, in A suh that  X  qa, a (  Y  paX  p) a (  X  p6aX  qa a  q a Q \ {q0 },  q:  p) .
X  Q  caX c the a, q i there  we dene the  R. Gason , F. Mallet , J. DeAntoni  12  Now we build the set of CCSL relations.
First we express that at every position in the run, exatly one state of the automaton holds.
This orrespond to the relations  (3) cQ = Glob  q # qa,  and  for every  q, q a, a Q (q 6= q a, ).
We also impose that the global lok always oinides with a valid transition in order to avoid unexpeted behaviours:  (4) Glob =  X  IQ .
qaQ The transition relation is suh that every state alternates with its inoming transitions.
This means that for every  qaQ q0 az= Iq 0  (5) The relation is symmetri for  q0  Iq =az q.  and  sine the exeution starts in this state.
The alternane is  inria-00540738, version 1 - 7 Dec 2010  not strit on the side of the inoming transition sine it is allowed to return to the same step (loops).
D i a N,  We have to show that a model  D of A c a Xi .
run  suh that for every  satises the CCSL speiation obtained i there is a for every  First we observe that for any model  q a D(i + 1)  for every  i a N.  D  and omplete (f  (2)).
Iq  we have  c a D(i)  i  D(i) = hqi , Xi i  satisfying the CCSL speiation, if  The alternane relations allows a lok  has oured between the last ourene of denitions of the dierent  caV  q  q  and the urrent position (f  and  Iq a D(i) then Iq  to our only if  (5)).
However, the  A whih is deterministi Iq belongs to D(i) for every i a N. So, to D(i + 1) is q .
By (3), exatly one  are dened w.r.t.
transition relation of  This implies that exatly one  Iq a D(i) the only element of Q that an belonb element of Q must hold at eah position.
This onlude  if  the demonstration.
We proeed by indution on the position of the sequenes.
Suppose that we are given  D).
For every i a N we note D(i) = hqi , vi i.
We show for every i a N position j < i and variable c a VAR we an build D (resp.
D ) suh that (resp.
A c a D(j) A  and  i  D  that for every  c a Xj ,  qi + 1 a D(i + 1)  i  qi + 1  is the state of  D(i + 1).
Q that an belong to D(0) is q0 .
Indeed, q a Q from ouring beause of alternane A is always q0 .
At the begining of any model, the only lok in no lok  Iq  has oured whih prevent the other  relations (see Now let  D  until position  (5)).
Similarly, the initial sate of  be a model of the CCSL speiation.
We suppose that the property holds  i  and that we have  qi a D(i)  and the state of  D(i) a,  is  qi .
Sine the transition D suh that q a a q a, and  relation is omplete and deterministi, there is a unique q a Q a, a, As a onsequene, Iq a D(i) whih implies that q a D(i + 1) as we shown before.
D a q a, and setting c a Xi We an do the orresponding move in A by hoosing the transition q a  D(i) |= D.  INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL  13  c a D(i) aS V .
By indution, one an build a run D of A suh that for every i a N, for c a VAR we have c a D(i) i c a D(i).
Conversely, let D be a run of A.
We suppose that the property holds until position i, D(i) = hqi , vi i and qi a D(i).
The demonstration is symmetrial.
There is a unique transition i  every  D  a qi+1 suh that vi |= D beause the transition relation is deterministi and omplete.
qi a Let set D(i) suh that for every c a VAR we c a D(i) i D(i) = hqi , vi i and vi (c) = a$?.
By onstrution, we must have Iq i+1 a D(i) and so qi+1 a D(i + 1).
Thus, one an build by indution D verifying the property.
The onverse translation is not possible.
CCSL speiations annot be enoded by  Boolean automata for the same reasons that prevent enoding CCSL speiations into PSL properties.
Some relations or operators like preedene annot be enoded by using nite state systems (see Set. 2.3).
3.3 PSL and Boolean automata inria-00540738, version 1 - 7 Dec 2010  It is well known that one an build a nite automaton or a BAzhi automaton that aepts respetively the nite and innite models of a given PSL formula.
Given a PSL formula  D,  the onstrution dened in [3a an easily be adapted to build a Boolean automata aepting the set of models of  D.  This onstrution itself is a slight extension of the automaton for LTL  originally dened by [12a.
We do not develop this onstrution now sine the onstrution in the proof of upoming Lemma 6 will follow the same main steps.
Lemma 4.
From any PSL properties  language aepted by  A  D  one an build a Boolean automata  is exatly the set of models of  AD  suh that the  D.  The onverse translation is easy sine the denition of LTL is inluded in PSL.
By using the onstrution in [11a one an enode the behaviour of a Boolean automaton into a LTL formula.
Lemma 5.
From any Boolean automaton  set of models of  DA  A,  one an build a PSL formula  is exatly the set of runs of  DA  suh that the  A.
4 Translations between CCSL and PSL fragments We dene in this setion large fragments of CCSL and PSL that an be simulated in eah other.
We dene the translations between these fragments using intermediate Booelan automata enoding.
4.1 From PSL to CCSL Lemma 3 states that Boolean automata an be enoded in CCSL when every run is aepting.
Thus we restrit ourselves to the lass of PSL formulas that an be translated into this sublass of Boolean automata.
We onsider the safety fragment of PSL dened similarly to [4a by restriting the use of negations.
A PSL formula belongs to  RR nAdeg 7459  safety PSL  formulas  R. Gason , F. Mallet , J. DeAntoni  14  i (S1) subformulas of the form  D1 UD2  and  r OD  never our under an even number of  negations, and (S2) SEREs never our under an odd number of negations.
Note that one an dene safety fragments of PSL by restriting temporal modalities but this one is more general.
For the nite ase, we also have to restrit the denition of the next operator to its weak variant (s.t.
the formula is satised also if the model has no next position).
Lemma 6.
For every property in safety PSL, one an build an automaton suh that every  exeution is aepting.
Proof.
In [3a is desribed a way to build automata from PSL properties.
We reall below  the main steps of this onstrution and show that the restritions we have made allow us to obtain an automaton suh that every run respeting the transition relation is aepting.
inria-00540738, version 1 - 7 Dec 2010  First, one an easily build a nite automaton aepting the set of nite words that orresponds to a given SERE.
Indeed, SERE are essentially regular expressions.
So we f VAR assume that for every SERE r there is a nite automaton Ar = h2 , Qr , Ir , Fr , I'rf i suh that D a L(Ar ) i D |=re r. From this automaton one an build a BAzhi automaton Ar = h2VAR , Qr , Ir , Qr , Qr , I'r i suh that D a L(Ar ) i D |=psl r. The transition relation I'r f is obtained by adding the following rules to I'r :  hqf , X, qf i a I'r  for every  qf a Fr  and  X a 2VAR .
This automaton has only aepting and nal states.
Indeed, aording to PSL satisfation relation, every prex that an be extended to an expression satisfying the SERE must be aepted.
Then we proeed by indution on the struture of the formula.
The result of the onstrution is an alternating automata.
This allows running automata for the SERE atomi formulas in parallel of the temporal logi part.
Then, it is known that an alternating BAzhi automaton an be translated into a standard BAzhi automaton [7a.
The base ase is given above.
So we suppose that for every subformula D of D we an build AD = h2VAR , QD , ID , AD , FD , I'r i suh that suh that every run is aepting  an automaton  D a L(AD ) i D |=psl D .
There are atually two onstrutions beause the ase where D is of the form AZ(r O D) must be treated separately.
In that ase, AD is built f VAR , Qr , Ir , Fr , I'rf i and AD = h2VAR , QD , ID , QD , QD , I'D i from the nite automaton Ar = h2 and  the formula as follows.
A  the set of states is the union of  A  the set of initial states is  A  the set of nal states is the union of  A  the set of aepting states is the union of  Qr  and  QD  and an additional state  qt ,  Ir , qt , Q r  and  FAZD ,  qt , Q r  so  FD = QD  and  AAZD ,  beause  so  FAZD = QAZD ,  AD = QD  beause  AAZD = QAZD ,  INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL A  For every  qf a Fr  and  X a 2VAR  15  we have  ^  I'(qf , X) =  q a, aSS I'AZD (q0 , X)  qa, aI'r (q,X) where  A  q0  For every    if  is the initial state of  q a Qr \ Fr  I'r (q, X)  and  AAZD .
X a 2VAR  is dened then  I'(q, X) =  ^  qa,  qa, aI'r (q,X) ,  inria-00540738, version 1 - 7 Dec 2010    I'(q, X) = qt ,  otherwise  A  for every  A  nally  q a QAZD  the transition relation oinides with  I'(qt , X) = qt  for every  I'AZD ,  X a 2VAR .
Note that we only have to onsider negated ourrenes of  rOD  by denition of the safety  fragment.
For the other ases,  A  is dened as follows.
The set of states is omposed of  A  the set of states of the automata  A  the set of states of the automata  A  the set of subformulas of  The initial state is  A I'(p, X) = a$?
D.  i  D  Ar  for every SERE  AAZ(rOD)  for every subformula  I'  q0r  is the initial state of  Ar .
A I'(D1 aSS D2 , X) = I'(D1 , X) aSS I'(D2 , X).
A I'(D1 a" D2 , X) = I'(D1 , X) a" I'(D2 , X).
A I'(AZD, X) = I'(D, X).
A I'(XD, X) = D. A I'(D1 UD2 , X) = I'(D2 , X) a" (I'(D1 , X) aSS D1 UD2 ).
Where the overlined expressions are interpreted as follows:  RR nAdeg 7459  D,  rOD  AZAZD  is dened reursively:  p a X. where  ourring in  and their negation (we identify  The transition relation  A I'(r, X) = I'(q0r , X)  r  with  ourring in  D ).
D,  R. Gason , F. Mallet , J. DeAntoni  16  A a aSS b = a a" b, A a a" b = a aSS b, A I'(q0AZr , X) = I'(q0r , X)  where  AZ(rOD)  A I'(q0rOD , X) = I'(q0 A D = AZD ,  q0r  , X)  is the initial state of the automaton  where  AZ(rOD)  q0  is the initial state of  for every subformula (we still identify  AZAZD  with  Note that beause we onsider the safety fragment the ases  Ar ,  AAZ(rOD) ,  D ).
I'(q0r , X) and I'(q0rOD , X) never  our (see restritions of negation).
In the general onstrution, the aepting states would be those of the form the states of the automata  AAZ(rOD)  and  Ar .
AZD1 UD2  or  However, for formulas in the safety fragment  the onstrution above is partiular.
For every run of the automaton obtained it annot be the ase that an innite branh does not enounter one of those nal states.
inria-00540738, version 1 - 7 Dec 2010  We proeed by indution.
If we are in a state of the form in the ases  r  or  are aepting.
property.
AZ(r O D)  p, the branh is nite.
D and its I'(D, X) goes  Now we suppose that every subformula of  In almost all ases, the dierent branhes of  strit subformulas of  D.  Similarly,  we are done sine all the states of the orresponding automata negation satisfy the to states labeled by  In that ases we an use the indution hypothesis to onlude.
The  only remaining ase is when  D  is of the form  D1 UD2  or  AZD1 UD2 .
The rst ase annot arise  sine we are in the safety fragment.
In the seond ase the transition rule is the follows:  I'(AZD1 UD2 ) = I'(D1 UD2 ) = I'(AZD2 , X) aSS (I'(AZD1 , X) a" AZ(D1 UD2 )).
We an use the indution hypothesis on the branh orresponding to  D2 .
For the other  branh, we an prove by indution that  A  either we reah a position when  AZD2  and  AZD1  hold and then we an use the indution  hypothesis,  A  or  AZ(D1 UD2 )  So we an set  is visited innitely often.
Sine this state is aepting we are also done.
AD = FD = QD .
By onstrution, every state of the alternating BAzhi automaton obtained is nal and aepting.
If we use the powerset onstrution of [7a to build an equivalent non-alternating automaton, the sets of nal and aepting states are also equal to the whole set of states.
So every run of the resulting automaton is aepting.
The proof is given in Appendix  ??
is a variant of the onstrution in [3a.
We just have  to ensure that every exeution is aepting.
By Lemmas 6 and 3 we an enode every safety PSL formula into CCSL speiations.
Lemma 7.
Every safety PSL formula an be enoded by a CCSL speiation.
INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL  17  p0 p0 aSS p1 aSS p2  p1 aSS p2  q0  q1 p1  p0 aSS p1 Figure 1: Boolean automaton for  G(p0 a AZ(p1 Up2 ))  For instane, Figure 1 represents the automaton orresponding to the formula  AZ(p1 Up2 )) after simpliations.
This automaton hV, Def , Reli suh that V = {p0 , p1 , p2 } and  inria-00540738, version 1 - 7 Dec 2010  Def =  Rel =  dLa dL' dL' dL' dL' dL,  Q , q0 + q1  Glob , Q + p0 + p1 + p2 ,  (q0 a p0 ) + (q0 a p0 a p1 ) + (q1 a p1 ) , ,  Iq0 , dL' dL' dL' dL' dLl Iq , ((q a p ) a (p + p )) + (q a (p + p )) 0 1 0 1 2 1 0 1 (  Glob = Q  ,  q0 # q1  q0 =az Iq0  ,  G(p0 a  orresponds to the CCSL speiation  ,  Glob = Iq0 + Iq1 ,  Iq1 az= q1  dLz dL' dL' dL' dL' dL"  ,  dL' dL' dL' dL' dLz  )  .
4.2 From CCSL to PSL To obtain a fragment of CCSL that an be enoded in PSL, we restrit the preedene relations and the operators  c 1 a" c2  and  c1 aSS c2 .
We dene a preedene relation suh that  asn and 4n where DD (c2 , i) < DD (c1 , i) a$?
the advane of the fastest lok is bounded.
We denote these relations  n a N.  A model  D  satises  c 1 as n c2  i for every  iaN  we have  4n is dened similarly with non strit inequalities.
We dene c1 aSSn c2 and c1 a"n c2 that restrit the dierene of the loks c1 and c2 to be bounded by n. Suh expressions are partiular sine they also imposes impliit onstraints  D(c2 , i) + m.  The relation  similar variants  on the parameters.
However, this is the most onvenient way of dening a syntati fragment of CCSL that an be translated into CCSL.
We all  bounded CCSL  the language obtained by replaing in CCSL the preedene  relations, greatest lower bound and lowest upper bound operators by their bounded variants.
This language is a fragment of CCSL.
Indeed, the operators an be dened in full CCSL:  A c1 as n c2  is equivalent to  preedene ase is similar.
RR nAdeg 7459  c1 as c2  and  c2 4 ca,1  where  ca,1 , c1 $ n.  Non strit  R. Gason , F. Mallet , J. DeAntoni  18  A c , c1 aSSn c2  c , c 1 a" c2  is equivalent to the onjuntion of  with the relations  c1 4 ca,2 and c2 4 ca,1 where ca,1 , c1 $ n and ca,2 , c2 $ n. This equivalene make lear the relations impliitly imposed on the parameters of the expression.
The operator  c1 a"n c2  an be dened similarly.
These restritions allow us to establish the following results.
Lemma 8.
(I) Every bounded CCSL speiation an be enoded by a Boolean automata.
(II) Every bounded CCSL speiations an be enoded by a PSL formula.
Proof.
(I) We proeed by indution on the struture of CCSL speiations.
As every state in the resulting automata are nal and aepting, we do not mention them.
First, let us onsider CCSL relations.
For every Boolean formula  inria-00540738, version 1 - 7 Dec 2010  Boolean automaton with a self loop labeled by  A  The subloking relation  A  Similarly, the exlusion relation  A  The bounded preedene relation  n  c 1 a c2  D  we denote by  an be enoded by  c1 # c2  that store the advane of  c1 on c2 .
c2 is true  an be enoded by an automaton with  So one needs to move to the next state when  c1 aSS c2  0  c1 aSS c2  1  0  c2 aSS c1 c1 aSS c2  c 1 as 3 c2  c1 4n c2 is similar an additional loop labeled c1 aSS c2 1 bak to state 0.  and a transition from state  A denition of the form  Ae  3  c1 aSS c2  Figure 2: Boolean automaton for  on state  c1 aSS c2  2  c1 aSS c2  The onstrution for the relation  is  c1 aSS c2  c2 aSS c1 c1 aSS c2  c1  n = 3. c1 aSS c2  If  B(c1 a"c2 ) .
and to stay in the same state when both (or none)  c1 aSS c2  A  B(c1 a"c2 ) .
an be enoded by  c 1 as n c2  are true.
Fig.
2 is the automaton for  where  the single state  states.
These states simulate the inrementation and derementation of a ounter  true, to move bak when  A  BD  D.  c , e  an be enoded by the produt automaton  Ae A Bcae  is dened below.
e is of the form e1 + e2 B((e1 a"e2 )ae) .
then  Ae  an be obtained by making the produt of  Ae1 , Ae2  and  A  The automaton for  e1 a e2  is built similarly by replaing the third automaton by  B((e1 aSSe2 )ae) .
INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL A  19  e2 is a bit more omplex.
Consider two opies A and Aa, of the a, a, produt automaton Ae1 A Ae2 .
We denote by q0 , q1 .
.
.
the states of A and q0 , q1 .
.
.
a, a, the states of A suh that qi and qi represent the same state in the dierent opies.
The enoding of  e1  To build the automaton Ae we use A to simulate the part where e1 has not ourred a, yet and A the part where e1 has ourred and we wait for the next ourrene of e2 .
a, So, we have to move from A to A when e1 is true.
Then we move bak to A and set  e  to true when  transformations on  (a)  (aa)  e2 is true.
A and Aa, .
D a qj in A we replae the label by For every transition qi a DaSSe1 aSSe a, transition qi a aaaa qj from A to Aa, .
D  a qja, qia, a  For every transition  a, DaSSe2 aSSe transition qi a aaaa  inria-00540738, version 1 - 7 Dec 2010  This automaton is obtained by making the following  qj  from  in  Aa,  we replae the label by  a,  to  A.
A  D aSS e1 aSS e  and add the  D aSS e2 aSS e  and add the  Obviously if the Boolean formula of a label redues to false then the orresponding transition is removed (or not added).
A  The enoding of  e1  e2  e2 .
The dierene is that when  are true then  e is also true and we stay in e1 is true and e2 is false.
So  is very lose to the ase  we are in the rst opy and both  e1  and  e2  e1  the same opy.
We only move to the seond opy when the step  (a)  has to be replaed by  D a qj in A we replae the label by For every transition qi a DaSSe1 aSSe2 aSSe a, DaSSe1 aSSe2 aSSe transitions qi aaaaaa a qj and qi aaaaaaa qj .
D aSS e1 aSS e  and add the  two  A  The enoding of  e1 $e2 n  holds we have to wait for opies of  Ae1 A Ae2 .
e1 n+1  is a generalization of the previous onstrution.
When  n  positions where  e2  holds.
This an be done with  Another point of view is that a ounter is enoded in the states of  the resulting automaton.
In the same way than the onstrution for the ase  e1  e2  we add transitions between the dierent opy as following:    from the rst opy to the seond when    from the  ith    from the  n+1th to the rst when e2 ours and this orresponds to the transitions  where  A  e  to the  i + 1th  when  e2  e1  ours,  ours for  2 a$?
i a$?
n + 1,  must our.
expression an also be enoded  e1 H bw .
Suppose that bw = u AV v D .
The similarly with |u| + |v| opies of Ae1 .
Eah opy is  bw  in a natural way.
The transition from a opy to the  Now we onsider the ltering operation assoiated with positions in  RR nAdeg 7459  R. Gason , F. Mallet , J. DeAntoni  20  next one is done when  e1  holds and after the last opy we jump to the  one (periodi part).
The variable position in  A  bw  is equal to  e  ours i  e1     e is of the form e1 e2 an easily A = Ae1 A Ae2 A B((e1 aSSe2 )ae) as following.
We add a sink state  qs  with a loop  We replae every transition DaSSe2 a qs .
transition q aa  D  qa a qa,  The way of enoding  e1 aSSn e2  be obtained from the produt  e  qs a a qs .
in  A (q, q a, 6= qs )  This operation prevents future ourrenes of  A  ours in a opy whose orresponding  1.
The automaton when automaton  e  as soon a  inria-00540738, version 1 - 7 Dec 2010  2n + 1  DaSSe2  by  q aaa q a,  e2  has oured.
states.
The expression  e  c1  n = 2.  c1 aSS c2 aSS e  c2  c1 aSS c2 aSS e c1 aSS c2 aSS e  a2  c1 aSS c2 aSS e  The ase  e  and  e  e1 a"n e2  c2 .
So  c2 aSS c1 aSS e c1 aSS c2 aSS e  is quite similar.
For  c1 aSS c2 aSS e  1  n=2  2 c2 aSS c1 aSS e  c1 aSS c2 aSS e  Figure 3: Boolean automaton for  A  is greater than  c1 aSS c2 aSS e  0 c2 aSS c1 aSS e  c1 aSS c2 aSS e  c1  c1 aSS c2 aSS e c1 aSS c2 aSS e  a1 c2 aSS c1 aSS e  To do this we  is true.
The left part is symmetrial.
c1 aSS c2 aSS e c1 aSS c2 aSS e  c2 .
The right part (positive labels)  orresponds to positions where the number of ourrenes of is true in this part when  and  holds when the variable that has the less  ourrenes holds.
Fig 3 is the automaton for  c  and we add the  is lose to the bounded preedene relation sine we  need to store the dierene between the ourrenes of need here  (|u| + 1)th  c1 aSS c2 aSS e  c1 aSS2 c2  the automaton is obtained by swithing  in the transitions that are not loops in Fig.
3.
The global automaton orresponding to a given CCSL speiation is the produt of all the automata orresponding to the dierent denitions and relations.
The set of models  orresponding to suh an automaton is the same than the set of models of the CCSL speiation.
A areful analysis of the dierent steps shows that this onstrution stritly follows CCSL semantis.  (II)  This seond part is a diret onsequene of  (I)  and Lemma 5, even if the PSL  formula obtained by omposing the two transformations is not minimal.
We an dene  a diret translation from bounded CCSL to PSL.
However, the result of the translation remains ompliated.
We still have to enode the ounters of relations like preedene,  ltering, delay.
.
.
whih is tedious when using only propositional variables.
INRIA  Logial time and temporal logis: Comparing UML MARTE/CCSL and PSL  21  Here we have arbitrarily hosen to bound the preedene operators.
There are examples where the ontext already bounds the dierene between the arguments of a preedene relation (see for instane the denition of alternane in Set. 2.1).
So, bounded CCSL is not the largest fragment that an be enoded in PSL.
Determining whether the state spae of a CCSL speiation is nite is an open question.
Moreover it seems very diult to  determine a syntati fragment orresponding to suh CCSL speiations.
5 Conlusion In this paper, we have ompared the expressiveness of CCSL and PSL, two formal languages used for similare purposes but at dierent levels.
We have identied the CCSL onstruts that annot be expressed in PSL and the lass of PSL formulas that annot be stated in CCSL .
We have also dened the ommon fragments between CCSL and PSL so that one an be translated into the other.
A suient ondition to translate CCSL speiations into  inria-00540738, version 1 - 7 Dec 2010  PSL is to bound the integer ounters used to ount the number of ourrenes of loks.
Preisely, the relative advane of the loks put in relation by these CCSL onstruts must be bounded.
This translation is an important step towards the formal veriation of a CCSL speiation and the exploration of its state spae. In the future, we an also take benets of the intermediate translation to automata to establish omparison with other languages.
Conversely, we have dened the translation of PSL safety properties into CCSL.
CCSL annot express the lass of liveness properties.
CCSL has not been designed for this purpose.
However, it an be interesting to apture all the expressive power of PSL in a higher level desription language.
A solution to ll the gap ould be to introdue temporal modalities in a CCSL -like language while keeping the multi-loks aspets.
CCSL is indeed a language that is still evolving.
We are urrently dening a minimal kernel from whih all the relations and expressions introdued in this paper (and possibly others) an be derived.
In this  development, we should maintain the orrespondenes with the other languages involved in system design suh as PSL.
Referenes [1a C. AndrAS.
Syntax and semantis of the lok onstraint speiation language.
Tehnial Report 6925, INRIA, 2009.
[2a C. AndrAS, F. Mallet, and J. DeAntoni.
VHDL observers for lok onstraint heking.
In  Industrial Embedded Systems (SIES), 2010 International Symposium on, pages 98107,  July 2010.
[3a D. Bustan, D. Fisman, and J. Havliek.
Automata onstrution for PSL.
Tehnial  report, IBM Haifa Researh Lab, 2005.
[4a R. LaziAV.
Safely freezing LTL.
In  RR nAdeg 7459  In FST&TCS'06,  pages 381392.
Springer, 2006.
R. Gason , F. Mallet , J. DeAntoni  22  [5a F. Mallet, C. AndrAS, and J. DeAntoni.
Exeuting AADL models with UML/Marte.
In  ICECCS'09 - UML&AADL'09,  pages 371376, Potsdam, Germany, June 2009.
IEEE  Computer Press.
[6a F. Mallet, M.-A.
Peraldi-Frati, and C. AndrAS.
timing requirements.
In  ISORC'09,  Marte CCSL to exeute East-ADL  pages 249253, Japan, Tokyo, Marh 2009.
IEEE  Computer Press.
[7a S. Miyano and T. Hayashi.
Alternating nite automata on  puter Siene, 32(3):321  330, 1984.
[8a OMG.
UML Prole for MARTE, v1.0.
D -words.
Theoretial Com-  Objet Management Group, November 2009.  formal/2009-11-02.
[9a P. Peil, J. Medina, H. Posadas, and E. Villar.
Generating heterogeneous exeutable  speiations in SystemC from UML/MARTE models.
inria-00540738, version 1 - 7 Dec 2010  Software Engineering, 6:6571, 2010.
Innovations in Systems and  10.1007/s11334-009-0105-4.
[10a IEEE standard for Property Speiation Language (PSL), IEEE std 1850-2005.
[11a A. Sistla and E. Clarke.
The omplexity of propositional linear temporal logi.
J. ACM,  32(3):73374, 1985.
[12a M. Vardi and P. Wolper.
An automata-theoreti approah to automati program veriation (preliminary report).
In  LICS'86,  pages 332344.
IEEE, 1986.
[13a J. Vidal, F. de Lamotte, G. Gogniat, P. Soulard, and J.-P. Diguet.
A o-design approah for embedded system modeling and ode generation with UML and MARTE.
In  DATE,  pages 226231, 2009.
INRIA  inria-00540738, version 1 - 7 Dec 2010  UnitAS de recherche INRIA Sophia Antipolis 2004, route des Lucioles - BP 93 - 06902 Sophia Antipolis Cedex (France) UnitAS de recherche INRIA Futurs : Parc Club Orsay UniversitAS - ZAC des Vignes 4, rue Jacques Monod - 91893 ORSAY Cedex (France) UnitAS de recherche INRIA Lorraine : LORIA, TechnopA'le de Nancy-Brabois - Campus scientifique 615, rue du Jardin Botanique - BP 101 - 54602 Villers-lA"s-Nancy Cedex (France) UnitAS de recherche INRIA Rennes : IRISA, Campus universitaire de Beaulieu - 35042 Rennes Cedex (France) UnitAS de recherche INRIA RhA'ne-Alpes : 655, avenue de laEurope - 38334 Montbonnot Saint-Ismier (France) UnitAS de recherche INRIA Rocquencourt : Domaine de Voluceau - Rocquencourt - BP 105 - 78153 Le Chesnay Cedex (France)  Aditeur INRIA - Domaine de Voluceau - Rocquencourt, BP 105 - 78153 Le Chesnay Cedex (France) http://www.inria.fr  ISSN 0249-6399