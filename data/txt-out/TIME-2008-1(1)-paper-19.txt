15th International Symposium on Temporal Representation and Reasoning  An optimal tableau for Right Propositional Neighborhood Logic over trees Davide Bresolin Department of Computer Science University of Verona, Verona, Italy davide.bresolin@univr.it  Angelo Montanari, Pietro Sala Department of Mathematics and Computer Science University of Udine, Udine, Italy {angelo.montanari|pietro.sala}@dimi.uniud.it  Abstract  an alternative, decidability can be achieved by constraining the classes of temporal structures over which the logic is interpreted.
This is the case with the so-called Split Logics (SLs), which are interpreted over structures where every interval can be 'chopped' in at most one way [13].
Another possibility is to constrain the relation between the truth value of a formula over an interval and its truth values over subintervals of that interval [14, 17].
As an example, one can constrain a propositional letter to be true over an interval if, and only if, it is true at its starting point (locality) or it is true over all its subintervals (homogeneity).
All these solutions impose suitable syntactic and/or semantic restrictions that make it possible to reduce the logics to point-based ones [12].
A major challenge is thus to look for expressive enough interval temporal logics, which cannot be reduced to pointbased ones, but are decidable.
Some positive examples have been found in the class of propositional neighborhood logics (PNL for short) [8].
These logics feature modalities for right and left interval neighborhood, namely, the meets operator hAi and its transpose met-by hAi.
In [6], Bresolin et al.
prove the decidability of the future fragment of PNL (RPNL for short) over the natural numbers.
They first show that an RPNL formula is satisfiable if, and only if, there exist a finite model or an ultimately periodic (infinite) one with a finite representation of bounded size, and then they develop an optimal tableau-based decision procedure (NEXPTIME).
Such a result has been later extended to full PNL over the integers [5].
The NEXPTIME decidability of PNL over the class of all linear orderings, as well as over other more specific classes, has been proved in [3], by reducing it to the decision problem for the 2-variable fragment of firstorder logic extended with a linear ordering [15].
Finally, a branching-time neighborhood logic that interleaves CTL operators with RPNL ones has been developed in [4].
In this paper, we address the decision problem for RPNL over trees and we positively solve it by providing a tableaubased decision procedure.
The paper is organized as follows.
In Section 2, we introduce syntax and semantics of  Propositional interval temporal logics come into play in many areas of artificial intelligence and computer science.
Unfortunately, most of them turned out to be (highly) undecidable.
Some positive exceptions, belonging to the classes of neighborhood logics and of logics of subinterval relations, have been recently identified.
In this paper, we address the decision problem for the future fragment of Propositional Neighborhood Logic (Right Propositional Neighborhood Logic) interpreted over trees and we positively solve it by providing a tableau-based decision procedure that works in exponential space.
Moreover, we prove that the decision problem for the logic is EXPSPACE-hard, thus showing the optimality of the proposed procedure.
1  Introduction  Propositional interval temporal logics play a significant role in computer science, as they provide a natural framework for representing and reasoning about temporal properties in many areas of artificial intelligence, theoretical computer science, and databases.
Various propositional interval temporal logics have been proposed in the literature [9].
The most significant ones are Halpern and Shoham's Modal Logic of Time Intervals (HS) [11], Venema's CDT logic, interpreted over linear and partial orderings [10, 17], Moszkowski's Propositional Interval Temporal Logic [14], the propositional interval logics of temporal neighborhood [3, 4, 5, 6, 8], and the temporal logics of subinterval relations [1, 2, 16].
Unfortunately, many of them turned out to be (highly) undecidable.
In the recent years, a number of decidable interval logics have been identified and systematically studied.
One can get decidability by making a suitable choice of the interval modalities.
This is the case with the hBihBi (begins/begun by) and hEihEi (ends/ended by) fragments of HS [9].
As  1530-1311/08 $25.00 (c) 2008 IEEE DOI 10.1109/TIME.2008.17  110  intervals [ti , tj ], [t0i , t0j ] [?]
I(T), we say that [t0i , t0j ] is a right (resp., left) neighbor of [ti , tj ] if, and only if, tj = t0i (resp., t0j = ti ).
The vocabulary of Right Propositional Neighborhood Logic [6] (RPNL for short) consists of a set AP of propositional letters, the Boolean connectives !
and [?
], and the modal operator hAi.
Formulae of RPNL, denoted by ph, ps, .
.
., are recursively defined by the following grammar:  RPNL interpreted over trees, pointing out the problems one must face when linear structures are replaced with trees.
In Section 3, we present a tableau-based decision procedure and we prove its soundness, completeness, and optimality.
Conclusions provide an assessment of the work and outline future research directions.
2  RPNL syntax and semantics  ph ::= p | !ph | ph [?]
ph | hAiph.
The other Boolean connectives, the logical constants > (true) and [?]
(false), and the dual modal operator [A] are defined as usual.
We denote by |ph| the length of ph, that is, the number of symbols in ph (as a matter of fact, we shall use | | to denote the cardinality of a set as well).
Whenever there are no ambiguities, we call an RPNL formula just a formula.
Formulae of the forms hAips or [A]ps are called temporal formulae (from now on, we identify !hAips with [A]!ps and !
[A]ps with hAi!ps); formulae of the form hAips are called temporal requests.
A model for an RPNL formula is a pair M = hhT, I(T)i, Vi, where hT, I(T)i is an interval structure and V : I(T) - 2AP is a valuation function assigning to every interval the set of propositional letters true on it.
Given a model M = hhT, I(T)i, Vi and an interval [di , dj ] [?]
I(T), the semantics of RPNL is recursively defined by the satisfaction relation  as follows:  In this section we introduce RPNL and we show how to interpret it over branching structures (trees), where every time point may have many successor time points.
We assume every path to be either finite or isomorphic to hN, <i and we allow any node to have infinitely many (possibly, uncountably many) successors1 .
A directed graph is a pair G = hG, Si, where G is a set of nodes and S [?]
G x G is a binary relation over them, called successor relation.
A finite S-sequence over G is a sequence of nodes g1 g2 .
.
.
gn , with n >= 2, such that S(gi , gi+1 ) for i = 1, .
.
.
, n - 1.
Infinite S-sequences can be defined analogously.
A path r in G is a finite or infinite S-sequence.
In the following, we shall take advantage of a relation S + [?]
G x G such that S + (gi , gj ) if, and only if, gi and gj are respectively the first and the last element of a finite S-sequence.
In such a case, we say that gj is Sreachable from gi or, equivalently, that gi is an ancestor of gj .
Trees can be either finite or infinite graphs.
They are formally defined as follows.
* for every p [?]
AP , M, [ti , tj ]  p iff p [?]
V([ti , tj ]); * M, [ti , tj ]  !ps iff M, [ti , tj ] 6 ps;  Definition 1.
A tree is a directed graph T = hT, Si.
The elements of T are called time points.
T contains a distinguished time point t0 , called the root of the tree.
The relation S is such that:  * M, [ti , tj ]  ps1 [?]
ps2 iff M, [ti , tj ]  ps1 or M, [ti , tj ]  ps2 ; * M, [ti , tj ]  hAips iff [?
]tk [?]
T , with tk > tj , such that M, [tj , tk ]  ps.
* there exists no t0 such that S(t0 , t0 ), that is, the root has no S-predecessors;  We place ourselves in the most general setting and we do not impose any constraint on the valuation function.
In particular, given an interval [di , dj ], it may happen that p [?]
V([di , dj ]) and p 6[?]
V([d0i , d0j ]) for all intervals [d0i , d0j ] (properly) included in [di , dj ].
* for every t [?]
T , if t 6= t0 , then S + (t0 , t), that is, every time point t 6= t0 is S-reachable from the root; * for every t [?]
T , if t 6= t0 , then there exists exactly one t0 [?]
T such that S(t0 , t), that is, every time point t 6= t0 has exactly one S-predecessor.
2.1 RPNL over linear and branching structures  Given a tree T = hT, Si, we can define a strict partial ordering < over T such that, for every t, t0 [?]
T , t < t0 if, and only if, S + (t, t0 ).
It can be easily shown that, for every infinite path r in T, hr, <i is isomorphic to hN, <i.
Given a tree T = hT, Si and the corresponding strict partial ordering hT, <i, an interval is an ordered pair [ti , tj ] such that ti , tj [?]
T and ti < tj (point-intervals [t, t] are thus excluded).
We denote the set of all intervals by I(T).
The pair hT, I(T)i is called an interval structure.
For every pair of  We conclude the section by pointing out the differences between interpreting RPNL over linear structures and over branching ones.
?From the satisfiability of an RPNL formula over a linear structure, it immediately follows its satisfiability over a branching one.
However, the opposite does not hold in general.
Consider the following example.
Consider the formula ph1 [?]
hAi[A][A]p [?]
hAi[A][A]!p [?]
[A]hAi> which states that (i) there exists an interval in the future of the current one such that p holds over every interval in its future (the double [A] allows us to refer to all intervals strictly to the right of the current one), (ii) there  1 It is easy to see that, as far as RPNL is concerned, such trees are indistinguishable from finitely branching trees.
111  [A]>  [A]>  hAi[A][A]!p  hAi[A][A]!p  d0 hAi[A][A]p d1  [A][A]!p  d3  di  !p  dj  d0 hAi[A][A]p d1  [A][A]!p  d3  [A][A]p  d2 d0 i  p [A][A]p d2  di  p Figure 1.
Unsatisfiability of ph1 over a linear structure.
dj  d0j  Figure 2.
A branching structure satisfying ph1 .
exists an interval in the future of the current one such that !p holds over every interval in its future, and (iii) the model is infinite.
On a linear ordering, ph1 forces the existence of an interval (in fact, infinitely many ones) over which both p and !p hold, and thus it is clearly unsatisfiable, as shown in Figure 1.
On the contrary, it can be easily satisfied over a branching structure forcing condition (i) to hold on a given branch and condition (ii) to hold on another one, as shown in Figure 2.
In general, interpretations of RPNL formulae over linear and branching structures present some similarities.
In particular, in both of them intervals sharing their right endpoints must satisfy the same temporal formulae, that is, the same hAips and [A]ps formulae.
This allows us to associate with any time point the set of its temporal formulae.
However, interpretations over linear and branching structures differ in two fundamental respects.
On the one hand, linear structures feature a single time line over which all existential requests associated with a time point must be fulfilled.
As a consequence, the order according to which requests are fulfilled plays often a crucial role.
In branching structures, we can introduce as many branches as the existential requests associated with a given time point are and satisfy distinct requests over distinct branches.
Hence, every existential request associate with a given time point can be immediately satisfied (in a distinct branch).
On the other hand, for any pair of time points of a linear structure, either the past of the first one includes that of the second one or vice versa, while the pasts of a pair of time points of a branching structure can be only partially overlapped.
Formally, the past of a time point can be described as a set of sets of temporal requests associated with different time points in its past.
In the linear case, we may need to consider an exponential number of such sets (exponential in the number of temporal requests), while in the branching case we may need to take into account a doubly exponential number of sets (the doubly exponential number of subsets of the set of sets of temporal requests).
3  !p  step, we introduce some basic notions.
Let ph be an RPNL formula to check for satisfiability.
For the sake of brevity, we use (A)ps as a shorthand for both hAips and [A]ps.
Definition 2.
The closure CL(ph) of ph is the set of all its subformulae and of their negations (we identify !
!ps with ps).
Definition 3.
The set TF(ph) is the set of all temporal formulae in CL(ph), that is, TF(ph) = {(A)ps [?]
CL(ph)}.
By induction on the structure of ph, we can easily prove the following proposition.
Proposition 1.
For every formula ph, | CL(ph)| is less than or equal to 2 * |ph|, while | TF(ph)| is less than or equal to 2 * (|ph| - 1).
The notion of ph-atom is defined in the standard way.
Definition 4.
A ph-atom is a set A [?]
CL(ph) such that: * for every ps [?]
CL(ph), ps [?]
A iff !ps 6[?]
A; * for every ps1 [?]
ps2 [?]
CL(ph), ps1 [?]
ps2 [?]
A iff ps1 [?]
A or ps2 [?]
A.
We denote the set of all ph-atoms by Aph .
We have that |Aph | <= 2|ph| .
For any ph-atom A, let REQ(A) be the set of temporal formule in A, that is, REQ(A) = A [?]
TF(ph).
Given a model M = hhT, I(T)i, Vi for ph, we define a function VA : I(T) - Aph that associates an atom A with every [di , dj ] [?]
I(T) in such a way that for every ps [?]
CL(ph), ps [?]
A if, and only if, M, [di , dj ] |= ps.
The following theorem proves that atoms associated with intervals whose right endpoints coincide feature the same temporal formulae.
Proposition 2.
Let M = hhT, I(T)i, Vi be a model for ph and di , dj , de [?]
T be such that both di < de and dj < de .
If VA ([di , de ]) = A and VA ([dj , de ]) = A0 , then REQ(A) = REQ(A0 ).
A tableau system for RPNL over trees  Proof.
Suppose, by contradiction, that VA ([di , de ]) = A, VA ([dj , de ]) = A0 , and REQ(A) 6= REQ(A0 ).
Without loss of generality, we can assume that there exists hAips such that hAips [?]
REQ(A) and hAips [?]
/ REQ(A0 ).
By  In this section, we define a tableau-based decision procedure for RPNL, prove its soundness and completeness, and analyze its computational complexity.
As a preliminary  112  definition of atom, it follows that [A]!ps [?]
REQ(A0 ).
Since M is a model for ph, there exists dh > de such that M, [de , dh ] |= ps (for hAips [?]
REQ(A)) and for every dk > de M, [de , dk ] |= !ps (for [A]!ps [?]
REQ(A0 )).
For k = h, we have M, [de , dh ] |= !ps (contradiction).
Blocking condition.
To guarantee the termination of the tableau construction, we impose a blocking condition that prevents one from applying infinitely many times the expansion rules in the case of infinite models.
We say that a leaf node n with decoration h[di , dj ], An i belonging to a branch B is blocked if there exists an ancestor n0 of n with decoration h[dk , dl ], An0 i, with dl < dj in DB , such that:  Atoms are connected by the following binary relation.
Definition 5.
Let Rph be a binary relation over Aph such that, for every pair of atoms A, A0 [?]
Aph , A Rph A0 if, and only if, for every [A]ps [?]
CL(ph), if [A]ps [?]
A, then ps [?]
A0 .
3.1  REQ(An ) = REQ(An0 ), and [?
]dh (dh < dj - [?
]dg (dg < dl [?]
REQ(dh ) = REQ(dg ))).
Roughly speaking, we block a leaf node n if it has an ancestor n0 with the same set of temporal formulae and every set of temporal formulae that occurs in the path from n0 to n also occurs in the path from the root to n0 .
The tableau system  A tableau for an RPNL formula ph is a suitable decorated tree T .
A finite prefix of the natural numbers DB = hDB , <i is associated with every branch B of T .
The decoration of a node n in T , denoted by n(n), is a pair h[di , dj ], Ai, where A is an atom and di , dj [?]
DB for every branch B containing n. Given a node n, we denote by A(n) the atom in n(n).
Expansion strategy.
Given a decorated tree T and a branch B of T ending in a leaf node n, we say that an expansion rule is applicable (to n) if n is (non-closed,) non-blocked and its application generates at least one new node.
To any branch B ending in a leaf node n, with decoration h[di , dj ], An i, we apply the following branch-expansion strategy:  Expansion rules.
Tableau construction is based on the following expansion rules.
Let n be a leaf node of the current tableau T with decoration h[di , dj ], An i.
Since n is a leaf, there is a unique branch B containing n in T .
Let DB be the finite strictly ordered set associated with B.
The following expansion rules can be possibly applied to n:  1. if the fill-in rule is applicable, apply it to n; 2. if the fill-in rule is not applicable and there exists a point dk in DB , with dk < dj , such that there are no ancestors of n with decoration h[dk , dj ], A0 i, for a suitable A0 , close the node n; 3. if the fill-in rule is not applicable and n is not closed, apply the step rule to n, if it is applicable.
1.
Fill-in rule.
Let d [?]
DB , with d0 < d < dj , be such that there are no ancestors n0 of n with decoration h[d, dj ], A0 i, for a suitable A0 .
If there exists an atom A00 such that REQ(A00 ) = REQ(An ) and for all ancestors n of n with decoration h[d, d], Ai, for suitable d and A, A Rph A00 , we add an immediate successor n00 to n with decoration h[d, dj ], A00 i.
2.
Step rule.
Let {hAips1 , .
.
.
, hAipsk }, with k >= 1, be the set of hAi-formulae in An .
If there exist k atoms A01 , .., A0k such that, for 1 <= h <= k, An Rph A0h and psh [?]
A0h , we add k immediate successors n0h , with decoration h[dj , dj+1 ], A0h i, to n. Let B1 , ..., Bk be the new added branches.
For 1 <= h <= k, DBh is obtained from DB by adding a new point dj+1 greater than all points in DB .
Notice that, at step 1, the fill-in rule is applied exhaustively to add a node for each missing interval.
Tableau.
Let ph be the formula to check for satisfiability.
An initial tableau for ph is a decorated tree with one single node h[d0 , d1 ], Ai, with ph [?]
A and DB = {d0 < d1 }.
A tableau for ph is any decorated tree T obtained by expanding an initial tableau for ph through successive applications of the branch-expansion strategy to the leaves, until it cannot be applied anymore.
Pruning the tableau.
Given a tableau T for ph, we apply the following pruning procedure until no further nodes can be removed:  The fill-in rule adds one successor to n, the step rule one or more.
However, while the step rule decorates every successor with a new interval ending at a new point dj+1 , the fill-in rule decorates the successor with a new interval whose endpoints are already in DB .
Moreover, the fill-in rule forces atoms associated with intervals with the same right endpoint d to agree on their temporal requests.
1. remove any closed node from the tableau; 2. remove any node n devoid of successors such that the fill-in rule has been applied to it during the tableau construction; 3. remove any node n such that the step rule has been applied to it during the tableau construction and there exists hAips [?]
An such that there is no successor n0 of n with ps [?]
A(n0 ); 4. remove every node which is not reachable from the root.
Definition 6.
For all branches B in T and for all d > d0 in DB , we define the set of temporal formulae associated with d, denoted REQ(d), as the set REQ(A(n)) for all nodes n in B with decoration h[d, d], Ai.
113  We shall prove that an RPNL formula ph is satisfiabile if, and only if, there exists a non-empty pruned tableau for it.
3.2  a new node n6 associating an atom with the interval [d1 , d3 ].
Then, since the fill-in rule is no more applicable, we apply the step rule to node n6 , that adds three successor nodes n7 , n8 , and n9 .
Nodes n7 and n8 satisfy the blocking condition, while node n9 does not satisfy it.
At this point, the construction should proceed with a double application of the fill-in rule to node n9 to associate suitable atoms with the intervals [d1 , d4 ] and [d2 , d4 ].
However, the fill-in rule turns out to be unapplicable, since no suitable atom can be found for the interval [d2 , d4 ].
Thus, node n9 is closed.
As for node n5 , it immediately turns out to be blocked.
This concludes the tableau construction.
Node n9 is closed and thus removed by condition 1 of the pruning procedure.
Since neither A0 nor A1 contains [A][?
], there exists a formula in A0 , namely, hAi[A][?
], such that there are no successors n0 of the node n6 with [A][?]
[?]
A(n0 ).
Hence, node n6 is removed by condition 3 of the pruning procedure.
Such a removal makes n7 and n8 no more reachable from the root and thus, by condition 4 of the pruning procedure, they are removed from the tableau.
Finally, condition 2 of the pruning procedure forces the removal of node n4 .
Since no further removal steps can be applied, the resulting pruned tableau is not empty.
An example  We conclude the section by applying the proposed tableau method to the formula ph2 = hAi(hAi> [?]
[A]hAi>) [?]hAi[A][?].
A non-empty pruned tableau for ph2 is depicted in Figure 3.
We associate a linear ordering Di = {d0 < .
.
.
< di } with every node.
It represents the ordering associated with the branch ending at that node.
Three atoms come into play: A0 = {>, hAi>, hAi[A][?
], hAips, !ps, ph2 }, A1 = {>, hAi>, [A]hAi>, hAips, ps, !ph2 }, and A2 = {>, [A][?
], [A]hAi>, [A]!ps, !ps, !ph2 }, where ps is a shorthand for hAi> [?]
[A]hAi>.
The relation Rph over them is defined as follows: Rph = {(A0 , A0 ), (A0 , A1 ), (A0 , A2 ), (A1 , A0 ), (A1 , A1 )}.
The root of the tableau is the node n0 .
We apply the step rule to it.
Since atom A0 contains three hAi-formulae, we add three successors to n0 whose decorations include atoms A0 , A1 , and A2 , respectively.
hAi> is dealt with by node n1 , which turns out to be blocked.
hAi[A][?]
is dealt with by node n3 .
Since A2 does not contain hAi-formulae, n3 is not expanded further.
Finally, hAips is dealt with by node n2 .
Since the atom A1 contains the hAi-formulae hAi> and hAips, we apply the step rule to n2 , which produces two successors nodes n4 and n5 whose decorations include the atoms A0 and A1 , respectively.
As for node n4 , it does not satisfy the blocking condition and thus we apply the fill-in rule to it, which produces  3.3 Soundness and completeness In this section, we prove the soundness and completeness of the method.
Soundness is proved by showing how to construct a model satisfying ph from a non-empty pruned tableau T for it.
Conversely, completeness is proved by showing that, for any satisfiable formula ph, there exists a non-empty pruned tableau for it.
n0 h[d0 , d1 ], A0 i, D1 n1 h[d1 , d2 ], A0 i, D2 blocked  Theorem 1 (Soundness).
Given a formula ph and a pruned tableau T for it, if T is non-empty, then ph is satisfiable.
n3  n2 h[d1 , d2 ], A1 i, D2  Proof.
Let T be a non-empty pruned tableau for ph.
We show that we can build a model for ph based on T .
Since T is not empty, it has a root with decoration h[d0 , d1 ], A0 i and DB = {d0 < d1 }.
We start the construction with a partial model, which consists of a two-node tree T0 = {d0 , d1 } and a valuation V[d0 , d1 ] = {p : p [?]
A0 }.
Then, we progressively turn it into a model for ph by a depth-first visit of T .
Let M be the current partial model, n be the current node of T , with decoration h[di , dj ], An i, and DB be the ordering associated with the branch B ending in n. We proceed by induction on the expansion rule that has been applied to n.  h[d1 , d2 ], A2 i, D2  n4  n5  h[d2 , d3 ], A0 i, D3  h[d2 , d3 ], A1 i, D3  x  blocked  n6 h[d1 , d3 ], A0 i, D3 x n7  n8  h[d3 , d4 ], A0 i, D4 h[d3 , d4 ], A1 i, D4 blocked  blocked  n9  * No expansion rule has been applied to n and n is not blocked.
In such a case, there are no hAi-formulae in An and thus we do not need to expand the model.
h[d3 , d4 ], A2 i, D4 closed  * The step rule has been applied to n. For every formula hAips [?]
An , there exists a successor nps of n such that ps [?]
A(nps ).
We expand the partial model by  Figure 3.
A tableau for the formula ph2 = hAi(hAi> [?]
[A]hAi>) [?]
hAi[A][?]
114  3.4  adding an immediate successor dps to dj and by putting V[dj , dps ] = {p : p [?]
A(nps )}.
Computational complexity  As a preliminary step, we show that the proposed tableau method terminates by providing a bound on the length of any branch B of any tableau for ph.
Let n = |ph|.
We have that REQ(d) can take 2|T F (ph)| , where |T F (ph)| <= 2 * (n - 1), different values and there can be at most 2|T F (ph)| different sets of requests associated with time points d0 < d Hence, by the blocking condition, after at most O(2n ), applications of the step rule, the expansion strategy cannot be applied anymore to a branch.
Moreover, given a branch B, between two consecutive applications of the step rule, the fill-in rule can be applied at most m-3 times, where m = |Di | and Di is the underlying set of the linear ordering associated with the last node of B (in fact, m - 2 is exactly the number of applications of the step rule up to that point).
This allows us to conclude that the length of a branch is (at most) exponential in n. Since the outgoing degree of every node is bounded by the number of hAi-formulae in n CL(ph), the size of a tableau is thus O(22 ).
The following theorem immediately follows.
* The fill-in rule has been applied to n. The decoration of the successor of n includes an interval [dk , dj ] and an atom A0 .
We expand the model by putting V[dk , dj ] = {p : p [?]
A0 }.
* The node n is blocked.
In such a case, there exists an ancestor n0 of n, with decoration h[dk , dl ], An0 i, such that REQ(An ) = REQ(An0 ) and for all dh < dj in DB there exists dm < dl with REQ(dh ) = REQ(dm ).
Since no new atoms occur between n0 and n, we can proceed with the model construction from n as we did from n0 .
It is easy to see that such a (possibly infinite) construction produces a model for ph.
Theorem 2 (Completeness).
Given a satisfiable formula ph, there exists a non-empty pruned tableau T for ph.
Proof.
Let ph be a satisfiable formula and let M = hhT, I(T)i, Vi be a model for it.
We prove that there exists a non-empty pruned tableau T corresponding to M. Since M is a model for ph, there exists an interval [d0 , d1 ] such that M, [d0 , d1 ]  ph.
Let A0 = {ps [?]
CL(ph) : M, [d0 , d1 ]  ps}.
We start the construction of T with a partial tableau which includes a single node with decoration h[d0 , d1 ], A0 i and DB = {d0 < d1 }.
Then, we proceed by induction on expansion rules.
Let T be the current partial tableau, n be a leaf node with decoration h[di , dj ], An i, and DB be the ordering associated with the branch ending in n. Three cases may arise.
Theorem 3.
The decision problem for RPNL over trees is in EXPSPACE.
Proof.
The proposed decision procedure does not need to explicitly generate the whole tableau, but it can keep track of a branch at a time and expand it in a non-deterministic way.
Since the length of any branch is at most O(2n ), the procedure is in EXPSPACE.
To prove EXPSPACE-hardness of the decision problem for RPNL interpreted over trees, we exploit Alternating Turing Machines (ATM for short) [7].
An ATM is a tuple M = (Q, G, d, q0 , g), where (Q, G, d, q0 ) is a one-tape nondeterministic Turing Machine and g is a function g : Q - {[?
], [?
], accept, reject} that classifies the states of M .
Given an input word w and the computation tree of the one-tape non-deterministic Turing Machine (Q, G, d, q0 ) on w, we say that a configuration C = (q, v, i), that is, a node of the computation tree, is accepting if either g(q) = accept, or g(q) = [?]
and at least one successor of C is accepting, or g(q) = [?]
and all successors of C are accepting.
We say that an ATM M accepts w if the root (q0 , w, 1) of the computation tree is an accepting configuration.
It is possible to prove that the complexity class AEXPTIME, that is, the class of the problems that can be decided in exponential time by an ATM, corresponds to the complexity class EXPSPACE [7].
* The fill-in rule is applicable to n. Let dk be a point such that there are no nodes associated with [dk , dj ].
We add a successor n0 to n with decoration h[dk , dj ], A0 i, where A0 = {ps [?]
CL(ph) : M, [dk , dj ]  ps}.
* The step rule is applicable to n. For every hAips [?]
An , there exists an interval [dj , dps ] such that M, [dj , dps ]  ps.
Let Aps = {th [?]
CL(ph) : M, [dj , dps ]  th}.
For every hAips [?]
An , we add a successor nps to n with decoration h[dj , dps ], Aps i and, for every new branch B 0 , we define DB 0 = DB [?]
{dps }.
* No rule is applicable to n. Since M is a model for ph, n cannot be a closed node.
Hence, either there are no hAi-formulae in An or n is blocked.
Theorem 4.
The decision problem for RPNL over trees is EXPSPACE-hard.
It is easy to prove that the tableau T generated by such a procedure is a non-empty tableau for ph to which no removal step can be applied.
Proof.
Without loss of generality, we can assume that every non final configuration of M has exactly two successor configurations and that once the machine reaches an accepting  115  an interval [di , dj ] if, and only if, c(dj ) = c(di ) + 1, which can be obtained by substituting C for P everywhere in the C previous formulae (notice that a formula ps-1 is not needed).
The behavior of the ATM can be encoded as follows.
For the sake of brevity, we use the shorthand [U ]ps for ps [?]
[A]ps [?]
[A][A]ps.
First, we impose that every element of the model di where at least one among C1 , .
.
.
, Cn , P1 , .
.
.
, Pn evaluates to false has a successor dj .
Moreover, if every Pi evaluates to true in di , that is, if di represents the last tape cell, then every Pi evaluates to false in dj and c(dj ) = c(di ) + 1; otherwise, c(dj ) = c(di ) and p(dj ) = p(di ) + 1.
Such a condition is imposed by the formula [U ]pssucc , where pssucc is defined as follows:  or a rejecting state, it remains in that state forever, without changing the contents of the tape.
Let w be the input word and M be an ATM that runs in time 2n , where n [?]
O(|w|).
We build a formula ph whose models encode accepting computation trees for M on input w. Every branch in the computation tree includes 2n configurations.
Every configuration, which consists of the current state q, the current position of the head i, and the contents of 2n tape cells, is represented by 2n elements of the model.
We encode every level c of the computation tree (from level 0 to level 2n - 1) by means of n propositional letters C1 , .
.
.
, Cn .
Moreover, we encode every position p in the tape by means of n propositional letters P1 , .
.
.
, Pn .
Given a level c (resp., a tape position p), we denote by c + 1 (resp., p + 1) the next level (resp., the next tape position).
Moreover, we introduce h propositional letters A1 , .
.
.
, Ah , with h = |G|, for the symbols in the alphabet G, m propositional letters Q1 , .
.
.
, Qm , with m = |Q|, for the states in Q, and a propositional letter H for the head of M .
As a first step, we impose a sort of locality principle on all the above-mentioned propositional letters [6], according to which each of them assumes the same truth value over intervals starting at the same time point, that is, for every propositional letter R, R holds over an interval [di , dj ] if, and only if, R holds over [di , dk ] for every dk > di .
It allows us to interpret every point d of the model as pair (c(d), p(d)), where c(d) is a level and p(d) is a position.
Such a condition is imposed by means of the formula (hAiR - [A]R) [?]
[A](hAiR - [A]R).
Let psloc be the conjunction of these formulae.
Next, we provide some auxiliary formulae that will be used to encode the behavior of the ATM.
First, we inC troduce the formulae ps= = [?
]ni=1 (Ci - [A]Ci ) and P n ps= = [?
]i=1 (Pi - [A]Pi ) such that, for any interval C P [di , dj ], ps= (resp., ps= ) holds over [di , dj ] if, and only if, c(di ) = c(dj ) (resp., p(di ) = p(dj )).
Next, we introduce P P the auxiliary formulae ps+1 and ps-1 such that, for any inP P terval [di , dj ], ps+1 (resp., ps-1 ) holds over [di , dj ] if, and only if, c(dj ) = c(di ) + 1 (resp., c(dj ) = c(di ) - 1).
Such formulae are defined as follows:  pssucc  =  (psnext [?]
!
[?
]ni=1 (Pi [?]
Ci )) - hAipsnext  psnext  =  C C P ([?
]ni=1 (Pi [?]
[A]!Pi ) [?]
ps+1 ) [?]
(ps= [?]
ps+1 )  Next, we impose that every tape cell contains only one symbol of G and that, in a given configuration, the head is associated only with one tape position by means of the formulae [U ]psa , where psa = [?
]hi=1 Ai [?]
[?
]hi=1 (Ai - [?
]j6=i !Aj ), C and [U ]pshead , where pshead = (H [?]
ps= ) - [A]!H.
Furthermore, we associate the state of the machine M with the head position by means of the formula [U ]psstate , where m psstate = (H - [?
]m i=1 Qi ) [?]
[?
]i=1 (Qi - [?
]j6=i !Qj ).
Now, we have to ensure that the sequence of configurations respects the transitions of M .
First of all, we impose that if a position in a configuration does not contain the head, its symbol remains unchanged in the next configuration by means of the formula [U ]psapos , where P C psapos = (ps= [?]
ps+1 [?]
!H) - [?
]hi=1 (Ai - [A]Ai ).
By definition of ATM, two consecutive configurations may differ only in the state, in the symbol associated with the current cell, and in the head position, that can move left or right.
Let d(Q, A) = (Q0 , A0 , ~1 ), (Q00 , A00 , ~2 ), where ~1 , ~2 [?]
{-, -}, be a transition of M .
Suppose that ~1 =- and ~2 =- (the other cases are similar).
Moreover, let: ps1d  P ps+1 (n)  =  P ps+1 (k)  = (!Pk [?]
[A]Pk [?]
[?
]ni=k+1 (Pi - [A]Pi )) [?]
P ps+1  =  P ps+1 (1)  P ps-1 (n)  =  Pn [?]
[A]!Pn  P ps-1 (k)  = (Pk [?]
[A]!Pk [?]
[?
]ni=k+1 (Pi - [A]Pi )) [?]
ps2d  =  P C (Q [?]
A [?]
H [?]
ps-1 [?]
ps+1 )-  hAi(Q00 [?]
H [?]
psnext [?]
hAi(A00 )) If Q is an [?
]-state, we encode the transition d(Q, A) with the d formula ps[?]
= [U ](ps1d [?]
ps2d ), while if Q is an [?
]-state, we d encode the transition with the formula ps[?]
= [U ](ps1d [?]
ps2d ).
Let w the input word.
We denote by w(i) the ith symbol of w and by Aw(i) the corresponding propositional letter.
Let Q0 be the initial state of M .
We encode the initial configuration of the machine with the formula psinit defined as  P ((!Pk [?]
[A]Pk ) [?]
ps+1 (k + 1))  =  P C (Q [?]
A [?]
H [?]
ps= [?]
ps+1 )-  hAi(A0 [?]
psnext [?]
hAi(Q0 [?]
H))  !Pn [?]
[A]Pn P ((Pk [?]
[A]!Pk ) [?]
ps+1 (k + 1))  P ps-1  =  P ps-1 (1)  C Analogously, we introduce a formula ps+1 that holds over  116  follows: psinit psin (|w|)  [6] D. Bresolin, A. Montanari, and G. Sciavicco.
An optimal decision procedure for Right Propositional Neighborhood Logic.
Journal of Automated Reasoning, 38(1-3):173-199, 2007.
= psin (1) [?]
H [?]
Q0 [?]
[?
]ni=1 (!Ci [?]
!Pi ); = psnext [?]
Aw(|w|) [?]
[A]([?
]ni=1 !Ci - Ablank ) [?]
[A][A]([?
]ni=1 !Ci - Ablank );  psin (k)  [7] A.K.
Chandra, D.C. Kozen, and L.J.
Stockmeyer.
Alternation.
Journal of the ACM, 28(1):114-133, 1981.
= psnext [?]
Aw(k) [?]
hAipsin (k + 1), with k < |w|,  [8] V. Goranko, A. Montanari, and G. Sciavicco.
Propositional interval neighborhood temporal logics.
Journal of Universal Computer Science, 9(9):1137-1167, 2003.  where Ablank is a propositional letter associated with the blank symbol in G. Finally, w.l.o.g., we assume that Qreject is the unique rejecting state of M and we encode the accepting condition with the formula psacc = [U ]!Qreject .
4  [9] V. Goranko, A. Montanari, and G. Sciavicco.
A road map of interval temporal logics and duration calculi.
Journal of Applied Non-Classical Logics, 14(1-2):9- 54, 2004.
Conclusions  In this paper, we solved the satisfiability problem for the future fragment of PNL, interpreted over trees, by providing an EXPSPACE tableau-based decision procedure.
Moreover, we proved the EXPSPACE-hardness of the problem.
We are currently looking for a possible generalization of the method to full PNL interpreted over trees and over partial orderings with the linear interval property.
[10] V. Goranko, A. Montanari, G. Sciavicco, and P. Sala.
A general tableau method for propositional interval temporal logics: Theory and implementation.
Journal of Applied Logic, 4(3):305-330, 2006.
[11] Joseph Y. Halpern and Yoav Shoham.
A propositional modal logic of time intervals.
Journal of the ACM, 38(4):935-962, October 1991.
References  [12] A. Montanari.
Propositional interval temporal logics: some promising paths.
In Proc.
of the 12th International Symposium on Temporal Representation and Reasoning (TIME), pages 201-203.
IEEE Computer Society Press, 2005.
[1] D. Bresolin, V. Goranko, A. Montanari, and P. Sala.
Tableau-based decision procedure for the logic of proper subinterval structures over dense orderings.
In Proc.
of the 5th Int.
Workshop on Methods for Modalities (M4M), pages 335-351, 2007.
[13] A. Montanari, G. Sciavicco, and N. Vitacolonna.
Decidability of interval temporal logics over split-frames via granularity.
In Proc.
of the 8th European Conference on Logics in AI, volume 2424 of LNAI, pages 259-270.
Springer, 2002.
[2] D. Bresolin, V. Goranko, A. Montanari, and P. Sala.
Tableau systems for logics of subinterval structures over dense orderings.
In Proc.
of TABLEAUX 2007, volume 4548 of LNAI, pages 73-89.
Springer, 2007.
[14] B. Moszkowski.
Reasoning about digital circuits.
Tech.
rep. stan-cs-83-970, Dept.
of Computer Science, Stanford University, Stanford, CA, 1983.
[3] D. Bresolin, V. Goranko, A. Montanari, and G. Sciavicco.
On Decidability and Expressiveness of Propositional Interval Neighborhood Logics.
In Proc.
of the International Symposium on Logical Foundations of Computer Science (LFCS), volume 4514 of LNCS, pages 84-99.
Springer, 2007.
[15] M. Otto.
Two variable first-order logic over ordered domains.
Journal of Symbolic Logic, 66(2):685-702, 2001.
[4] D. Bresolin and A. Montanari.
A tableau-based decision procedure for a branching-time interval temporal logic.
In Proc.
of the 4th Int.
Workshop on Methods for Modalities (M4M), pages 38-53, 2005.
[16] I. Shapirovsky and V. Shehtman.
Chronological future modality in Minkowski spacetime.
In P. Balbiani, N. Y. Suzuki, F. Wolter, and M. Zakharyaschev, editors, Advances in Modal Logic, volume 4, pages 437- 459.
King's College Publications, London, 2003.
[5] D. Bresolin, A. Montanari, and P. Sala.
An optimal tableau-based decision algorithm for Propositional Neighborhood Logic.
In Proc.
of the 24th International Symposium on Theoretical Aspects of Computer Science (STACS), volume 4393 of LNCS, pages 549-560.
Springer, 2007.
[17] Y. Venema.
A modal logic for chopping intervals.
Journal of Logic and Computation, 1(4):453-476, 1991.
117