Temporalising Tractable Description Logics A. Artale Faculty of Computer Science Free University of Bozen-Bolzano I-39100 Bozen-Bolzano, Italy artale@inf.unibz.it  R. Kontchakov C. Lutz School of CS and IS Department of Computer Science Birkbeck College Dresden University of Technology London WC1E 7HX, U.K. 01062 Dresden, Germany roman@dcs.bbk.ac.uk lutz@tcs.inf.tu-dresden.de  F. Wolter Department of Computer Science University of Liverpool Liverpool L69 3BX, U.K. frank@csc.liv.ac.uk  Abstract It is known that for temporal languages, such as dZrstorder LT L, reasoning about constant (time-independent) relations is almost always undecidable.
This applies to temporal description logics as well: constant binary relations together with general concept subsumptions in combinations of LT L and the basic description logic ALC cause undecidability.
In this paper, we explore temporal extensions of two recently introduced families of aweaka description logics known as DL-Lite and EL.
Our results are twofold: temporalisations of even rather expressive variants of DL-Lite turn out to be decidable, while the temporalisation of EL with general concept subsumptions and constant relations is undecidable.
M. Zakharyaschev School of Comp.
Sci.
and Inf.
Syst.
Birkbeck College London WC1E 7HX, U.K. michael@dcs.bbk.ac.uk of the dZow of time (the natural numbers N for LT L) and the domains of the DL interpretations.
Thus, a model for the combined language consists of a dZow of snapshots that represent the domains of interest at various time points.
This semantics corresponds to the semantics of dZrst-order temporal logics (more precisely, to dZrst-order temporal models with constant domains; varying and expanding domains have been considered as well in temporalised DLs, but they are not within the scope of this paper).
In fact, the translation of standard DLs into dZrst-order logic can be extended to a translation of temporalised DLs into dZrst-order temporal logics.
For this semantics, the expressivity and computational complexity of combinations of LT L and DLs extending the standard Boolean DL ALC have been completely classidZed [14, 4].
Instead of trying to summarise all the available results here, we only point out one of the main insights from this investigation: aV combinations of LT L and ALC, which allow general concept inclusions (GCIs) C1  C2 , are decidable (in fact, usually E XP S PACE-complete) if, and only if, the temporal operators are not applied to binary relations (roles) and, more generally, no constraints are imposed on the binary relations.
1.
Introduction Over the last 15 years, many temporalised versions of description logics (DLs) have been suggested and investigated.
We refer the reader to the survey papers and monograph [6, 14, 4] where the history of the development of both interval and point-based temporal extensions of DLs is discussed in full detail.
Our main concern in this paper are extensions of DLs by point-based temporal logics, in particular the standard linear time temporal logic LT L (see [13] and references therein).
The current state of the art in this dZeld can be summarised as follows: it is generally agreed that the semantics of combined temporal description logics should be based on the Cartesian products  In other words, as long as one only wants to reason about the temporal behaviour of axioms (corresponding to closed formulas) and concepts (corresponding to unary predicates), the resulting combination is likely to be decidable; but as soon as the combination allows reasoning about the temporal behaviour of binary relations it becomes undecidable.
This phenomenon is well understood and redZected in the dedZnition of, e.g., the monodic fragments of dZrst-order tem-  14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  poral logics [17, 12].
In particular, the undecidability results hold for the most important temporal constraint on binary relations, namely, that a role is constant over time: even a single constant role results in an undecidable combination of ALC and LT L with GCIs.
Without GCIs, temporal description logics may be decidable even with constant roles [14].
Unfortunately, many applications of temporal description logics (say, temporal data modelling, which will be briedZy discussed in Section 3, or dynamic ontologies) require both GCIs and temporal constraints on roles, in particular constant roles.
It was this problem that motivated the research which resulted in this paper.
More precisely, our main aim was to dZnd out whether it is possible to design useful combinations of LT L and DLs with GCIs and constant roles that are still decidable.
Recent developments in description logic have opened a new path to follow in designing such languages.
First, the recognition of the importance of tractable reasoning and, in particular, query answering over DL ontologies with GCIs has given rise to the investigation of the new DL-Lite family of DLs [10, 11, 2].
And second, the use of huge DL-based ontologies with GCIs in bio- and medical informatics has led to the introduction and investigation of aweaka DLs (redZecting the expressive power of existing ontologies) with tractable subsumption algorithms, namely, the EL-family of DLs [5, 7, 8].
Both families of DLs lack some of the expressive power of ALC but have nevertheless proved expressive enough for a number of applications.
In this paper, we explore to which extent these new families of DLs can provide basis for useful and still decidable combinations of LT L and DLs with GCIs and constant roles.
The obtained results are twofold.
On the one hand, we prove in Section 4 that the combination of one of the most expressive versions DL-Litebool of DL-Lite with LT L is indeed decidable (in E XP S PACE), even with GCIs and constant roles.
Moreover, its Krom fragment turns out to be decidable in PS PACE.
The proofs are based on an embedding into the one-variable fragment of dZrst-order temporal logic.
This means, in particular, that reasoning in temporal DL-Lite can be supported by available temporal provers; see, e.g., [12].
On the other hand, we show in Section 7 that the corresponding combination of EL and LT L is undecidable.
The meaning of these results is analysed in Section 8.  combinations of GCIs and ABox assertions.
Moreover, we will distinguish between local and global role names.
Thus, TDL-Litebool contains object names a0 , a1 , .
.
.
, concept names A0 , A1 , .
.
.
, local role names P0 , P1 , .
.
.
, and global role names T0 , T1 , .
.
.
.
Roles R, basic concepts B and concepts C of TDL-Litebool are dedZned as follows: R B C  |  Pi aL B  | |  Pia  Ti | Tia , Ai | aL q R, AZC | C1  C2 | C | C1 U C2 , |  where q aL 1 is a natural number (note that the results of this paper do not depend on whether q is given in unary or in binary).
TDL-Litebool formulas are built from atoms of the form C1  C2 ,  C(ai ),  R(ai , aj )  with the help of the Boolean connectives (say, AZ and aSS) and the temporal operators  and U.
The atoms C1  C2 are often called general concept inclusions (GCIs), while the atoms C(ai ) and R(ai , aj ) are called ABox assertions.
A TDL-Litebool interpretation I is a function   I(n) I(n) I(n) I(n) I(n) = I, a0 , .
.
.
, A0 , .
.
.
, P0 , .
.
.
, T0 , .
.
.
, I(n)  I(n)  where I is a nonempty set, n a N, ai a I, Ai a I, I(n) I(n) I(n) I(m) Pi a I A I, Ti a I A I, with ai = ai I(n) I(m) I(n) I(n) and Ti = Ti , for all n, m a N, and ai 	= aj , for all i 	= j and all n a N (the last condition means the unique name assumption, which standard in DL).
The role and concept formation constructors are interpreted in I as follows (where Ri is either a local or global role name): (Ria )I(n) = I(n)  aL  I(n)  (aL q R)  fi  I(n)   (y, x) | (x, y) a Ri  ,  = a, fi  = x a I | {y | (x, y) a RI(n) } aL q ,  (AZC)I(n) = I \ C I(n) , I(n)  (C1  C2 )I(n) = C1 (C)  I(n)  (C1 U C2 )I(n)  2.
Temporal extension of DL-Litebool We begin by introducing the temporal extension TDL-Litebool of one of the most expressive description logics DL-Litebool of the DL-Lite family [2].
It combines the temporal operators of LT L,  (aat the next momenta) and U (auntila), with the language of DL-Litebool in a straightforward manner by applying them to concepts and Boolean  ::= ::= ::=  I(n)  aS C2  ,  I(n+1)  = C ,   I(k) C2 = aS k>n    I(m)  C1  	 .
n<m<k  The standard abbreviations  aA AZaL, aR aA (aL 1 R), C1  C2 aA AZ(AZC1  AZC2 ), a$?
q R aA AZ(aL q + 1 R), (= q R) aA (a$?
qR)  (aL q R), 3F C aA  U C (asome time in the futurea) and 2F C aA AZ3F AZC (aalways in the futurea) we need in what follows are self-explanatory and correspond to the intended semantics.
14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  The satisfaction relation (I, n) |= D, for a TDL-Litebool formula D, is dedZned inductively: I(n)  (I, n) |= C1  C2 iff C1 (I, n) |= C(ai ) iff (I, n) |= R(ai , aj ) iff (I, n) |= AZD (I, n) |= D1 aSS D2 (I, n) |= D (I, n) |= D1 U D2  I(n)  a C2  ,  I(n) ai a C I(n) , I(n) I(n) (ai , aj ) a  RI(n) ,  iff (I, n) 	|= D, iff (I, n) |= D1 and (I, n) |= D2 , iff (I, n + 1) |= D, iff there is k > n with (I, k) |= D2 and (I, m) |= D1 for all n < m < k.  We will also freely use the Booleans a and a" and the temporal operators 2F and 3F for formulas.
A formula D is satisdZable if there is an interpretation I and a time point n such that (I, n) |= D. Observe that the interpretation of object names and global role names is time-independent, while the interpretation of local role names and concepts is allowed to vary over time.
Time-independent  can be introduced   concepts A and 2+ A  A , A  by means of the axioms 2+ F F where 2+ F D aA D aSS 2F D. At dZrst sight one might think that the satisdZability problem for this logic is undecidable because using a single global functional role T (functionality can be ensured by the axiom aL 2 T  aL) with functional T a one can easily enforce the existence of a N A N grid, which could possibly be used to encode the undecidable N A N tiling problem.
However, the language is not capable of expressing the requirements on colour matching in the domain adimension,a i.e., that if (x, y) a T I(n) then the colours of tiles covering x and y match (which can be easily expressed with the qualidZed existential quantidZer aT.C).
In fact, as we shall see in the next section, TDL-Litebool can be embedded in the one-variable fragment of dZrst-order temporal logic, which is known to be decidable, actually, E XP S PACE-complete; see, e.g., [14].
Note that satisdZability in DL-Litebool is NPcomplete [2].
3.
Temporal data modelling with TDL-Litebool Here we briedZy discuss how TDL-Litebool can be used for temporal data modelling.
It was argued in [10] that the underlying DL DL-Litebool can represent atemporal conceptual data models like UML class diagrams and EntityRelationship models.
For example, one maps entities E, denoting sets of abstract objects, into concept names AE .
Then one can represent the subclass relation (ISA) and disjointness between E1 and E2 by AE1  AE2 and AE1  AZAE2 , respectively, and to express that E is covered by E1 , .
.
.
, En one can use AE  AE1  AV AV AV  AEn  and AE1  AE , .
.
.
, AEn  AE .
To capture an n-ary relationship R over entities E1 , .
.
.
, En , one reidZes the relationship.
First, take a concept name AR and n role names R1 , .
.
.
, Rn .
The GCIs AR  (= 1 Ri ) ensure that every instance of AR gives rise to a unique tuple in R; the GCIs aRia  AEi guarantee that only instances of E1 , .
.
.
, En may be connected by R. Participation constraints are captured by cardinality restrictions AEi  (aL k Ria ) and AEi  (a$?
m Ria ).
An attribute P of an entity E, associating values of a concrete domain D to instances of E, is considered as a binary relationship linking E with D: this can be captured by a concept AP and a pair of functional roles P1 and P2 with the GCIs AP  (= 1 P1 ), AP  (= 1 P2 ), aP1a  AE and aP2a  D. In the temporal context, we can express all those constraints using 2+ F (C1  C2 ) instead of the atemporal C1  C2 .
Below we write C1 a C2 for 2+ F (C1  C2 ).
However, even at this basic level, global roles are already required: when reifying relationships, to ensure that every instance of AR represents the same tuple at different times, the roles Ri should be global; similarly, the roles P1 and P2 introduced for an attribute P should be global.
Moreover, concrete domains should be constant and disjoint: this is captured by (D a D) aSS (D a D), for all D, and D a AZDfi , for all distinct concrete domains D, Dfi .
In addition, the temporal constructors of TDL-Litebool are able to represent dynamic aspects of conceptual models.
Timestamping is the basic temporal constraint used to model the temporal behaviour of entities, relationships and attributes [18, 3].
It is implemented either by marking entities, relationships and attributes as snapshot or temporary, or leaving them unmarked.
An object belongs to a snapshot entity either never or at all times, no object may belong to a temporary entity at all times, and there are no temporal assumptions about instances of unmarked entities.
The meaning of timestamps for relationships and attributes is analogous.
In TDL-Litebool timestamps are expressed by the following formulas: (AE a AE ) aSS (AE a AE ) for a snapshot/global entity and (  3+ F AZAE ) for a temporary entity.
Timestamping formulas for a relationship R involve the concept name AR that reidZes the relationship; then we need (AR a AR ) aSS (AR a AR ) for the snapshot/global relationship, and (  3+ F AZAR ) for the temporary relationship.
Attributes are treated similarly.
Finally, TDL-Litebool is capable of capturing dynamic transitions between entities where objects of a source entity, E1 , migrate to a target entity, E2 , with the help of the GCI AE1 a 3F AE2 .
It was observed in [1] that temporal conceptual models with timestamping and evolution constraints can be translated into the DL DLRU S and that reasoning with temporal models with both timestamping and dynamic constraints is undecidable.
The main difference here is that TDL-Litebool  14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  lacks the ability to represent sub-relationships which is an essential part in the undecidability proof.
where A is a concept name and R a role.
Next, we extend this translation to TDL-Litebool -formulas: (C1  C2 )a (C(ai ))a (AZD)a (D)a  4.
TDL-Litebool is E XP S PACE-complete This result is proved by providing a satisdZability preserving translation of TDL-Litebool formulas into the onevariable fragment QT L1 of dZrst-order temporal logic without function symbols and equality.
To dedZne the syntax of QT L1 , dZx one variable x.
Then the formulas of QT L1 are constructed from unary predicates P (x) and P (ai ) (where ai is a constant) and propositional variables p using the standard connectives of dZrst-order logic (with quantidZers ax and ax) and the temporal operators  and U. QT L1 models and the satisfaction relation between formulas and time points are dedZned in the obvious way by modifying the dedZnition of TDL-Litebool interpretations (however, there is no unique name assumption in this case); for details we refer the reader to [14], where the following is also shown: 1  Theorem 1.
The satisdZability problem for QT L -formulas is E XP S PACE-complete.
Now we dedZne a translation AVa  of TDL-Litebool formulas into QT L1 .
Let D be a TDL-Litebool formula.
Denote by role(D) the set of both local and global role names occurring in D, by g-role(D) the set of global role names in D, and by ob(D) the set of object names in D. Let roleAa (D) = {R, Ra | R a role(D)} and g-roleAa (D) = {T, T a | T a g-role(D)}.
Denote by qD the maximum numerical parameter in D. With every object name ai a ob(D) we associate the individual constant ai of QT L1 and with every concept name Ai the unary predicate Ai (x) from the signature of QT L1 .
For each R a roleAa (D), we also introduce qD fresh unary predicates Eq R(x), for 1 a$?
q a$?
qD .
Intuitively, for each n, E1 R(x) and E1 Ra (x) represent the domain and range of R at moment n (i.e., E1 R(x) and E1 Ra (x) are interpreted by the sets of points with at least one R-successor and at least one R-predecessor at moment n, respectively), while Eq R(x) and Eq Ra (x) represent the sets of points with at least q distinct R-successors and at least q distinct R-predecessors at moment n. Additionally, for each pair ai , aj a ob(D) and each role R a roleAa (D), we take a fresh propositional variable Rai aj of QT L1 to encode R(ai , aj ).
By induction on the construction of a TDL-Litebool concept C we dedZne the QT L1 - formula C a : aLa (A)a (AZC)a (C)a  = aL, = A(x), = AZC a (x), = C a (x),  = ax (C1a (x) a C2a (x)), = C a (ai ), (R(ai , aj ))a = Rai aj , = AZD a , (D1 aSS D2 )a = D1a aSS D2a , = D a , (D1 U D2 )a = D1a U D2a ,  where C, C1 , C2 are concepts, R is a role and ai , aj are object names.
The following formulas express some natural properties of the role domains and ranges.
For every R a roleAa (D), we need two QT L1 -sentences: Il(R) = ax E1 R(x) a ax inv(E1 R)(x), qD a1     I'(R) =    ax Eq+1 R(x) a Eq R(x) ,  (2)  q=1  where inv(E1 R) is the predicate E1 Rka if R = Rk and E1 Rk if R = Rka .
Sentence (1) says that if the domain of R is not empty then its range is not empty either.
We also need formulas representing the relation of the Rai aj with the unary predicates for the role domain and range.
For a role R a roleAa (D), let D(R) =  qD   q=1  	 Raaji a Eq R(a) , (3)  i=1 aaob(D) aj1 ,...,ajq aob(D) ji =ji for i=i     Is(R) =  q          Rai aj a inv(R)aj ai ,  (4)  ai ,aj aob(D)  where inv(R)aj ai is the propositional variable Rka aj ai if R = Rk and Rk aj ai if R = Rka .
For every global role T a g-roleAa (D) we need two additional sentences: Il1 (T ) =  qD   q=1  Il2 (T ) =    ax Eq T (x) a Eq T (x) ,    (T ai aj a T ai aj ).
(5) (6)  ai ,aj aob(D)  Finally, we set Da  = Da  aSS       2+ F Il(R)aSSI'(R)aSSD(R)aSSIs(R)  RaroleAa (D)  aSS (aL q R)a = Eq R(x), (C1  C2 )a = C1a (x) aSS C2a (x), (C1 U C2 )a = C1a (x) U C2a (x),  (1)       2+ F Il1 (T ) aSS Il2 (T ) .
T ag-roleAa (D)  Theorem 2.
A TDL-Litebool formula D is satisdZable iff Da  is satisdZable.
14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  Proof.
(a) Let M be a dZrst-order temporal model with a countable domain D and let (M, 0) |= Da  .
We denote the interpretation of unary predicates P and propositional variables p in M at moment n by P M,n and pM,n .
The interpretation of constants a in M is denoted by aM .
Let fi  W0 = aM | a a ob(D) a D. Without loss of generality we may assume that all the aM are distinct.
We are going to construct a TDL-Litebool interpretation I satisfying D that is based on the domain I = W0 aS (D A N).
The interpretations of object names in I are given by their interpretations in M: aI(n) = aM a W0 .
The interpretations AI(n) of concept names A in I are dedZned by taking fi  (7) AI(n) = w a I | (M, n) |= Aa [cp(w)] , where the function cp : I a D is dedZned as follows:  w, if w a W0 , cp(w) = d, if w = (d, n) a D A N.  (8)  We will call w a copy of cp(w).
Now, for each R a role(D) and each n a N, we introduce inductively the interpretation RI(n) .
(For global R this can be done for some dZxed n, say 0, and then copied for all other n.) RI(n) will be dedZned as the union a  Rn,m , RI(n) = m=0  where, for all m aL 0, Rn,m a WRn,m A WRn,m , WRn,m a WRn,m+1 and  a  m=0  WRn,m = I.
We start with WRn,0 = W0 .
The set WRn,m \ WRn,ma1 , for m aL 0, will be denoted by VRn,m ; for convenience, we let WRn,a1 = a, so that VRn,0 = W0 .
First we dedZne the required R-rank rn (R, d) of d a D at moment n: aSS 0, if (M, n) |= AZE1 R[d], aS aS aS a"q, if (M, n) |= Eq R aSS AZEq+1 R[d], rn (R, d) = aS for 1 a$?
q < qD , aS aS aS qD , if (M, n) |= EqD R[d].
It follows from (2) that rn (R, d) is a function and that if d a D and rn (R, d) = q then (M, n) |= Eq R[d] whenever 1 a$?
q fi a$?
q, and (M, n) |= AZEq R[d] for q < q fi a$?
qD .
n (R, w) of w a I at We also dedZne the actual R-rank rm moment n and step m by taking aSS n,m n,m aS a"q, if w a aL q R .I\aL q + 1 R .I, n rm (R, w) = for 0 a$?
q < qD , aS aS n,m qD , if w a aL qD R .I,  fi  where aL q S.I = x a I | {y | (x, y) a S} aL q , for a binary relation S. For the basis of induction we set  fi M Rn,0 = (aM i , aj ) a W0 A W0 | (M, n) |= Rai aj .
(9) By (3) and (4), for both R and Ra (where Raa = R) and all w a W0 , r0n (R, w) a$?
rn (R, cp(w)).
(10)  Suppose that the WRn,m and Rn,m have already been den (R, w) = rn (R, cp(w)), dZned for m aL 0.
If we had rm a for both R and R and all w a WRn,m , then the interpretation Rn,m we need for RI(n) would have been constructed.
However, in general this is not the case because there may be some adefectsa in the sense that the actual rank of some points is smaller than the required rank.
Consider the following two sets of defects in Rn,m : fi  n In,m = w a VRn,m | rm (R, w) < rn (R, cp(w)) , R fi  n w a VRn,m | rm (Ra , w) < rn (Ra , cp(w)) .
In,m Ra = The purpose of, say, In,m is to identify those adefectivea R points w a VRn,m from which precisely rn (R, cp(w)) distinct R-arrows should start (according to M), but some arn (R, w) many arrows exist).
rows are still missing (only rm To acurea these defects, we extend WRn,m to WRn,m+1 and Rn,m to Rn,m+1 according to the following rules: n,m n n (In,m R ) Let w a IR .
Denote q = r (R, d) a rm (R, w) and d = cp(w).
Then (M, n) |= Eq R[d] for some q fi aL q > 0.
By (2), (M, n) |= E1 R[d] and, by (1), there is dfi a D such that (M, n) |= E1 Ra [dfi ].
In this case we take q fresh copies w1fi , .
.
.
, wqfi of dfi , i.e., w1fi , .
.
.
, wqfi a ({dfi } A N) \ WRn,m , add them to WRn,m+1 and add the pairs (w, wifi ), 1 a$?
i a$?
q, to Rn,m+1 .
n,ma n a n a (In,m Ra ) Let w a IRa .
Denote q = r (R , d)arm (R , w) a and d = cp(w).
Then (M, n) |= Eq R [d] for some q fi aL q > 0.
By (2), (M, n) |= E1 Ra [d] and, by (1), there is dfi a D with (M, n) |= E1 R[dfi ].
In this case we take q fresh copies w1fi , .
.
.
, wqfi of dfi , i.e., w1fi , .
.
.
, wqfi a ({dfi } A N) \ WRn,m , add them to WRn,m+1 and add the pairs (wifi , w), 1 a$?
i a$?
q, to Rn,m+1 .
14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  (IS) Finally, if all defects for R in WRn,m have already been cured we take, for every d a D, a fresh copy (d, l) a ({d} A N) \ WRn,m with minimal l and add it to WRn,m+1 .
It be clear that the rule (IS) guarantees that ashouldn,m W = I.
Now we observe the following imR m=0 portant property of the construction: for all m0 aL 0 and w a VRn,m0 , aSS 0, if m < m0 , aS aS aS a" q, if m = m0 , for some n (11) (R, w) = rm aS q a$?
rn (R, cp(w)), aS aS aS n r (R, cp(w)), if m > m0 .
To prove this property, consider all possible cases.
If m < m0 then w has not been added to WRn,m yet, i.e., n (R, w) = 0.
If m = m0 and w a / WRn,m , and so rm n m0 = 0 then rm (R, w) a$?
rn (R, cp(w)) follows from (10).
If m = m0 and m0 > 0 then w was added at step m0 either to cure a defect of some point wfi a WRn,m0 a1 or n (R, w) = 0, by (IS).
In the latter case we clearly have rm n n and so rm (R, w) a$?
r (R, cp(w)).
In the former case this n,m0 a1 or means that either (wfi , w) a Rn,m0 and wfi a IR n,m0 a1 fi n,m0 fi and w a IRa .
In the dZrst case (w, w ) a R (M, n) |= E1 Ra [cp(w)].
(12)  Since fresh witnesses w are picked up every time the rule n,m0 a1 ) is applied and those witnesses satisfy (12), (IR n n (R, w) = 0, rm (Ra , w) = 1 and we obtain rm 0 0 n a r (R , cp(w)) aL 1.
The second case is similar.
If m = m0 + 1 then all defects of w are cured at step m0 + 1 0 0 ) and (In,m by applying the rules (In,m R Ra ).
Therefore, n n rm0 +1 (R, w) = r (R, cp(w)).
If m > m0 + 1 then (11) follows from the observation that new arrows involving w can only be added at step m0 + 1, that is, for all m aL 0, Rn,m+1 \ Rn,m  n (R, w) = w a VRn,m0 .
Then, by (11), we have q a$?
rm n r (R, cp(w)), for all m > m0 .
So, by the dedZnition of rn (R, cp(w)) and (2), we have (M, n) |= Eq R[cp(w)].
Now we show by induction on the construction of concepts C in D that, for all n a N and w a I,  (M, n) |= C a [cp(w)]  (M, n) |= D a  VRn,m+1 A VRn,m .
(M, n) |= Eq R[cp(w)] iff w a aL q RI(n) .I.
(16)  For D = C1  C2 and D = C(ai ), this follows from (15).
I(n) For D = Rk (ai , aj ), (aIi , aIj ) a Rk iff, by (13), (aIi , aIj ) a Rkn,0 iff, by (9), (M, n) |= Rk ai aj .
The case D = Rka (ai , aj ) is similar.
The induction step for the Booleans (D = AZD1 and D = D1 aSS D2 ) and the temporal operators (D = D1 and D = D1 U D2 ) follows from the induction hypothesis.
Thus, we obtain (I, 0) |= D. The implication (a) is straightforward.
The translation Da  of D is obviously too lengthy to provide us with reasonably low complexity results.
However, it follows from the proof above that in fact a lot of information in this translation is redundant and can be safely omitted.
We dedZne now a more concise translation of D into QT L1 .
For R a roleAa (D), let QR D be the set of natural numbers containing 1 and all the numerical parameters q for which aL q R occurs in D. Then we set D = Da     aSS      2+ F Il(R) aSS I' (R) aSS D (R) aSS Is(R)  RaroleAa (D)        2+ F Il1 (T ) aSS Il2 (T ) ,  T ag-roleAa (D)  (13)  Finally, recall that if R is global then, by (5) and (6), the above inductive procedure does not depend on n and RI(n) = RI(m) , for all n, m a N. It follows that, for all R a roleAa (D), 1 a$?
q a$?
qD , n a N and w a I,  (I, n) |= D.  iff  aSS aS  (15)  The basis of induction is trivial for B = aL and follows from (7) if B = Ai and (14) if B = aL q R. The induction step for the Booleans (C = AZC1 and C = C1  C2 ) and the temporal operators (C = C1 and C = C1 U C2 ) follows from the induction hypothesis.
Finally, we show that for each subformula D of D,  a  VRn,m A VRn,m+1  w a C I(n) .
iff  where Il(R), Is(R) and Il2 (T ) are as before (see (1), (4) and (6), respectively),     I'  (R) = ax Eq R(x) a Eq R(x) , (17)  (14)  Indeed, if (M, n) |= Eq R[cp(w)] then, by dedZnition, rn (R, cp(w)) aL q.
Let w a VRn,m0 .
Then, by (11), n (R, w) = rn (R, cp(w)) aL q, for all m > m0 .
It rm n (R, w) and RI(n) that follows from the dedZnition of rm I(n) .I.
Conversely, let w a aL q RI(n) .I and w a aL qR  14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007   q,q  aQR D , q >q  q >q >q for no q  aQR D   D  (R) =        qaQR D  Il1 (T ) =  q    	 Raaji a Eq R(a) , (18)  aaob(D) i=1 aj1 ,...,ajq aob(D) ji =ji for i=i     qaQT D    ax Eq T (x) a Eq T (x) .
(19)  Corollary 3.
A TDL-Litebool formula D is satisdZable iff the QT L1 -sentence D is satisdZable.
Proof.
Follows from the fact that Da  is satisdZable iff D is satisdZable.
Indeed, if (M, 0) |= Da  then (M, 0) |= D .
Conversely, if (M, 0) |= D then one can construct a new model Mfi based on the same domain D as M by taking   aV AM ,n = AM,n , for all concept names A and n a N;   aV Eq RM ,n = Eq RM,n , for R a roleAa (D), 1 a$?
q a$?
qD and n a N, where q fi is the maximum number from QR D with q fi a$?
q; aV Rai aj to be true in Mfi at n iff (M, n) |= Rai aj , for all R a roleAa (D), all ai , aj a ob(D) and all n a N;   aV aM = aM , for all a a ob(D).
It follows immediately from the dedZnition that we have (Mfi , 0) |= Da  .
(For example, (Mfi , 0) |= Da follows from the fact that for every concept (aL q R) from D we have  Eq RM ,n = Eq RM,n , for all n a N.) This observation makes it possible to prove the following result: Theorem 4.
The satisdZability problem for TDL-Litebool is E XP S PACE-complete.
Proof.
As we know, satisdZability for QT L1 is E XP S PACEcomplete.
However, we cannot use this result directly because the size of D is exponential in the number of object names (in fact, double exponential, if qD is given in binary): |D | a$?
const AV |D| + |ob(D)|qD +1 .
Instead, we use the E XP S PACE algorithm presented in [14, Theorem 11.30] (see also [16]) which, given a QT L1 -sentence D, decides whether D is satisdZable or not by guessing an ultimately periodical quasimodel such that the lengths of its predZx and its period are bounded by some numbers l1 and l2 , respectively.
In general, both l1 and l2 are double exponential in the length |D| of D. Hence, the algorithm requires single exponential space to write down the two numbers.
The algorithm also requires exponential space to store at most 3 state candidates.
Clearly, every realisable state candidate C for D is uniquely determined by the following parameters: aV the set of propositional variables and the set of closed subformulas of the form ax D(x) that belong to the types of C;  by p1 (|D|), where p1 is a polynomial.
Next, for each type for D , the number of open subformulas that belong to this type is bounded by |D|, and the number of types in every state candidate is bounded by 2|D| .
Therefore, the atypea part of a state candidate can be stored in space bounded by 2|D| AV |D|, and so the overall space required to store a state candidate for D is bounded by 2p2 (|D|) , for some polynomial p2 .
Now, [14, Theorem 11.26] provides more precise upper bounds on l1 and l2 : l1 a$?
(D ) and l2 a$?
kD AV (D ) AV 2 (D ) + (D ), where (D ) is the number of distinct state candidates, (D ) the number of distinct types, and kD the number of aeventualities,a i.e., subformulas of D of the form D1 U D2 .
It p2 (|D|) follows from the above argument that (D ) a$?
22 and (D ) a$?
2p1 (|D|) AV 2|D| (every type for D is uniquely determined by its apropositionala part and the subset of open subformulas that belong to it).
Finally, the number kD of aeventualitiesa is bounded by |D|+2AV|roleAa (D)|.
This shows that although the length of D is (double) exponential in |D|, the numbers l1 and l2 are only double exponential in |D| (not triple exponential as one would expect).
Therefore, the algorithm of [14, Theorem 11.30] runs in E XP S PACE.
The E XP S PACE lower bound follows from the fact that there is a satisdZability preserving polynomial translation from QT L1 to TDL-Litebool .
First, by introducing new unary predicates one can transform, in a satisdZability preserving way, each QT L1 -formula into a QT L1 -sentence containing neither ax nor nested ax.
Such a sentence D can be translated into TDL-Litebool by dZrst associating with every unary predicate P (x) a concept name (P (x))aA = AP .
For every subformula D of D with free x, we obtain a concept D aA by distributing the translation AVaA over the connectives , U, AZ and aSS, e.g., (D1 aSS D2 )aA = D1aA  D2aA .
For each subformula of the form ax D, set (ax D)aA = (  D aA ).
Now, for QT L1 -sentences, the translation AVaA again distributes over the connectives , U, AZ and aSS.
It is easily seen that D is satisdZable iff DaA is satisdZable.
The same lower bound follows also from Theorem 10 below.
5.
TDL-Litekrom is PS PACE-complete Consider now the Krom fragment TDL-Litekrom of TDL-Litebool with atomic formulas of the form D1  D2 ,  aV for every type in C, the set of all open subformulas that belong to this type.
It is easy to compute that D contains |roleAa (D)| AV |ob(D)|2 propositional variables and |D|+3AV|roleAa (D)| closed subformulas of the form ax D(x).
Therefore, the apropositionala part of a state candidate can be stored in space bounded  AZD1  D2 , D1  AZD2 , R(ai , aj ), D(ai ),  where concepts D1 , D2 are formed from basic concepts B by means of  only:  14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  D  ::=  B  |  D.
(20)  We can still apply all temporal operators and the Booleans to formulas.
(Note that spatio-temporal logics of a similar kind were considered in [15] and [9].
Note also that satisdZability for the underlying DL DL-Litekrom is NL OG S PACEcomplete [2].)
It is readily seen that the AV -translations of TDL-Litekrom formulas can be transformed in a satisdZability preserving way (by introducing abbreviations for nested  operators) to formulas of the following fragment QT L1krom of QT L1 : Q(x) L(x) D  ::= Pi (x) | AZPi (x), ::= Q(x) | Q(x),   | L(aj ) | ::= ax L1 (x) a" L2 (x) AZD | D1 aSS D2 | D | D1 U D2 ,  where the Pi are unary predicate symbols and the aj are constants.
Predicates Pi (x) and their negations AZPi (x) will be called literals; literals Q(x) and -predZxed literals will be called temporal literals.
In this section we establish (using the quasimodel technique from [14]) a PS PACE upper bound for satisdZability of QT L1krom formulas from which we obtain the following result (using Lemma 8 and an argument similar to the proof of Theorem 4): Theorem 5.
The satisdZability problem for TDL-Litekrom formulas is PS PACE-complete.
We denote by AZL(x) E the formula equivalent to AZL(x) in the above restricted syntax, e.g., AZE Pi (x) is AZPi (x) and AZE AZPi (x) is Pi (x).
For every formula of the form Q(x), we reserve a unary predicate Qfi (x) called the surrogate of Q(x).
Note that we introduce surrogates only for temporal literals (unlike astandarda quasimodels, here we do not need to explicitly introduce surrogates for other temporal subformulas).
Given a formula D, denote by D the result of replacing all subformulas of D of the form Q(x) by their surrogates.
For a QT L1krom sentence D, let cl D be the union of sub0 D, ILD and the IaD , for a a con D, where sub0 D is the set of closed subformulas of D, con D the set of all constants in D, and fi ID = Pi (x), AZPi (x), Pi (x), AZPi (x) |  Pi (x) a predicate in D , fi  ILD = ax (L1 (x) a" L2 (x)) | L1 (x), L2 (x) a ID , fi  IaD = L(a) | L(x) a ID , for a a con D. A state candidate C for D is any subset of cl D satisfying the properties  (qs0K ) DC = DaCaSILD D is satisdZable; (qs1K ) for every D a ILD ,  if DC |= D then D a C;  (qs0c ) for every L(a) a IaD ,  AZL(a) E a C iff L(a) a / C;  (qs1c )  for every L1 (a), L2 (a) a IaD , E 1 (x) a" AZL E 2 (x)) 	a C; if L1 (a), L2 (a) a C then ax (AZL  (qsAZ ) for every AZD a sub0 D,  AZD a C iff D a / C;  aSS  (qs ) for every D1 aSS D2 a sub0 D, D1 aSS D2 a C iff D1 , D2 a C. Let q be a map associating with every w a N a state candidate q(w) for D. We call q a quasimodel for D if the following conditions hold: (qm0 ) D a q(w0 ), for some w0 aL 0; (qm1 ) for every ax (Q1 (x) a" Q2 (x)) a ILD , ax (Q1 (x) a" Q2 (x)) a q(w) iff ax (Q1 (x) a" Q2 (x)) a q(w + 1); (qm2 ) for every Q(a) a IaD , Q(a) a q(w) iff Q(a) a q(w + 1); (qm3 ) for every D a sub0 D, D a q(w) iff D a q(w + 1); (qm4 ) for every D1 U D2 a sub0 D, D1 U D2 a q(w) iff there is k > 0 such that D2 a q(w + k) and D1 a q(w + n), for all 0 < n < k. Lemma 6.
A QT L1krom sentence D is satisdZable iff there is a quasimodel for D. Proof.
Suppose (M, w0 ) |= D. Then fi  q(w) = D a cl D | (M, w) |= D dedZnes a quasimodel for D. Conversely, suppose that q is a quasimodel for D. Claim 7.
If {L1 (x), .
.
.
, Lk (x)} a ID and C is a state candidate for D, then   (21) DC aSS ax L1 (x) aSS AV AV AV aSS Lk (x) is satisdZable iff there are no 1 a$?
i, j a$?
k such that E j (x)) a C. ax (AZL E i (x) a" AZL Proof of claim.
As formula (21) is a conjunction of the form ax D1 (x) aSS ax D2 (x), it is satisdZable iff the formula D1 [a] aSS D2 [a] is satisdZable, where a is a constant symbol.
Now, if D1 [a] aSS D2 [a] is satisdZable then there are no i, j E j (x)) a C. Conversely, suppose such that ax (AZL E i (x) a" AZL that there are no such i, j, but D1 [a] aSS D2 [a] is not satisdZable.
Then D1 [a] |= AZD2 [a].
By (qs0K ), D1 [a] is satisdZable.
Moreover as it is a 2-CNF, D1 [a] |= AZL1 [a] a" AV AV AV a" AZLk [a] implies that there are i, j with D1 [a] |= AZLi [a] a" AZLj [a].
It follows from (qs1K ) that AZLi [a] a" AZLj [a] is a conjunct of D1 [a], contrary to our assumption.
14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  Say that t a ID is a type for a state candidate C if aV L(x) a t iff AZL(x) E a / t, for every L(x) a ID ; aV if L1 (x), L2 (x) a t then ax (AZL E 1 (x) a" AZL E 2 (x)) 	a C, for every L1 (x), L2 (x) a ID .
 By Claim 7, if t is a type for C then DC aSSax t is satisdZable.
Denote by Tw the set of all types for q(w).
A pair of types (t, tfi ) is called suitable if Q(x) a t iff Q(x) a tfi .
Then the following two properties hold: (succ) for each t a Tw there is tfi a Tw+1 such that (t, tfi ) is a suitable pair; (pred) for each tfi a Tw+1 there is t a Tw such that (t, tfi ) is a suitable pair.
To show (succ), suppose that t a Tw , but there is no tfi a Tw+1 such that (t, tfi ) is a suitable pair.
Let Q1 (x), .
.
.
, Qk (x) be all temporal literals of the form Q(x) in t. Then   Dq(w+1) aSS ax Q1 (x) aSS AV AV AV aSS Qk (x) is not satisdZable.
By Claim 7, there are i, j such that ax (AZQ E i (x) a" AZQ E j (x)) a q(w + 1).
Then, by (qm1 ), 7, ax (AZE Qi (x) a" AZE Qj (x))  a q(w), and so, by Claim  the formula Dq(w) aSS ax Q1 (x) aSS AV AV AV aSS Qk (x) is not satisdZable, contrary to our assumption.
Property (pred) is proved analogously.
Now we dedZne a set R of arunsa through q by taking all  r a waN Tw such that (r(w), r(w + 1)) is a suitable pair for every w. By (succ) and (pred), for every w and every type t a Tw there is r a R such that r(w) = t. For a a con D and w a N, let fi  tw a = L(x) a ID | L(a) a q(w) .
It follows from (qs0c ) and (qs1c ) that the tw a are types.
Morew+1 ) is a suitable pair for every w. over, by (qm2 ), (tw a , ta , for every w. Thus, there is ra a R with ra (w) = tw  a  M,w Consider the model M = R, aM ,... , 0 , .
.
.
, P0 fi  M,w = r a R | Pi a r(w) .
where aM j = raj and Pi It is readily checked that (M, w0 ) |= D. Lemma 8.
A QT L1krom -sentence D is satisdZable iff there is an ultimately periodical quasimodel q for D such that q(l1 + w) = q(l1 + l2 + w), for every w a N and some l1 , l2 with l1 a$?
(D) and l2 a$?
kD AV (D) + (D), where (D) is the number of distinct state candidates for D and kD the number of eventualities in D.  Theorem 9.
The satisdZability problem for QT L1krom is PS PACE-complete.
Proof.
The upper bound follows from Lemma 8 using an algorithm that dZrst guesses l1 and l2 and then tries to construct an ultimately periodical quasimodel (see [14, Theorem 11.30]).
The lower bound follows from PS PACEhardness of LT L (which is a fragment of QT L1krom ).
6.
TDL-Litehorn is E XP S PACE-complete Consider the Horn fragment TDL-Litehorn TDL-Litebool whose atomic formulas are of the form D1  AV AV AV  Dk  D,  D(ai ),  of  R(ai , aj ),  where D, D1 , .
.
.
, Dk are formed from basic concepts B by means of  only as in (20).
Again we can apply all temporal operators and the Booleans to formulas.
(Note that satisdZability for the underlying DL DL-Litehorn is P-complete [2].)
Theorem 10.
The satisdZability problem for TDL-Litehorn is E XP S PACE-complete.
Proof.
The upper bound follows from Theorem 4.
The lower one is proved by reduction of the N A 2n corridor tiling problem that is known to be E XP S PACE-complete (for details see, e.g., [19, 16]): given an instance (T, D0 , n), where T is a dZnite set of tile types, D0 a T is a tile type, and n a N is given in unary, decide whether T tiles the N A 2n corridor {(x, y) | x a N, 0 a$?
y < 2n } in such a way that D0 is placed at (0, 0) and the top and bottom sides of the corridor are of some dZxed colour, say, white.
We construct a TDL-Litehorn formula DT,D0 ,n such that (i) its length is polynomial in |T | and n, and (ii) T tiles the N A 2n corridor (with D0 on (0, 0) and with white top and bottom sides) iff DT,D0 ,n is satisdZable.
The formula DT,D0 ,n will be constructed in a number of steps.
To explain the meaning of its subformulas, let us dZx some interpretation I with some domain I.
Let SD , for D a T , be role names and suppose that the following formula holds in I at 0:       2+ 2+   aSD aSS F F aSD  aSD   aL .
(22) D =D   D aT  Then there is a uniquely determined sequence D0 , D1 , .
.
.
of I(m) tile types such that aSDm = I and (aSDam )I(m) 	= a, for every m a N; see Fig.
1.
Suppose also that the following formulas hold in I at 0: n     a 2+  Qj  N , (23) aS D F  Proof.
Similar to the proof of [14, Theorem 11.26].
14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  D aT     D aT  j=1    a 2+ F aSD  N  aL ,  (24)    N .
2+ F N   (25)  .
D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 D11 D12 ...  no aSDa , for all D  d11  N and no aSDa , for all D  d10 d9  WDi  d8  aSDai  d7 d6  Qj , for some 1 a$?
j a$?
n  d5  n  d4  j=1  Qj  d3 d2 d1 d0  .
0  1  2  3  4  5  6  7  8  9    10 11 12 ...  N A 22 corridor  Figure 1.
A model I satisfying DT,D0 ,2 .
(Formulas of the form D1  AV AV AV  Dk  D1fi  AV AV AV  Djfi are just syntactic sugar.)
It follows that at every moment of time m one can select a point dm a (aSDam )I(m) such that dm a N I(m+1) and dm a (Qn AV AV AVQ1 )I(m) .
The former implies, by (24) and (25), that the dm are all distinct, and the latter will be used to encode a 2n counter on dm .
The formulas encoding the 2n counter on elements of the domain are more or less standard (taking into account that Qi stands for the i-th bit being 0 and Qi for the i-th bit being 1):     2+ F Qi  Qi  aL , 1a$?ia$?n     However, on every dm , the counter is initialised at moment m and, therefore, is dedZned correctly on it.
Let B and the WD , for D a T , be concept names.
Then the following formulas ensure correctness of tiling: (  aSD0 ),   D aT down(D )=white     D,D  aT up(D )=down(D  )      Qi 2+ F Qi  Qj  Qja1  AV AV AV  Q1    1a$?j<ia$?n Qi , aSS 2+ F Qi  Qj  Qja1  AV AV AV  Q1       Qj 2+ F Qj  Qja1  AV AV AV  Q1    1a$?ja$?n   Q  AV AV AV  Q  Q Q aSS 2+ j ja1 1 j .
F     D,D  aT right(D )=left(D  )     D aT n      It follows, in particular, that if the counter is ainitialiseda on some d, i.e., d a (Qn  AV AV AV  Q1 )I(k) , for some k a N, then aV d a (Qn  AV AV AV  Q1 )I(j) iff j aA k (mod 2n ); aV there is 1 a$?
i a$?
n such that d a (mod 2n ).
I(k)  I(k)  I(j) Qi  iff j 	aA k  Note also that if d a / Qi aS Qi , for some 1 a$?
i a$?
n and k a N, then the counter may not behave properly on d.  (aSDa0  D aT i=1  2+ F (B  (26)   B) aSS n   2+ F (B  j=1    B),  Qj  aSD  aL),  (27) (28)     2+ F aSD  aSD   aL ,  (29)   a  WD  , 2+ F aSD   (30)  n  2+ F WD   j=1   Qj  aSD  aL , (31)    WD .
2+ F WD  Qi   (32)  Indeed, (26) ensures that D0 is placed at (0, 0) and (27) that d0 a B I(k) , for all k a N. It follows that we have a amaster countera (distinguished by the concept B), which is initialised on d0 at 0 and has value 0 at every moment of time, when a tile for the bottom row is being selected.
Then (28) guarantees that the bottom of the corridor is coloured white.
14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  By (29), the adjacent colours of tiles in the same column match.
It also follows from (29) that the top of the corridor is also white: the up-colour of a tile in the top row matches the down-colour of the tile at the bottom of the next column, which is white by (28).
To make the colours of adjacent tiles in the same row match (such tiles are 2n moments of time apart) we use the 2n counters.
Take dm a (aSDam )I(m) .
I(m+1) , for every tile D fi that cannot be By (30), dm a WD  put to the right of Dm in a correct tiling.
As the counter is initialised on dm at moment m, it has value 1 at m + 1.
I(m+2) , for every tile D fi Then, by (32), we have dm a WD  that cannot be put to the right of Dm .
The same argument iteratively applies until the moment m + 2n a 1 and thereI(m+2n ) , for every tile D fi that cannot fore, we have dm a WD  be put to the right of Dm .
But then, by (31), no such tile D fi can be selected as Dm+2n .
It follows that if DT,D0 ,n is satisdZable then T tiles the N A 2n -corridor.
The converse implication is clear.
Note that DT,D0 ,n does not use any number restriction.
7.
Temporalised EL is undecidable In contrast to the positive results above we now show that even a rather weak temporalisation T LEL of EL with global roles and GCIs is undecidable.
To prove this we do not need ABox assertions.
Moreover, 3F will be the only temporal concept constructor, and 2+ F the only operator applied to formulas.
Besides, no local roles are required.
Formally, T LEL concepts C are dedZned as follows: C ::=  | Ai | C1  C2 | aTi .C | 3F C, where the Ti are global role names.
A T LEL GCI is a formula of the form 2+ F (C1  C2 ) (often written as C1 a C2 ), where C1 , C2 are T LEL concepts.
Observe that every set of T LEL GCIs is satisdZable: they are satisdZed in the model where all concepts and roles are interpreted by the whole domain at every time point.
In fact, the interesting reasoning problem for T LEL is whether a GCI is a logical consequence of a set of GCIs.
Without the temporal operators, this problem is known to be decidable in polynomial time [5].
We are now going to show that it is undecidable for T LEL .
Theorem 11.
It is undecidable whether a T LEL GCI is a consequence of a dZnite set of T LEL GCIs.
Proof.
The proof is by reduction of the following version of the undecidable satisdZability problem for temporalised ALC.
DedZne the concepts C of T LALC as follows: C ::=  | aL | Ai | AZC | C1  C2 | C1  C2 | aTi .C |  3F C.  We introduce , aL and  as primitive connectives because this will be useful in the reduction below.
A T LALC GCI is of the form 2+ F (C1  C2 ), where C1 , C2 are T LALC concepts.
Say that an ALC concept C is satisdZable relative to a set of GCIs if there exists a model satisfying C and the set of GCIs.
The following is proved in [14]: Theorem 12.
SatisdZability of ALC concepts relative to sets of T LALC GCIs is undecidable.
Suppose now that a set of T LALC GCIs and a concept in ALC are given.
First, we perform a number of satisdZability preserving operations.
(a) Ensure that negation AZ occurs in front of concept names only: for every concept AZC with complex C, introduce a fresh concept name A, replace AZC with AZA, and add A a C and C a A to the set of GCIs.
The resulting concept is satisdZable relative to the resulting set of GCIs if the original one was satisdZable relative to the original set of GCIs.
(b) Ensure that AZ does not occur at all in the set of GCIs nor in the concept: for every concept AZA, introduce a fresh concept name A, replace every occurrence of AZA with A, and add  a A  A and A  A a aL to the set of GCIs.
(c) Ensure that disjunction  does not occur at all in the set of GCIs nor in the concept: dZrst, modulo introduction of new concept names, we may assume that  does not occur in the concept and that the only occurrences of  in the set of GCIs are of the form (i) AB a C and (ii) C a AB, where A and B are concept names and C is disjunction free.
Denote the resulting set of GCIs by T and the concept by C0 .
Now we replace in T the former kind of GCI with A a C and B a C. The latter one is replaced with four GCIs C a aR.
(M  3F X  3F Y ), aR.
(M  3F (X  3F Y )) a A, aR.
(M  3F (Y  3F X)) a A, aR.
(M  3F (X  Y )) a B, where R is a fresh global role name and X, Y , M are fresh concept names (for each concept inclusion C a A  B).
Denote by T fi the new set of GCIs.
Clearly, if C0 is satisdZable relative to T fi , then C0 is satisdZable relative to T .
Conversely, suppose that C0 is satisdZable relative to T .
We may assume that the witness interpretation has an indZnite domain I.
Consider a GCI C a A  B.
Interpret R in such a way that RI(n) is a forest of indZnite outdegree, i.e., RI(n) is acyclic, for each w a I there exist indZnitely many wfi a I such that (w, wfi ) a RI(n) , and for each wfi there exists at most one w with (w, wfi ) a RI(n) .
Now interpret M by choosing for each w a C I(n) exactly one node wfi a M I(n) with (w, wfi ) a RI(n) .
This can be done in such a way that M I(n) aS M I(m) = a for n 	= m. Finally, interpret X and  14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007  Y as follows: suppose (w, wfi ) a RI(m) , w a C I(m) , and wfi a M I(m) , for some m. Then w a (A  B)I(m) .
If w a B I(m) , then include wfi in X I(m+1) and Y I(m+1) .
If w a AI(m) \ B I(m) , then include wfi in X I(m+1) and Y I(m+2) .
It can be shown that the extended interpretation I satisdZes T fi and C0 .
Observe that T fi and the concept C0 only contain the operators , a, , aL, and 3F .
We now reduce satisdZability of C0 relative to T fi to subsumption in T LEL .
Introduce a fresh concept name L, replace every occurrence of aL with L and extend T fi with aT.L a L, for every role T from T fi and C0 , and 3F L a L. Then C0 is satisdZable relative to T fi iff C0fi a L does not follow from the new set T fifi of GCIs, for the new concept C0fi : clearly, if C0 is satisdZable relative to T fi , then we obtain an interpretation I satisfying fiI(0) 	= a. Conversely, if T fifi in which LI(0) = a but C0 C0 is not satisdZable relative to T fi , then for every interprefiI(0) tation I with w a C0 , there exists a wfi reachable from w following a path along global roles T I(0) (from T fi and C0 ) such that wfi a LI(m) .
But then, by the new GCIs, w a LI(0) .
8.
Conclusion We have shown that temporalisations of various dialects of DL-Lite are decidable with global roles and GCIs, while temporalisations of EL are not.
The crucial difference between the two languages is the absence of aqualidZeda quantidZcation in DL-Lite.
As there is no constructor aR.C in DL-Lite, we can actually encode global roles using temporal constraints on unary predicates.
Although we obtain unintended models where roles are not global, the language is too aweaka to notice this.
Note, however, that these decidability results can easily be ruined by role inclusions.
We have also seen that, in contrast to qualidZed quantidZcation, the presence of Boolean operators does not have any impact on the decision problem: although EL does not contain  and AZ, its temporal dimension together with GCIs is perfectly capable of reintroducing them.
Acknowledgements.
The work on this paper was partially supported by the U.K. EPSRC grants GR/S61966, GR/S63182, GR/S63175, GR/S61973 and Tones, KnowledgeWeb and InterOp projects.
We would like to thank the anonymous referees for their comments.
References [1] A. Artale.
Reasoning on temporal conceptual schemas with dynamic constraints.
In Proc.
of TIME 2004, pages 79a86.
IEEE Computer Society, 2004.
[2] A. Artale, D. Calvanese, R. Kontchakov, and M. Zakharyaschev.
DL-Lite in the light of dZrst-order logic.
2007.
Proc.
of AAAI.
[3] A. Artale, C.Parent, and S. Spaccapietra.
Modeling the evolution of objects in temporal information systems.
In Proc.
of FoIKS-06, volume 3861 of LNCS, pages 22a42.
Springer, 2006.
[4] A. Artale and E. Franconi.
Temporal description logics.
In M. Fisher, D. Gabbay, and L. Vila, editors, Handbook of Time and Temporal Reasoning in ArtidZcial Intelligence, pages 375a388.
2005.
[5] F. Baader, S. Brandt, and C. Lutz.
Pushing the EL envelope.
In Proc.
of IJCAI 2005, pages 364a369, 2005.
[6] F. Baader, R. KuEsters, and F. Wolter.
Extensions to description logics.
In Description Logic Handbook, pages 219a261.
Cambridge University Press, 2003.
[7] F. Baader, C. Lutz, and B. Suntisrivaraporn.
Is tractable reasoning in extensions of the description logic EL useful in practice?
In Proc.
of the Methods for Modalities Workshop (M4M 2005), 2005.
[8] F. Baader, C. Lutz, and B. Suntisrivaraporn.
CELaa polynomial-time reasoner for life science ontologies.
In Proc.
of IJCARa06, volume 4130 of LNAI, pages 287a291.
Springer, 2006.
[9] P. Balbiani and J.-F. Condotta.
Computational complexity of propositional linear temporal logics based on qualitative spatial or temporal reasoning.
In Proc.
of FroCoS 2002, volume 2309 of LNCS, pages 162a176.
Springer, 2002.
[10] D. Calvanese, G. De Giacomo, D. Lembo, M. Lenzerini, and R. Rosati.
DL-Lite: Tractable description logics for ontologies.
In Proc.
of AAAI 2005, pages 602a607, 2005.
[11] D. Calvanese, G. De Giacomo, D. Lembo, M. Lenzerini, and R. Rosati.
Data complexity of query answering in description logics.
In Proc.
of KR 2006, pages 260a270, 2006.
[12] A. Degtyarev, M. Fisher, and B. Konev.
Monodic temporal resolution.
ACM Transactions in Computational Logic, 7:108a150, 2006.
[13] D. Gabbay, I. Hodkinson, and M. Reynolds.
Temporal Logic: Mathematical Foundations and Computational Aspects, Volume 1.
Oxford University Press, 1994.
[14] D. Gabbay, A. Kurucz, F. Wolter, and M. Zakharyaschev.
Many-Dimensional Modal Logics: Theory and Applications.
Elsevier, 2003.
[15] D. Gabelaia, R. Kontchakov, A. Kurucz, F. Wolter, and M. Zakharyaschev.
Combining spatial and temporal logics: expressiveness vs. complexity.
JAIR, 23:167a243, 2005.
[16] I. Hodkinson, R. Kontchakov, A. Kurucz, F. Wolter, and M. Zakharyaschev.
On the computational complexity of decidable fragments of dZrst-order linear temporal logics.
In M. Reynolds and A. Sattar, editors, Proc.
of TIME-ICTL 2003, pages 91a98.
IEEE Computer Society, 2003.
[17] I. Hodkinson, F. Wolter, and M. Zakharyaschev.
Decidable fragments of dZrst-order temporal logics.
Annals of Pure and Applied Logic, 106:85a134, 2000.
[18] C. S. Jensen, J. Clifford, R. Elmasri, S. K. Gadia, P. Hayes, and S. Jajodia.
The consensus glossary of temporal database concepts.
SIGMOD Record, 23(1):52a64, 1994.
[19] P. van Emde Boas.
The convenience of tilings.
In A. Sorbi, editor, Complexity, Logic and Recursion Theory, volume 187 of Lecture Notes in Pure and Applied Mathematics, pages 331a363.
Marcel Dekker Inc., 1997.
14th International Symposium on Temporal Representation and Reasoning (TIME'07 0-7695-2836-8/07 $20.00 AS 2007