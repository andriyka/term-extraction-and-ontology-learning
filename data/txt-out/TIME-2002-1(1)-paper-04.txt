Representation and reasoning with disjunctive temporal constraints TRACK 1: Temporal representation and reasoning in AI TOPIC: Temporal constraint reasoning MarAa Isabel Alfonso Galipienso Depto.
Ciencia de la ComputaciAln e Inteligencia Artificial Universidad de Alicante(Spain) e-mail:eli@dccia.ua.es Federico Barber SanchAs Depto.
de Sistemas InformAAticos y ComputaciAln Universidad PolitAScnica de Valencia(Spain) e-mail:fbarber@dsic.upv.es February 21, 2002 Abstract The purpose of this paper is to show the expressiveness provided by the use of a Labelled TCSP model in order to specify and reason about disjunctive temporal constraints.
We use a network based representation.
The reasoning algorithms allows us to manage complex temporal constraints, both in assertion and query processes.
It allows disjunctive assertions, conjunctive and hypothetical queries, and one-to-many constraints.
Additionally, a labelled point-based metric model becomes an adequate support for reasoning on costs associated to the use of resources.
They can be managed by an algorithm that integrates effectively a CSP (Constraint Satisfaction Problem) process into a closure process.
The result is a new parameterizable process that can be applied to practical and real problems.
1  Introduction  A Temporal Constraint Satisfaction Problem (TCSP) is a particular class of CSP problem where variables represent times and constraints represent sets of allowed temporal relations between them.
It requires a temporal model where the goals are to reason about what consequences(T) follow from a set of temporal constraints, 1  "Temporal-constraints j= T?
", or to determine whether a set of temporal constraints is satisfiable, with no assumptions about properties of temporal facts.
A temporal reasoning model is made up by a temporal algebra which determines the expressiveness of the temporal model, and by temporal reasoning algorithms.
Several temporal models have been defined in the literature, which can be considered under two main features [7].
The first one is the representation expressiveness: aWhat temporal information can the model represent as constraints among temporal entities?a.
The second one is related to the temporal reasoning algorithms (ahow to reason on a given type of temporal constraints to obtain what of them can be truea) and their computational complexity.
A clear trade-off between these features exists.
The management of disjunctive constraints allows a higher level of expressiveness, but it implies a higher computational cost [14], [8].
The main classical disjunctive temporal models are [11] point-based,intervalbased, and metric (quantitative) point-based models.
Some efforts have been made to integrate qualitative and quantitative temporal information, but the full integration of qualitative and quantitative information requires managing qualitative and quantitative disjunctive constraints among time points, intervals and durations.
Moreover, some application domains (scheduling, causal reasoning, etc.)
need to manage disjunctive assertions of temporal constraints, conjunctive and hypothetical queries, one-to-many constraints, etc.
This gives rise to the need to manage non-binary constraints.
In order to overcome the limitations outlined above, new models are investigated.
In [5] it has been proposed a temporal model (TCSP), based on a labelled point-based disjunctive metric temporal algebra, which gives rise to a labelledTCN (LTCN).
This model is based on constraint-associated labels so that constraints can be related among them without using hyper-arcs.
In this paper, we intend to show the high expressiveness provided by the Labelled TCSP model, which allows us to specify and reason about a great variety of constraints, such as disjunctive assertions: conjunctive and hypothetical queries, other complex and non-binary time-point constraints, and cost of use of resources.
We also explain an additional reasoning algorithm that integrates a CSP process into a closure process, and introduces some parameters in the resulting process.
The rest of paper is organized as follows.
In section 2, we introduce the labelled TCSP model used.
In section 3, we show the expressiveness of labelled temporal algebra and present several types of complex and non-binary constraints that can be specified.
In section 4, we talk about the reasoning algorithms used to manage effectively the constraints specified.
In section 5, we refer to some applications and evaluation of the model.
Finally, we remark the main conclusions of this work.
2  2  Temporal model of disjunctive constraints  In [5], it has been described a new-labelled temporal algebra, whose main elements are:        labelled disjunctive metric constraints (lij ).
The general form of a constraint + + lij is: (ti f([d ;d ]; flabelij:1 g); :::; ([dij:n ; dij:n ]; flabelij:n g)gtj )1 , with ij:1 ij:k d  d+ij:k , which means: (tj ti  [d+ij:1; d+ij:1 ]) _ ::: _ (tj ti  [dij:n; ij:k + + d ]).
Each [dij:k ; dij:k ] denotes an elemental or canonical constraint ecij:k .
ij:n label sets associated to canonical constraints (flabelij:k g).
Each ecij:k , when it is asserted, has associated a label set flabelij:k g with j flabelij:k g j= 1 that identifies it.
We name the tuple lecij:k = (ecij:k ; flabelij:k g) as labelled canonical constraint.
Each labelij:k can be considered as a unique symbol.
It uses the special label aR0a to denote that an input constraint lij has only one disjunct.
Each labelij:k 2 flabelij:k g of a derived constraint provides information about which input ecij set has been asserted.
sets of inconsistent canonical constraints (I-L-Sets).
An (I-L-Set) is a set of labels flabelij:k g that represents a set of overall inconsistent canonical constraints.
That is, they cannot all simultaneously hold.
Canonical constraints lecij:k 2 lij are pairwise disjoint.
Thus, each 2-length set of labels from each pair of lecij:k is considered an I-L-Set, and is added to the super-set named Inconsistence-Set (I-set).
This model uses a LTCN (Labelled Temporal Constraint Network) based representation, and includes the special temporal points T0 and TF to indicate the beginning and ending of the world.
The reasoning algorithms guarantee the consistency and obtain the minimal LTCN.
These are the updating process, and a total closure process that infers new constraints from those explicitly asserted.
They are based on the following operators:  1    Temporal Inclusion (lc ), that takes into account the inclusion of temporal intervals and the inclusion of their associated label sets.
  Temporal Union ([lc ), that performs the disjunctive temporal union of labelled constraints as the set-union of their canonical constraints.
However, all labelled canonical constraints whose associated labels are I-L-Sets should be rejected.
+ we will use also the form (ti f[dij:1 ; d+ ] ; :::; [dij:n ; dij:n ]flabel gtj ) ij:1 flabelij:1 g ij:n g  3    Temporal Composition ( lc ), and Temporal Intersection based in the operations   and  defined in [9].
  (  lc  ),  which are  The associated label set of each derived canonical constraint references the set of explicitly asserted disjunctions from which the canonical constraint has been derived.
Moreover, the reasoning process maintains inconsistent sets of explicitly asserted disjunctions in the set of I-L-Sets.
It should be taken into account that labelled constraints, associated label sets and the set of I-L-Sets are jointly, integrally managed by the reasoning algorithms.
The computational cost of the closure process is O(n2 l2e ), in which n is the number of nodes in the network, l is the maximal number of disjunctions of input constraints, and e is the number of input constraints updated in the previous LTCN.
This is the bounded cost of each added problem constraint 2 .
This complexity makes infeasible to solve real problems, so we introduce a new parameterized reasoning algorithm that obtain one or several solutions (see section 4).
3  Complex and non-binary constraints  By reasoning on labelled disjunctive constraints, associated label lists and I-L-Sets, the TCSP model offers the capability of representing and managing non-binary disjunctive constraints.
Particularly, logical relations among canonical constraints of different edges (lecij:x 2 lcij ; leckl:y 2 lckl ) can be specified.
This feature will allow us to manage logical expressions of constraints between different pairs of nodes both in assertion and retrieval processes.
Following, we will show how these logical expressions on metric constraints can be represented and managed in the proposed model.
For reasons of simplicity, only two disjunctive elements are shown.
However, more than two elements could be managed in a similar way:    To represent that two canonical constraints (lecij:x 2 lcij , leckl:y 2 lckl ) cannot hold simultaneously, that is :(lecij:x [ leckl:y ) the set of associated labels to lecij:x and leckl:y , fRij:x ; Rkl:y g, should be added to the set of I-LSets.
  To represent that two canonical constraints (lecij:x 2 lcij , leckl:y 2 lckl ) should hold simultaneously, the Cartesian products fRij:x g ffRkl:1 ; :::; fRkl:q g fRkl:y gg and fRkl:y g  ffRij:1 ; Rij:2; ::; Rij:pg fRij:xgg should be added to the set of I-L-Sets.
2  The best case occurs when the algorithm acts as a pure CSP.
Then, the closure process has a polinomial cost.
4    To represent a logical dependency between two canonical constraints, such as "If lecij:x then leckl:y " (where lecij:x 2 lcij ; leckl:y 2 lckl ), the Cartesian product fRij:x g  ffRkl:1 ; Rkl:2 ; :::::; Rkl:q g fRkl:y gg should be added to the set of I-L-Sets.
3.1 Reasoning of sets of constraints and their consequences Let us show a simple flow-shop scheduling example to illustrate some features about the retrieval of logical expressions from constraints and the consequences of such expressions.
Three jobs fJ1 ; J2 ; J3 g share three resources fM1 ; M2 ; M3 g in a given order (Table 1).
The use of Mj by Ji gives rise to the operation Oij .
Table 1: A scheduling example.
J1 J2 J3  Ready-time (Rt)  M1  M2  M3  Due-time (Dt)  0 (rt1 ) 0 (rt2 ) 0 (rt3 )  10a (O11 ) 10a (O21 ) 10a (O31 )  10a (O12 ) 10a (O22 ) 10a (O32 )  10a (O13 ) 10a (O23 ) 10a (O33 )  40a (dt1 ) 50a (dt2 ) 60a (dt3 )  Each operation Oij can be represented by the temporal points Oi1 and Oi+1 , that denote the beginning and ending points of Oij .
We can specify this scheduling problem as the following sets of disjunctive temporal metric constraints:       Ready-time constraints: (T0 f[rti ; 1[fR0 g g Oi1 ) 8 i=1..3 + Flow-shop restrictions: (Oij f[0; 1[fR0 gg Oi(j+1) ) 8 i=1..3, j=1,2  Due-time constraints: (T0 f[0; (dtj )[fR0 g g Oi3 ) 8 i=1..3 + Disjunctive constraints: (Oij f[1; 1[fRij;(i+k)j g ; ] 1; 0]fRji;j(i+k) g g O(i+k)j ) 8 i=1..3, 8 j=1,2,3, 8 k=1,2, with Oij+; O(i+k)j 2 O and fRa ; Rb g is an I-LSet.
Each disjunctive label Ra;b indicates a possible order between operations.
For example the label R12;22 reflects the fact that O12 is scheduled before O22 .
Given this constraint set, we apply the corresponding reasoning algorithms (see sections 2 and 5), and we obtain the minimal LTCN.
It contains all feasible scheduling solutions and we are able to know all possible orders among operations, all starting or ending time of operations, etc.
In addition, we obtain an InconsistenceSet (I-Set) that contain sets of I-L-sets.
This allows us to make queries about some 5  other restrictions that underlie the minimal LTCN, like non-binary constraints.
For instance, we can determine whether a set of canonical constraints of different constraints are overall consistent by checking if the union of their label sets is not an I-L-set.
As an example, suppose that the I-set associated to constraint sets of table 1 contains the I-L-set fR0 ; R11;12 ; R22;21 g. We can formulate the following questions:     It is possible for O11 to be before O12 and for O21 to be after O22 ?
: Under the common problem context (R0 ), the answer is no, since the set of labels associate to these disjunctions fR0 ; R11;12 ; R22;21 g is an I-L-set It is possible for O11 to be before O13 , for O21 to be before O23 and for O21 to be after O22 ?
: The answer will be yes, if the set of labels associates to these disjunctions fR11;13 ; R21;23 ; R22;21 ; R0 g is not an I-L-set nor a superset of an existing I-L-set.
This kind of questions about the feasibility of a conjunctive sets of constraints between different pairs of time points can be solved without propagating their effects to all of the LTCN.
Moreover, the consistency of the partial instantiation of a subset of LTCN variables in their domains can be assured if the union-set of the associated label sets to these instantiations is not an I-L-set.
Thus, partial solutions can be assembled without having to propagate the partial instantiation to all LTCN.
On the other hand, it is also important to know the implications of these choices.
These implications can be considered as consequences of hypothetical queries on the LTCN: aWhat happens if ....?a.
Thus, the consequences which follow from the fulfillment of a set of canonical constraints can be obtained by means of the associated label sets to these canonical constraints.
For example: we ask if O22 can meet with O21 , and if O12 can meet with O11 due to some optimal criteria.
Suppose + f:::; [0; 0]fR0 ;R2;R5 ;:::g; :::g O21 ), (O12+ that we have in the minimal LTCN: (O22 f:::; [0; 0]fR0 ;R2;R3;:::g; :::g O11 ).
If the union set of labels fR0 ; R2 ; R3; R5 ; :::g is not an I-L-set, then we know that both of these choices can hold.
In this case, we know also that these choices about the operations (O22 ; O21 ) and (O12 ; O11 ) imply that the associated disjunctions to the corresponding union-set of labels should also hold.
It must be taken into account that making certain choices about orders or assignment times for operations can prevent the feasibility of making other choices.
Thus, we can easily know the feasibility of a certain decision, its consequences and which other choices (orders among operations, possible times, etc.)
become unavailable by means of associated labels of such a decision and without having to update or propagate it.
This feature is important in order to analyse and optimize feasible scheduling solutions.
6  3.2 Reasoning on complex time-point constraints A specific kind of non-binary constraints (disjunctive one-to-many constraints) disjunctively restricts the temporal occurrence of a time-point with other time-points.
For instance, a time point can be temporally restricted to the maximum/ minimum temporal occurrence of a set of time-points.
These complex constraints are useful in scheduling problems where the ending time-point of each order should be associated to the ending time-point of the last task in the order.
Moreover, these constraints can also be useful in areasoning about changea processes.
In a typical causal relation (C 1; C 2; C 3 !
E ), the effect E holds while all causes fC 1; C 2; C 3g hold.
Thus, the concluded effect E should be temporally constrained to the overlapping temporal interval where all causes fC 1; C 2; C 3g hold.
That is, E = max (C 1 ; C 2 ; C 3 ), E + = min(C 1+ ; C 2+ ; C 3+ ).
Constraints of this kind, which also appear with non-disjunctive constraints, cannot be managed by usual models so that ad hoc procedures are needed [6], [13].
Thus, by using labelled temporal constraints, "the time-point tf is at the maximum occurrence of the set of time points ft1 ; t2 ; ::; tn g" can be represented as:  f  g )8 2f g is an I-L-Set.
(max(t1 ; t2 ; ::; tn ) [0; 0]  tf  ti  g : ( f[0 0]f The I-L-Set f  t1 ; ::; tn  ti  ;  RAi  g ; [1; 1]f  RBi  g gt  f  )  and fRB 1 ; RB 2 ; ::; RBn RB 1 ; RB 2 ; ::; RBn g specifies that the time point tf has the constraint [0,0] with, at least, a time point ti .
Moreover, the constraint (ti f[0; 0]gtf ) can only exist between tf and those time points ti that also allow the constraint [0,0] among them.
Afterwards, when all time points become fully constrained on the time line, tf becomes constrained with only the maximum time-points tmax : (tmax {[0,0]} tf ).
In another case, the constraint (tmax {[1, 1]gfRBi g } tf ) would fail.
The one-to-many constraint (max(t1 ; t2 ; ::; tn ) {[0,0]} tf ) is bidirectional: (i) T0 becomes constrained at the maximum time-point of ft1 ; t2 ; ::; tn g, and (ii) by constraining the upper-bound of the occurrence of tf , the upper-bounds of occurrences of the time-points ft1 ; t2 ; ::; tn g also become constrained.
For example, time-point tf can be constrained at the end of the latest operation (use of the resource P3: {O13 ; O23 ; O33 }) of the scheduling problem of Table 1: +  +  +  f g  (max(O13 ; O23 ; O33 ) [00]  tf )    +  f f[00] f[00]  1[ g [11[ g [11[ g  (O13 [00]RA1 ; [1 + (O32 + (O33  RA2 ; RA3 ;  RB 1  tf );  RB 2  tf );  RB 3  tf );  and fRB 1 ; RB 2 ; RB 3 g is an I-L-Set.
Without any more constraints in the problem, tf becomes constrained (T0 {[50 60]} tf ), where [50, 60] are the minimum and maximum possible due times for 7  scheduling.
Thus, we can estimate the optimum scheduling due time as the lower bound of tf .
Moreover, we can restrict the constraint of tf with T0 so that the resource/operation assignment times and the operation ordering also become more constrained.
Therefore, we can force a desired scheduling due time in [50 60].
Otherwise, when all scheduling times become fixed, time point tf will be also fixed to the final scheduling due time.
Similarly,  f  g )8 2f g : ( f[0 0]f g ] 1 1]f g is an I-L-Set.
Likewise, the constraint "no is at [  (min(t1 ; t2 ; ::; tn ) [0; 0]  tf  ti  t1 ; ::; tn  ti  and fRB 1 ; RB 2 ; ::; RBn + [d2 ; d+ 2 ],..., [dn ; dn ] from the maximum time point represented:  f  +  (max(t1 ; t2 ; ::; tn ) [d1  ; d1  ]; [d2  Finally, given the causal relation I1 ; I2 ; :::; In (max(I1  ; I2 ; :::; In  f  g  ) [0; 0]  I0  +  ; d2  !
+  ;  RAi  ;  RBi  g gt  +  ] " could also be d1 ; d1  t1 ; t2 ; ::::; tn  +  g  ]; :::; [dn ; dn ]  I0  ); (min(I1  ;  t f ):  , the following constraints: +  +  ; I2 ; :::; In  f  g  ) [0; 0]  +  I0  );  restrict the interval I0 to the temporal overlapping of intervals {I1 ; I2 ; :::; In }.
Moreover, the constraint (I0 f[11]gI0+ ) implies that I0 has a non-null duration, so that forces {I1 ; I2 ; :::; In } to overlap, which is an usual requirement in causal chaining processes.
3.3 Cost constraints The labels of the model allows us to incorporate several additional information that can be managed in an integrated manner with the reasoning algorithms.
This is important because we can specify more wide range of problems in the same manner and solve it without changing the reasoning algorithms applied.
As an example of this feature, we show how specify cost associated to resources required to carry out the corresponding actions depending on the time in which the actions are carried out.
The form of a cost constraint would be: "The resource rk have a cost associated of x if it is used between the temporal points t1 and t2 ".
We denote the cost of use of the resource rk by means the labelled temporal interval [t1 ; t2 ]Rck .
In order to incorporate it into the network, we add the constraint (t0f[ 1; t1 1]Ra ; [t1 ; t2 ]Rck ; [t2 + 1; 1]Rb gT F ), in which Ra and Rb represent zero cost value [4].
Thus, heuristics applied can use label Rck in order to calculate the corresponding operation costs.
This will allow us to use the same resolution method to solve the CSP problem, with or without associated costs to actions.
8  f  )  4  Reasoning algorithms  In addition to reasoning algorithms outlined in section 2, a new reasoning process has been proposed in [2] that integrates effectively the CSP process into a limited closure process: not interleaving them but as a part of the same process.
It is an iterative algorithm, in which we add a new constraint each time.
It results in a flexible model that can be tailored by two parameters:     The maximal number of indecisions maintained in the network.
The variable and value heuristics used to prune the search space.
The first parameter allows us to perform as a pure CSP process (if the number of disjunctions maintained is equal to zero), as a pure closure process (if this number is not limited), or as a convenient mixed closure-CSP method.
The greater the number of indecisions maintained, more solutions are also maintained, and fewer backtrackings are needed to obtain a solution.
On the other hand, we obtain a more incremental method in that we reduce the need to know in advance all constraints.
Moreover, the process varies itself automatically with the number of maintained disjunctions and which of them are maintained in every moment.
The second parameter, the set of heuristics to apply, provides efficiency to the method in that they can take better decisions.
Each input constraint acts as a variable, and each disjunction in a constraint represents a possible value for that variable [12].
So, in each iteration we have to decide the next constraint to add (by means a variable heuristic), and which disjunctions (by means a value heuristic) have to be maintained in the network.
We can use the named mixed heuristics [3], that combine the results of apply several heuristics to major information derived in the LTCN by the closure process.
Moreover, when we add a disjunctive constraint, we can maintain several disjunctions, and leave (delay) the corresponding decisions for later, if we consider that the information supplied by the heuristics it is not sufficient to decide.
The computational cost of the closure process is O(n2 l2e ), in which n is the number of nodes in the network, l is the maximal number of disjunctions of input constraints, and e is the number of input constraints updated in the previous LTCN.
This is the bounded cost of each iteration of the algorithm Closure-CSP 3 .
This complexity makes infeasible to solve real problems, so we introduce the parameter to maintain a maximal number of indecisions, and the use of convenient variable and value heuristics.
3 The best case occurs when the algorithm acts as a pure CSP.
Then, the closure process has a polinomial cost.
9  5  Applications and evaluation  Due to the reasoning algorithm outlined in section 4, we are able to apply it both in the framework of temporal reasoning (for example causal reasoning) and CSP problems [4].
For example, this model has been investigated under several types of scheduling problems, and it has been capable of specifying sets of constraints not contemplated in previous approximations, such as setup and maintenance periods of the resources, several work flows, consider the cost of use of resources, and other types of scheduling problems such as production lots [1].
On the other hand, the outlined mixed closure-csp process proposed results in an incremental reasoning process that is useful when temporal constraints are not initially known but are successively deduced from an independent process; for instance, in an integrated planning and scheduling system [10].
This process has been evaluated using both several instances from a known benchmark of scheduling problems, and randomly generated instances.
The results obtained [2], [3], are promising in order to apply it to solve real problems.
6  Conclusions  We have shown the expressiveness of a Labelled TCSP model in order to specify and reason about disjunctive temporal constraints.
This model allows us to:       Represent and manage non-binary disjunctive constraints both in assertion and retrieval processes.
More precisely, we have seen how to handle several types of disjunctive one-to-many constraints.
Perform hypothetical queries and assemble partial solutions without having to propagate the partial instantiation to all LTCN.
So, we can easily know the feasibility of a certain decision, its consequences and which other choices become unavailable by means of associated labels of such a decision.
This feature is important in order to analyse and optimize feasible solutions.
Incorporate information cost of use of resources, that can be managed in an integrated manner.
References [1] M.I.
Alfonso.
Un modelo de integraciAln de tAScnicas de clausura y CSP de restricciones temporales: aplicaciAln a problemas de scheduling.
PhD thesis, Dep.
Ciencia de la Comput.
e I.
A. Universidad de Alicante, Spain, 2001.
10  [2] M.I.
Alfonso and F. Barber.
A mixed closure-csp method to solve scheduling problems.
In Proceedings of the 14th IEA/AIE 2001, volume 2070 of Lecture Notes in A. I., pages 559a570, Berlin, July 2001.
Springer Verlag.
[3] M.I.
Alfonso and F. Barber.
Nuevas heurAsticas y medidas de textura para resolver problemas de scheduling mediante clausura y csp.
In Proceedings of the 9th CAEPIAa01, volume 2, pages 833a842, GijAln, Spain, Nov 2001.
[4] M.I.
Alfonso and F. Barber.
Complex constraints management.
Submitted for publication in ECAIa02, Juny 2002.
[5] F. Barber.
Reasoning on interval and point-based disjunctive metric constraints in temporal contexts.
Journal of A. I.
Research, 122:35a86, 2000.
[6] F. Barber, V. Botti, E. Onaindia, and A. Crespo.
Temporal reasoning in reakt: An environment for real-time knowledge-based systems.
AI Communications, 7(3):175a202, 1994.
[7] L. Chittaro and A. Montanari.
Trends in temporal representation and reasoning.
The knowledge engineering review, 11(3):281a288, 1996.
[8] R. Dechter.
From local to global consistency.
Artificial Intelligence, 55:87a 107, 1992.
[9] R. Dechter, I. Meiri, and Perl J. Temporal constraint networks.
Artificial Intelligence, 49:61a95, 1991.
[10] A. Garrido, E. Marzal, L. SebastiAA, and Barber F. A model for planning and scheduling integration.
In Proceedings of the 8th CAEPIAa99, pages 1a9, Murcia, Spain, 1999.
[11] E. Schwalb and Ll.
Vila.
Temporal constraints: A survey.
Constraints, 3(23):129a149, 1998.
[12] K. Stergiou and M. Koubarakis.
Backtracking algorithms for disjunctions of temporal constraints.
Artificial Intelligence, 120:81a117, 2000.
[13] P. Terenziani.
Integrating calendar dates and qualitative temporal constraints in the treatment of periodic events.
IEEE Trans.
on knowledge an data engineering, 9(5):763a783, 1997.
[14] M. Vilain and H. Kautz.
Constraint propagation algorithm for temporal reasoning.
In 5th.
National Conference on A.I., pages 377a382, Philadelphia, PA, 1986.
11