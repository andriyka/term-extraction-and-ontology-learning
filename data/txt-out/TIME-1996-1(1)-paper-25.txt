A Modal Temporal Logic and its Models Underlying Variants of Planning Algorithms Klaus P. Jantke  Oksana Arnold  Fachbereich IMN HTWK Leipzig 04277 Leipzig, Germany  Inst.
f. Wirtschaftsinformatik Universitat Leipzig 04109 Leipzig, Germany [16] and [17] are two recent papers of us closely related to the present one.
In contrast to the present one, [16] does not emphasize logic at all.
It is clearly focussed on the problem of communication between the therapy control module (planning, in particular) and the simulation module.
Although [17] is also putting some emphasis on logic, it deals with very specific phenomena like monotonicity, for instance.
Abstract T h e focus of thas paper i s o n t h e antroductaon of s o m e modal temporal logic and ats applacataon t o knowledge processang u n d e r t h e particularly daficult carcumstances of disturbed complex dynamac processes.
T h e development of thas logac has been draven by t h e overall aproach t o knowledge-based process supervasaon and control.
Wathan thas comprehensave approach, therapy control as playang a crucaal role.
T h e therapy control concept comprzses t h e generatzon of therapy or repaar plans, plan executaon and constraant monatorang and ancludes plan revasaon.
T h e ancompleteness and vagueness of avaalable anformataon about a n accadentally dasturbed process requares a partacularly taalored logacal approach.
T h e basac concepts are antroduced and exploated for developzng a codlectaon of plannang algorathms properly exceedang prevaous approaches.
1  1.1  Motivation The application domain is therapy or repair plan generation for complex dynamic systems.
Therapy planning is invoked, when a target process is seriously disturbed such that conventional process control fails to drive the process back into an acceptable working regime.
Knowledge-based process supervision and control necessarily depends on representing and processing time information.
As therapy plans are designed for execution in the future, this is particularly important and difficult.
Before going into details, one should recall that the following aspects have an essential impact on the present approach to plan generation:  Introduction  The present paper focusses on a modal temporal logic and its use for planning in complex dynamic environments.
Although there are implemented two planning systems under SUN/OS on Sparc Stations (in Allegro Common Lisp, cf.
21 and [3], resp.
Quintus Prolog, cf.
[22], [21] and [18 ) which nicely demonstrate the feasibility of the concepts developed, this paper is more theoretical in spirit.
It is intended to discuss certain novel theoretical issues.
As an immediate outcome of our approach, there will be a collection of novel variants of planning algorithms.
The paper aims at explaining and illustrating the modal temporal logic and its use for therapy plan generation.
Constraints are verified (more precisely: refuted) and monitored with respect to some dynamically changing knowledge base.
Particular emphasis is put on the problem that the available information about underlying dynamic processes may change during knowledge processing and, thus, may fool the automated reasoning procedures.
The framework allows to extract essentially different versions of plan generation to cope with the process dynamics.
In the present paper, technicalities are suppressed as much as possible.
Some emphasis is put on a careful motivation particularly stressing the peculiarities of our characteristic applications and on the essential problems and ideas of consistent planning.
\  I Complex dynamic systems like chemical processes, for instance, have a score or more peculiarities which have to be taken into account for developing, implementing and applying appropriate planning concepts.
I1 Planning is integrated into a comprehensive approach to knowledge-based process supervision and control.
Thus, planning has to respect the surrounding knowledge processing conditions, and it has to interact smoothly with the other knowledge processing components.
Within the present paper, we provide only a necessary minimum of preliminaries to reserve sufficient space for the logic and its applications.
The peculiarities of the class of our target processes has been intensively discussed in [7], e.g.
The concept of knowledge-based process supervision and control has been advocated in several of our publications.
[23] and [lo] are the semiproject on nal papers of our group within the WISCON Knowledge-Based Process Supervasion and Control.
182 0-8186-7528/96 $5.00 0 1996 IEEE  will have a serious impact on the overall knowledge processing approach.
Among others, they will be reflecked by the knowledge representation and by basic methods of knowledge management.
This, again, is fundamental for embedding therapy plan generation appropriately into the overall approach.
Under the assumption of some appropriately chosen modal temporal logic, i.e.
some formal language, some corresponding model concepts for defining validity, and some operational formalization of entailment, the paper focusses on questions like the following:  Q1 How to describe appropriately the difficulty of  1.3  Knowledge-Based Process Supervision and Control Essentially, knowledge-based process supervision and control (cf.
[23] and [lo]) is understood as an extension of a conventional process supervision and control system.
It is, so to call, an intelligent add-on.
Its ultimate goal is to invoke knowledge-based methods exactly if conventional methods of process supervision fail.
process knowledge which changes dynamically during the reasoning process?
Q2 How to describe the resulting problems sufficiently clear, to allow for appropriate investigations and algorithmic solutions?
Q 3 What are the key approaches to cope with dynamically changing knowledge underlying therapy plan generation?
Chapter 4 is intended to answer these questions by demonstrating the use of our underlying logic.
Some variants of plan generation within the same framework.
but from a different DersDective.
are investigated in [14] and [18].
The remaining part of chapter 1 is aimed at setting the stage for the target investigations.
I  I  v  I  I , '  Peculiarities of Disturbed Complex Dynamic Systems From the huge amount of peculiarities of complex dynamic systems (cf.
[7] for a comprehensive discussion which meets our needs quite well , the following are particularly relevant to understan the difficulties of generating therapy plans in a timely response to disturbances and diagnosed primary faults.
I  I  1.2  I  d  0  Conventional Process Supervisionand Control System  t  J.
1  Figure 1: Simplified Overall System Architecture  Values of process parameters may be set only by indirect influence, usually.
Consequently, the effects of actions are not always definite, i.e.
formal postconditions may not exist.
The figure is showing a quite simplified architecture.
It contains only the minimal components relevant for the problem of therapy plan generation.
More advanced approaches (cf.
[16], e.g.)
may require further knowledge processing components, like a simulation module, for example.
The so-called technology representation is the system's knowledge base which basically contains o static process knowledge like classification hierarchies, aggregation hierarchies, and topological structure (We do not go into detail, cf.
[5].
),  Sometimes, parameters which are necessary to describe the complete state of some device are not accessible (measuring may be very time consuming, e.g.).
The success of actions depends, in general, on the availability of technological resources (preconditions), like energy, conveyance pipes and storage capacity.
0  I  o  There may be some need for simultaneous actions resulting from the structure of the equipment and the running processes.
These are characteristics of the class of target processes.
Furthermore, there are other important properties which are less peculiar, but which interfere with properties like above.
Such an interference may cause additional difficulties.
Here, we do not go into further detail (cf.
[7]).
As a consequence, STRIPS-like planning approaches (cf.
[ll]) may turn out to be inappropriate.
Thus, in particular, a planning approach for real-time generation of therapy plans needs to be based on certain innovative concepts.
Moreover, the above peculiarities  static inference knowledge which may essentially depend on the peculiarities of the inference mechanisms in use (For example, some module for diagnosis may be based on a hierarchy of process models, and it may build its diagnoses via construction of causal nets from a reservoir of causal nodes.
),  dynamic process information about the past, the present and, perhaps, the future of the target process which - in all cases when the system is invoked - is suffering from some disturbance.
The logic developed in the sequel describes a formal aplproach for dealing with the dynamic process information.
o  183  1.4  A Modal Temporal Logic  2  The Basic Planning Approach  We introduce a logical approach to representing and processing incomplete knowledge about dynamically changing processes.
There are the following fundamental properties of our logic (cf.
[4]):  The underlying plan eneration approach has been published in [6], [7], [l47, and [13], for instance.
Essentially, plans are finite, directed and acyclic graphs.
Nodes are describing actions which may be either elementary or compound.
Elementary actions have a well-defined operational semantics.
In our implementations (cf.
[2], [3], [22], [all, and [18] , these semantical concepts are formalized by rule ases.
This allows reactivity through condition monitoring at execution time.
For compound nodes, there are alternative graphs listed which may be used for substitution.
Thus, plan generation is mainly node expansion.
Roughly speaking, we have an underlying graph grammar for therapy plan generation.
The graph-theoretic approach is described in [8], [12], and [9].
There is a detailed mechanism of guarded graph rewriting.
The resulting formal language of raphs is known to have highly interesting properties ycf.
[19] and [20]).
Here, we are not going into details.
For the present paper, the following perspective is essential: For node replacement, one has to check certain constraints attached to the graphs possibly substituted.
Constraint checking depends on time information and, naturally, on data about the process dynamics.
This requires  0  b  0  a formal language for representing constraints,  e  a model concept to determine validity, and  0  an implementation of the entailment operator.
0  0  0  0  0  The complexity of constraint refutation is growing with the number of known episodes, i.e.
with the completeness of histories.
There is an equivalence concept for histories which allows to simplify knowledge representation.
The complexity of graph rewriting is growing with the number of refutable constraints.
2.1 Syntax There are 5 basic sorts, 2 non-temporal and 3 temporal sorts.
First, there are the sorts of numeric resp.
symbolic process parameters.
These sorts have a large collection of application-specific constants.
Furthermore, there are the usual operators of arithmetic and elementary set theory suppressed here.
The three temporal sorts are representing time points, time durations, and time zntervals.
There are several operators relating these sorts.
The sort of time points and the sort of time durations have constants, whereas the sort of time intervals has not.
There is a particular operator exp for generating time intervals by two time points.
Thus, a ground term of the sort of time intervals looks like exp($95.12.01.09-52-05,$95.12.01.09-53-40).
Another version is exp( $95.12.0 1.09-52-05, $95.12.01.0952-05+$95s), where the second argument term is built from two constants of the sorts of time points and time durations connected by addition.
Upon the non-temporal part of this signature, there is built a standard first order predicate language.
The resulting formulae of classical predicate logic are called constraznts.
If 'p is any constraint and i is any term of the sort of time intervals, then (i, p) is called a formula.
All formulae must be of this structure.
There is no way to assign truth values to constraints.
Only formulae may be either valid or not in dependence on some underlying knowledge.
For a large application area (cf.
[26] for an acquisition, formalization and representation of therapy knowledge in a complex chemical installation, for instance), a subclass of formulae is sufficient where no iteration of quantifiers occurs.
We call these formulae technologzcal constraints.
Peculiarities of Therapy Plan Generation for Disturbed Dynamic Processes  We conclude our introduction with pointing to two essentials of our planning approach: 0  A more comprehensive knowledge base allows to refute more constraints.
As a consequence, there is a tradeoff between efficiency and accuracy of logical reasoning.
This logic briefly described in chapter 2 is partially inspired by [l] as well as by [24].
Semantical concepts are somehow similar to those in [25], although the treatment there is not very formal.
However, our approach exceeds the three mentioned considerably.
1.5  The crucial logical reasoning process within the developed planning approach is constraint refutation.
Plans are programs to be executed on the underlying installation.
Therefore, plan generation is program synthesis.
More precisely, due to the unavoidable incompleteness of information, therapy plan generation for complex dynamic processes is inductive program synthesis (cf.
[6] and [15], in particular).
Due to the process dynamics and to the incompleteness of information, executability of plans resp.
programs in undecidable, in advance.
Thus, one needs another concept to distinguish "good" plans.
This is the concept of consistency to be introduced below.
Now we are going to introduce some logic which has been published so far in German, only (cf.
[4]).
184  2.2 Models and Validity For the temporal sorts, there is assumed some standard semantics: Time points are interpreted as natural numbers and time durations are interpreted as integers.
As known from most Lisp systems, the natural number 0 means the real time point of 0:OO on January 1, 1900.
The corresponding constant is written $00.00.00.00-00-00.
The basic semantical concepts are called episodes and hzstorzes describing process parameters.
The approach in [25] is adopted and properly refined.
An episode is a rectangle spanned by a time interval and a value interval.
Histories are finite collections of episodes which do not overlap in time.
There is an arithmetic of histories.
The operations reasonably propagate the uncertainty of information.
(Figure 3 contains some histories, for illustration.)
Models are finite collections of histories containing for every non-temporal constant its uniquely defined history.
Motivated by our underlying knowledgebased system approach, (the dynamic parts of) technology representations are taken as models and denoted by TR, for short.
The modal character of our logic is determined by its validity concept.
For every predicate symbol, there is an appropriate interpretation taking the uncertainty of information into account, For readability, we prefer an illustration to a complete formalization: Assume any two ground terms x and y of the same nontemporal sort and any ground term i = exp(tl,t2) denoting any time interval.
Furthermore, assume any technology representation with histories h, and h, interpreting the constants (meaning process parameters) x and y, respectively.
It holds, for example,  TR  + ( exp(tl,t2)  , X<Y  constraint 9,.
(In fact, there are start constraints and interval constraints which are treated differently during plan execution.
But we do not go into these details, here.)
The result of replacing c by r;, is denoted G,[C  Bra].
TR  I#(ilcpra)  holds with respect to the underlying model TR.
Thus, constraint refutation is the crucial deductive task of our therapy plan generation approach.
Refutability of technological constraints over finite models is decidable.
3  Variants of Consistent Algorithms for Therapy Plan Genration  Besides motivating and introducing some modal temporal logic and using this particular logic for constraint refutation within plan generation, the focus of Ithe present paper is on exploitation of this logical approach towards the development of a novel collectioin of planning algorithms.
In [14] and [18], there have been introduced a few variants of planning algorithms.
These variants were driven by investigating special heuristics.
In contrast, the present investigatioin is clearly driven by logical phenomena.  )
exactly if the episodes (i.e.
rectangles) in h, and h, resulting from a restriction to the interval [ t l , ?
~of) natural numbers are not disjoint.
Here, each t , is the natural number interpreting the corresponding ground term tn.
In this case, at every moment in time between t l and t 2 , there is an opportunity to satisfy the given technological constraint.
Thus, the corresponding formula is true in the model.
2.3  c-,  In the algorithmic approach developed, node expansion is only permitted in case all preceding nodes are already elementary.
As a result, for every ongoing node expansion there exists some time interval estimating the possible start time of the corresponding compound action.
If i is any term describing this time interval under consideration, the planning step G to Q, [c + G,] is admissible excatly if froim ,  T.ohnoloey R.pnmtBPan  TRI  Application  This paragraph is intended to sketch the use of deduction in therapy plan generation.
Therapy knowledge is represented as a collection of action scripts.
In formal terms, action scripts are graphs.
To compound nodes of so-ca!led compound action scripts, there are assigned certain other action scripts for possible substitution.
Node expansion during planning is guarded by technological constraints attached to the action scripts considered for potential substitution.
The basic notations are as follows: 6 , is some graph describing an incompletely developed plan and c is one of its compound nodes.
For the node c , there are some alternative graphs for substitution.
Every such graph Gra is accompanied by some technological  Figure 2: Dynamically Changing Knowledge #Consistent plan generation is based on checking constraints with respect to some underlying knowledge.
As introduced above, the crucial deductive task is constraint refutation.
Planning starts at some time t o over some so-called technology representation TRo.
As time proceeds during plan generation, the underlyiing knowledge is changing as well.
In fact, there  185  the initial model TRt,.
In this sense, Variant 1 implements a finer approach than the basic one.
Note that this relation may be not true, if monotonicity can not be assumed.
There are similar relationships among the other variants.
In case monotonicity can be assumed, there is no need for checking node expansions for those constraints which have been already refuted earlier.
Thus, the logical approach points directly to crucial problems of efficiency to implement real-time planning.
To our knowledge, this perspective is a novelty in plan generation for complex dynamic processes.
We have not seen before any collection of logically classified variants of planning algorithms as above.
is a sequence of technology representations containing changing histories of process parameters as depicted below.
This dynamics of the knowledge base exhibits the difficulty of designing consistent planning algorithms: For every particular constraint refutation problem, one needs to identify the particular knowledge base it should be based on.
In logical terms, every knowledge base is a certain model.
To every time point t , there is related a particular model TRt.
Therapy plan generation beginning at some time point t o may be based on  TRto,TRt,+l , TRto+2 TRt0+3,... 9  Our basic therapy plan generation algorithm (cf.
[14]) is exclusively based on the initial model TRt,.
It is one of the benefits drawn from the development of a logic underlying therapy plan generation that it provides a firm basis to clearly distinguish several approaches to consistent plan generation.
As a complete presentation of the investigated algorithmic variants requires some graph-theroretic notions and notations exceeding the space of this short paper, we confine ourselves to a listing of the crucial differences.
Variants of plan generation algorithms are specified by the following variants of consistency tests: 0  0  0  0  [Basic Algorithm] on TRt,.
Acknowledgments This work has been partially supported by the German Federal Ministry for Research and Technology (BMFT within the Joint Project (BMFTVerbundprojekt WISCONon Knowledge-Based Process Supervision and Control under contract no.
4134001-01 IW 206.
The workshop participation of the first author has been supported by the German Research Fund (DFG) under grant 477/378/96.
Our work presented here has drawn some benefit from lots of heated and fruitful discussions with our students Jorg Herrmann, Daniel Kirsten, Torsten Lehmann, Daniel Matuschek und Christoph Zschiesche on several aspects of knowledge-based process supervision and control.
In using the logic approach described here in their own work, they provided a continuous feedback.
1  All deductions are based  [Variant 11 Constraint refutation at time point t o n is based on XRt,+n.
+-  Constraint refutation at time [Variant 21 point t o n is based on TRt,+,.
Additionally, all preceding deductions are revised with respect to TRt,+n.
-+  References James F. Allen.
Towards a general theorv of action and time.
Artificial In&lligence, 23(2):123154, 1984.
[Variant 31 Deductions are organized as in Variant 2, but revision is restricted to only those constraints the refutation of which would dispose of the actual deduction task.
Oksana Arnold.
Reaktive Therapieplanung in dynamischen ProzeBumgebungen.
WISCON Report 03/92, HTWK Leipzig (FH), Fachbereich IMN, October 1992.
The success of the different variants of planning depends on characteristics of the underlying process, on the actual disturbance, and on the peculiarities of knowledge sources for histories (granularity of models for simulation, monotonicity, ...).
A sequence of models as above is called monotonzc, exactly if it holds  ... k TRto+3 I= TRt,+2  b  TRt,+i  k  Oksana Arnold.
Entwicklungswerkzeug zur Analyse generierter Plane "Plan-Tracer".
WISCON Report 03/93, HTWK Leipzig (FH), Fachbereich IMN, December 1993.
Oksana Arnold.
A logic of constraints for dynamic process control.
WISCON Report 09/94, HTWK Leipzig (FH), Fachbereich IMN, December 1994.
TRt,  Usually, technology representations which contain only past and present information reflecting real process states form a monotoic sequence of such models.
The figure 2 above is also intended to illustrate monotonicity.
In case there are knowledge processing modules (for simulation, e.g.)
generating episodes about future process parameter values, monotonicity is a crucial property depending both on peculiarities of the process dynamics and on properties of the forecasting devices.
Under monotonicity, every plan generated by Variant 1of the planning algorithm is also consistent with  Oksana Arnold.
Towards structure and management of knowledge bases for controlling.
In Eberhard Kohler, editor, 39.
Internatzonales Wassenschaftliches Kolloquium der TU Ilmenau, Band 3, pages 30-36.
Technische Universitat 11menau, 1994.
Oksana Arnold and Klaus P. Jantke.
Therapy plan generation as program synthesis.
In Setsuo Arikawa and K.P.
Jantke, editors, Algorzthmic Learning Theory, AII'94 & ALT'94, volume 872 of LNAI, pages 40-55.
Springer-Verlag, 1994.
186  [17] Klaus P. Jantke, Torsten Lehmann, and Oksana Arnold.
Meeting real-time constraints in thertapy plan generation for complex dynamic systems by flexible simulation scenarios.
In Proc.
ECHTZEIT'96, Karlsruhe, June 18.-20., 1996.
E'ranzis-Verlag, 1996.
[7] Oksana Arnold and Klaus P. Jantke.
Therapy plan generation in complex dynamic environments.
ICSI Report TR-94-054, International Computer Science Institute, Berkeley, California, October 1994.
[8] Oksana Arnold and Klaus P. Jantke.
Therapy plans as hierarchically structured graphs.
WISCON Report 02/94, HTWK Leipzig (FH), FB Informatik, Mathematik & Naturwissenschaften, April 1994.
[18] Klaus P. Jantke and Daniel Matuschek.
Develloping and implementing planning heuristics in Prolorr.
In Proc.
Florida A I Research Sumposium (FLA?RS-96), Key West, FL, USA, May i0.-22., 1996, 1996.
[9] Oksana Arnold and Klaus P. Jantke.
Therapy plans as hierarchically structured graphs.
In Fifth International Workshop on Graph Grammars and their Application t o Computer Science, Walliamsburg, Virginia, USA, November 1994.
[19] Daniel Kirsten.
Properties of formal languages of therapy plans created by graph grammars.
(Communications of the Algorithmic Learning (Group CALG-04/95, Hochschule fur Technik, Wirtschaft und Kultur Leipzig, FB Informatik, Mathematik und Naturwissenschaften, September 1995.
[lo] Dietrich Balzer, Volkmar Kirbach, and Volker May.
Knowledge based process control.
In Hartwig Steusloff and Martin Polke, editors, Integration of Design, Implementation and Applacation on Measurement, Automation and Control, INTERCAMA Congress 1992, pages 33-49.
Oldenbourg, 1992.
[20] Daniel Kirsten.
Redundant edges in therapy planning.
Communications of the Algorithmic Learnling Group CALG-06/95, Hochschule fur Technik, Wirtschaft und Kultur Leipzig, FB Informatik, Mathematik und Naturwissenschaften, December 1995.
[ll] Richard E. IFikes and Nils J. Nilsson.
STRIPS: A new approach to theorem proving in problem solving.
Artificial Intelligence, 2:189-208, 1971.
[21] Daniel Matuschek.
PIG: Therapieplanung imit Mitteln der logischen Programmierung.
(Communications of the Algorithmic Learning (Group CALG-02/95, Hochschule fur Technik, Wirtschaft und Kultur Leipzig, FB Informatik, Mathematik und Naturwissenschaften, July 1995.
[12] Klaus P. Jantke and Oksana Arnold.
Graphgrammatik-Konzepte in der Therapieplanung fur komplexe dynamische Prozesse.
In Markus Holzer, editor, 4.
GI Theorietag "Automaten und Formale Sprachen", 1994, Proc., Herrsching, pages 42-47.
Universitat Tubingen, WilhelmSchickard-Institut, 1995.
[22] Daniel Matuschek, Klaus P. Jantke, and Oksana Arnold.
Generierung von Therapieplanen mit Mitteln der logischen Programmierung.
In Peter H. Schmitt, editor, Logik in der Informatik, 3.
Jahrestagung der GI-Fachgruppe 0.1.6, pages '75-78.
Universitat Karlsruhe, Fakultat fur Informatik, Bericht 23/95, Juni 1995.
[13] Klaus P. Jantke and Oksana Arnold.
Inductive program synthesis for therapy plan generation.
Communications of the Algorithmic Learning Group CALG-01/95, Hochschule fur Technik, Wirtschaft und Kultur Leipzig, FB Informatik, Mathematik und Naturwissenschaften, July 1995.
[23] Volker May, Oksana Arnold, and Uwe Metzner.
Wissensverarbeitung in dynamischen Prozefiumgebungen - Eine Anforderungsspezifikation.
WISCON Report 01/92, HTWK Leipzig (FH), Fachbereich IMN, March 1992.
[14] Klaus P. Jantke and Oksana Arnold.
Variants of plan generation for complex dynamic systems.
In Xin Rao, editor, Proc.
8th Australian Conference on Artzficial Intelligence (AI'95), November 13-17, 1995, Canberra, Australia, pages 531-538.
World Scientific Publ.
Co., 1995.
[24] Yoav Shoham.
Reasoning about Change.
MIT Press, Cambridge, MA, 1988.
[25] Brian C. Williams.
Doing time: Putting qualitative reasoning on firmer ground.
In 5th National Conference on Artzficial Intelligence, AAAI-86, Philadelphia, Pennysylvania, USA, 1986, pages 105-112, 1986.
[15] Klaus P. Jantke and Oksana Arnold.
Inductive program synthesis for therapy plan generation.
New Generatzon Computing, 14(4), 1996.
[26] Christoph Zschiesche.
Erstellung und Analyse von Wissensbasen der Prozefisicherung und -optimierung zur Verbesserung und Erweiterung geeigneter Wissensreprasentationen.
Master's the,sis, Leipzig University of Technology, August 1995.
[16] Klaus P. Jantke, Oksana Arnold, and Torsten Lehmann.
Flexible simulation scenarios for realtime planning in dynamic environments.
In Proc.
Florida A I Research Symposium (FLAIRS-96), Special Track on Real-Time Planning and Reacting, Key West, FL, USA, May 20.-22., 1996, 1996.
187