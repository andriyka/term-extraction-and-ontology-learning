On-the-fly Automata Construction for Dynamic Linear Time Temporal Logic Laura Giordano Universita del Piemonte Orientale Alessandria, Italy laura@mfn.unipmn.it Abstract We present a tableau-based algorithm for obtaining a Buchi automaton from a formula in Dynamic Linear Time Temporal Logic (DLT L), a logic which extends LTL by indexing the until operator with regular programs.
The construction of the states of the automaton is similar to the standard construction for LT L, but a different technique must be used to verify the fulfillment of until formulas.
The resulting automaton is a Buchi automaton rather than a generalized one.
The construction can be done on-the-fly, while checking for the emptiness of the automaton.
1.
Introduction The problem of constructing automata from Linear-Time Temporal (LTL) formulas has been deeply studied [11].
The interest on this problem comes from the wide use temporal logic for the verification of properties of concurrent systems.
The standard approach to LTL model checking consists of translating the negation of a given LTL formula (property) into a Buchi automaton, and checking the product of the property automaton and the model for language emptiness.
Therefore it is essential to keep the size of the automaton as small as possible.
A tableau-based algorithm for efficiently constructing a Buchi automaton is presented in [2].
This algorithm allows to build the graph "on the fly" and in most cases builds quite small automata, although the problem is intrinsically exponential.
Further improvements have been presented in [1, 8].
Dynamic Linear Time Temporal Logic (DLT L) [6] extends LTL by indexing the until operator with programs in Propositional Dynamic Logic, and has been shown to be strictly more expressive than LTL [6].
In [3, 4] we have developed an action theory based on DLTL and of its product version [5], and we have shown how to use it to model multi-agent systems and to verify their properties, in particular by using model checking techniques.
In [6] it is shown  Alberto Martelli Universita di Torino Torino, Italy mrt@di.unito.it  that the satisfiability problem for DLTL can be solved in exponential time, by reducing it to the emptiness problem for Buchi automata.
This motivates the interest in developing efficient techniques for translating formulas into automata.
In this paper we present an efficient tableau-based algorithm for constructing a Buchi automaton from a DLTL formula.
The construction of the states of the automaton is similar to the standard construction for LT L [2], but the possibility of indexing until formulas with regular programs puts stronger constraints on the fulfillment of until formulas than in LTL, requiring more complex acceptance conditions.
Thus we extend the structure of graph nodes and the acceptance conditions by adapting a technique proposed in [6].
The resulting automaton will be a Buchi automaton instead of a generalized Buchi automaton as in [2].
2.
Dynamic Linear Time Temporal Logic In this section we shortly define the syntax and semantics of DLTL as introduced in [6].
In such a linear time temporal logic the next state modality is indexed by actions.
Moreover, (and this is the extension to LTL) the until operator is indexed by programs in Propositional Dynamic Logic (PDL).
Let S be a finite non-empty alphabet.
The members of S are actions.
Let S* and So be the set of finite and infinite words on S, where o = {0, 1, 2, .
.
.}.
Let S[?]
=S* [?]
So .
We denote by s, s 0 the words over So and by t, t 0 the words over S* .
Moreover, we denote by <= the usual prefix ordering over S* and, for u [?]
S[?]
, we denote by prf(u) the set of finite prefixes of u.
We define the set of programs (regular expressions) P rg(S) generated by S as follows: P rg(S) ::= a | p1 + p2 | p1 ; p2 | p * where a [?]
S and p1 , p2 , p range over P rg(S).
A set of finite words is associated with each program by the mapping * [[]] : P rg(S) - 2S , which is defined as follows: * [[a]] = {a};  * [[p1 + p2 ]] = [[p1 ]] [?]
[[p2 ]]; * [[p1 ; p2 ]] = {t1 t2 | t1 [?]
[[p1 ]] and t2 [?]
[[p2 ]]}; S * [[p * ]] = [[p i ]], where  A Buchi automaton over an alphabet S is a tuple B = (Q, -, Qin , F ) where: * Q is a finite nonempty set of states; * -[?]
Q x S x Q is a transition relation; * Qin [?]
Q is the set of initial states; * F [?]
Q is a set of accepting states.
- [[p 0 ]] = {e} - [[p i+1 ]] = {t1 t2 | t1 [?]
[[p]] and t2 [?]
[[p i ]]}, for every i [?]
o.
Let P = {p1 , p2 , .
.
.}
be a countable set of atomic propositions.
The set of formulas of DLTL(S) is defined as follows: DLTL(S) ::= p | !a | a [?]
b | aU p b where p [?]
P and a, b range over DLTL(S).
A model of DLTL(S) is a pair M = (s, V ) where s [?]
So and V : prf (s) - 2P is a valuation function.
Given a model M = (s, V ), a finite word t [?]
prf (s) and a formula a, the satisfiability of a formula a at t in M , written M, t |= a, is defined as follows: * M, t |= p iff p [?]
V (t ); * M, t |= !a iff M, t 6|= a; * M, t |= a [?]
b iff M, t |= a or M, t |= b; * M, t |= aU p b iff there exists t 0 [?]
[[p]] such that t t 0 [?]
prf (s) and M, t t 0 |= b.
Moreover, for every t 00 such that e <= t 00 < t 01 , M, t t 00 |= a.
A formula a is satisfiable iff there is a model M = (s, V ) and a finite word t [?]
prf (s) such that M, t |= a.
The formula aU p b is true at t if "a until b" is true on a finite stretch of behavior which is in the linear time behavior of the program p. The derived modalities hpi and [p] can be defined as follows: hpia [?]
>U p a and [p]a [?]
!hpi!a.
Furthermore, if we let S = {a1 , .
.
.
, an }, the U, O (next), 3 and 2 of LTL can be defined as follows: Oa [?]
W * haia, aUb [?]
aU S b, 3a [?]
>Ua, 2a [?]
!3!a, a[?
]S * where, in U S , S is taken to be a shorthand for the program a1 + .
.
.
+ an .
Hence both LTL(S) and PDL are fragments of DLTL(S).
As shown in [6], DLTL(S) is strictly more expressive than LTL(S).
In fact, as the logic ETL [10] to which DLTL is inspired, DLTL has the full expressive power of the monadic second order theory of o-sequences.
3.
Automaton Construction In this section we show how to build a Buchi automaton for a given DLTL formula ph using a tableau-like procedure.
The automaton generates all the infinite sequences (models) satisfying the formula ph.
First we recall the definition of Buchi automata.
1  We define t <= t 0 iff [?
]t 00 such that t t 00 = t 0 .
Moreover, t < t 0 iff t <= t 0 and t 6= t 0 .
Let s [?]
So .
Then a run of B over s is a map r : prf (s) - Q such that: * r(e) [?]
Qin a * r(t ) - r(t a) for each t a [?]
prf (s) The run r is accepting iff inf(r) [?]
F 6= [?
], where inf(r) [?]
Q is given by: q [?]
inf (r) iff r(t ) = q for infinitely many t [?]
prf (s).
Finally L(B), the language of o-words accepted by B, is: L(B) = {s|[?]
an accepting run of B over s}.
Our aim is now to construct a Buchi automaton for a given DLTL formula ph.
We build a graph defining the states and transitions of the automaton.
A tableau-like procedure allows a node to be expanded by applying propositional rules as well as by expanding the temporal operators.
It will make use of a reformulation of the following axioms of DLTL in [6]2 : W a[?
]S hai> W W 0 aU p b [?]
(b [?]
(a [?]
a[?
]S hai p0 [?
]da (p) aU p b)), for e [?]
[[p]], W W 0 aU p b [?]
a [?]
a[?
]S hai p0 [?
]da (p) aU p b, for e 6[?]
[[p]], where a a da (p) = {p 0 |p -- p 0 } and -- is a transition relation (defined in [6]) such that the program p 0 is obtained from the program p by executing action a.
In our construction, we exploit the equivalence results between regular expressions and finite automata and we make use of an equivalent formulation of DLTL formulas in which "until" formulas are indexed with finite automata rather than regular expressions.
Thus we have aU A b instead of aU p b, where L(A) = [[p]].
In fact, for each regular expression p there is an (2-free) nondeterministic finite automaton A, accepting the language [[p]] generated by p. Moreover the size of the automaton is linear in the size of p [7].
Satisfiability of until formulas aU A b must be modified accordingly by replacing [[p]] with L(A) in the definition above3 .
More precisely, in the construction we will make use of the following notation for automata.
Let A = (Q, d, QF ) be an 2-free nondeterministic finite automaton over the alphabet S without an initial state, where Q is a finite set of 2 3  Remember that haia [?]
>U a a.
The idea of using finite state automata to label "until" formulas is inspired both to the automata construction for DLTL in [6] and to the automata construction for ETL in [9].
states, d : Q x S - 2Q is the transition function, and QF is the set of final states.
Given a state q [?]
Q, we denote with A(q) an automaton A with initial state q.
The two axioms above will thus be restated as follows: W W 0 aU A(q) b [?]
(b[?](a[?]
a[?
]S hai q0 [?
]d(q,a) aU A(q ) b)) (q is a final state) W W 0 aU A(q) b [?]
a [?]
a[?
]S hai q0 [?
]d(q,a) aU A(q ) b (q is not a final state) These formulas can to be valid.
Observe W be easily proved 0 that the disjunction q0 [?
]d(q,a) aU A(q ) b is a finite disjunction, as the set of states q 0 in d(q, a) is finite.
The main procedure to construct the Buchi automaton for a formula ph builds a graph G(ph) whose nodes are labelled by sets of formulas, and which defines the states and the transitions of the Buchi automaton.
The procedure makes use of an auxiliary tableau-based function which is described in the next section.
3.1.
Tableau computation The tableau procedure we introduce makes use of signed formulas, i.e.
formulas prefixed with the symbol T or F. This procedure takes as input a set of formulas4 and returns a set of sets of formulas, obtained by expanding the input set according to a set of tableau rules, formulated as follows: ph = ps1 , ps2 , if ph belongs to the set of formulas, then add ps1 and ps2 to the set ph = ps1 |ps2 , if ph belongs to the set of formulas, then make two copies of the set and add ps1 to one of them and ps2 to the other one.
The rules are the following: T(a [?]
b) = Ta, Tb F(a [?]
b) = Fa, Fb F(a [?]
b) = Fa|Fb T(a [?]
b) = Ta|Tb T!a = Fa F!a = Ta W W 0 R1 TaU A(q) b = T(b[?](a[?]
a[?
]S hai q0 [?
]d(q,a) aU A(q ) b)) (q is a final state) W W 0 R2 TaU A(q) b = T(a [?]
a[?
]S hai q0 [?
]d(q,a) aU A(q ) b) (q is not a final state) W W 0 FaU A(q) b = F(b[?](a[?]
a[?
]S hai q0 [?
]d(q,a) aU A(q ) b)) (q is a final state) W W 0 FaU A(q) b = F(a [?]
a[?
]S hai q0 [?
]d(q,a) aU A(q ) b) (q is not a final state) Given a set of formulas s, function tableau(s) works as follows: 4  In this section we will always refer to signed formulas  * add T  W  a[?
]S hai>  to s,  * expand the set of formulas of s according to the above rules (by possibly creating new sets) until all formulas in all sets have been expanded, * return the resulting set of sets.
W Formula T a[?
]S hai> makes explicit that in DLTL each state must be followed by a next state (O> is an axiom in DLTL).
If the expansion of a set of formulas produces an inconsistent set, then this set is deleted (consistency constraint).
A set is inconsistent if it contains either "T[?]"
or "F>" or "Ta and Fa" or "Thaia and Thbib with a 6= b".
Observe that the expansion of an until formula aU A(q) b only requires a finite number of steps, namely a number of steps linear in the size of the automaton.
It is easy to see that for each set of formulas returned by tableau there is exactly one symbol a [?]
S such that the set contains formulas of the form Thaia.
In fact, because W of T a[?
]S hai>, there must be at least one formula of that kind, whereas the consistency constraint prevents from having more than one formula of the form Thaia for different symbols a [?]
S.  3.2.
Building the graph To build the graph we will consider each set of formulas obtained through the tableau construction as a node of the graph.
The above tableau rules do not expand formulas of the kind haia.
Since the operator hai is a next state operator, expanding this kind of formulas from a node n means to create a new node containing a connected to n through an edge labelled with a.
Given a node n containing a formula Thaia, then the set of nodes connected to n through an edge labelled a is given by tableau({Ta|Thaia [?]
n} [?]
{Fa|Fhaia [?]
n}).
States and transitions of the Buchi automaton are obtained directly from the nodes and edges of the graph.
While we will give later the details of the construction of the automaton, we want now to address the problem of defining accepting conditions.
Intuitively this has to do with until formulas, i.e.
formulas of the form TaU A(q) b.
If a node n of the graph contains the formula TaU A(q) b, then we will accept an infinite path containing this node if it is followed in the path by a node n0 containing Tb and TaU A(qF ) b, where qF is a final state of A.
Furthermore if t is the sequence of labels in the path from n to n0 , then t must belong to L(A(q)), and all nodes between n and n0 must contain Ta.
This problem has been solved in LTL by imposing generalized Buchi acceptance conditions.
In our formulation they could be stated as follows: For each subformula aU b of the  Figure 1.
(a) automaton A and (b) graph for 2hA(s1 )ip  initial formula there is a set F of accepting states including all the nodes q [?]
Q such that either TaUb is not contained in the node or Tb holds.
Unfortunately a similar solution does not apply in the case of DLTL, because acceptance of until formulas is more constrained than in LTL.
Let us consider for instance the formula 2hA(s1 )ip, with S = {a}.
The automaton A is given in Figure 1(a).
By eliminating the derived modalities, this formula can be rewritten as the signed formula F(>U A1 (s0 ) !
(>U A(s1 ) p)), where the automaton A1 has only one (final) state s0 connected to itself through a transition labelled a.
By applying the above construction starting from this formula, we obtain the graph in Figure 1(b), where for simplicity we have kept only the most significant formulas.
Every node of this graph contains a formula T(>U A(s1 ) p), and the only node which might fulfill the until formulas is node n3 , since it contains T(>U A(s3 ) p), with s3 final, and Tp.
However it is easy to see that not all infinite paths through n3 will be accepting.
For instance, in the path n1 , n2 , n3 , n4 , n3 , n4 , n3 , n4 , .
.
.
no occurrence of n3 fulfills the formula T(>U A(s1 ) p) in n2 , since the distance in this path between node n2 and any occurrence of n3 is odd, while all strings in L(A(s1 )) have even length.
We present now a different solution, derived from [6], where some of the nodes will be duplicated to avoid the above problem.
Before describing the construction of the graph, we make the following observation.
Let us assume that a node n contains the until formula TaU A(q) b, such that q is not a final state.
Since this formula has been W expanded with0 (R2), node n will also contain Thai q0 [?
]d(q,a) aU A(q ) b for some a.
Therefore, according to the construction of the successor nodes, 0 each successor node will contain a formula TaU A(q ) b, where q 0 [?]
d(q, a).
We say that this until formula is derived from formula TaU A(q) b in node n. On the other  hand, if q is a final state, then TaU A(q) b has been expanded with (R1), and two cases are possible: either n contains Tb or all successor nodes contain a derived until formula as described above.
If a node contains an until formula which is not derived from a predecessor node, we will say that the formula is new.
New until formulas are obtained during the expansion of the tableau procedure.
It is easy to see that if TaU A(q) b is a new formula, then aU A(q) b must be a subformula of the initial formula.
For instance, the formula T(>U A(s1 ) p) is new in each of the nodes in Figure 1.
Note that an until formula in a node might be both a derived and a new formula.
In that case we will consider it as a derived formula.
We can now show how the graph can be built and how the accepting conditions are formulated.
Each node of the graph is a triple (F, x, f ), where [?]
F is an expanded set of formulas, x [?]
{0, 1}, and f [?]
{|, }.
In order to formulate the accepting condition, we must be able to trace the until formulas along the paths of the graph to make sure that they satisfy the until condition.
Therefore we extend signed formulas so that all until formulas have a label 0 or 1, i.e.
they have the form Tl aU A(q) b where l [?]
{0, 1}.
For each node (F, x, f ), the label of an until formula in F will be assigned as follows.
If it is a derived until formula, then its label is the same as that of the until formula in the predecessor node it derives from.
Otherwise, if the formula is new, it is given the label 1 - x.
Of course function tableau must be suitably modified in order to propagate the label from an until formula to its derived formulas in the successor nodes, and to give the right label to new formulas.
To do this we assume that it has two parameters: a set of formulas and the value of x.
Function create graph in Figure 2 builds a graph G(ph), given an initial formula ph, by returning the triple hQ, I, [?
]i, where Q is the set of nodes, I the set of initial nodes and [?]
: Q x S x Q the set of labelled edges.
Note that two formulas T0 aU A(q) b and T1 aU A(q) b are considered to be different.
For instance, by applying create graph to the formula of Figure 1, we get two nodes ({T0 (>U A(s1 ) p), T0 (>U A(s2 ) p), T1 (>U A(s4 ) p)}, |, 1) and ({T0 (>U A(s1 ) p), T0 (>U A(s2 ) p), T0 (>U A(s4 ) p), T1 (>U A(s2 ) p)}, |, 1).
These two nodes correspond to node n4 in Figure 1.
States and transitions of the Buchi automaton B(ph) are obtained directly from the nodes and edges of the graph.
The set of accepting states[?
]consists of all states whose associated node contains f = .
Let r be a run of B(ph).
Since we identify states of the automaton with nodes of the graph, r can also be considered as an infinite path of G(ph), and r(t ) will denote a node of such a graph.
According to the construction of the graph, the  function create graph(ph) I := [?]
for all F [?]
tableau({Tph}, 0) [?]
I := I [?]
{(F, 0, )} end-for U := Q := I [?]
:= [?]
while U 6= [?]
do remove[?
]n = (F, x, f ) from U if f = then x0 := 1 - x else x0 := x end-if for all F 0 [?]
tableau({Ta|Thaia [?]
F}[?]
{Fa|Fhaia [?]
F}, x0 ) [?]
if f = then f 0 :=| 0 else if there exists no Tx aU A(q) b [?]
F 0 then [?]
f 0 := else f 0 :=| end-if end-if n0 := (F 0 , x0 , f 0 ) if [?
]n00 [?]
Q such that n00 = n0 then [?]
:= [?]
[?]
{(n, a, n00 )} else Q := Q [?]
{n0 } [?]
:= [?]
[?]
{(n, a, n0 )} U := U [?]
{n0 } end-if end-for end-while return hQ, I, [?
]i  [?]
[?]
(0, ), (1, |), .
.
.
, (1, |), (1, ), (0, |), .
.
.
, (0, |), [?]
(0, ), * * * Let us call 0-sequences or 1-sequences the sequences of nodes of r with x = 0 or x = 1 respectively.
If r is an accepting [?]
run, then it must contain infinitely many nodes containing , and thus all 0-sequences and 1-sequences must be finite.
Intuitively, every until formula contained in a node of a 0-sequence must be fulfilled within the end of the next 1sequence, and vice versa.
In fact, assuming that the formula has label 1, the label will be propagated to all derived formulas in the following nodes until a node is found fulfilling the until formula.
But, on the other hand, the 1-sequence terminates only when there are no more until formulas with label 1, and thus that node must be met before the end of the next 1-sequence.
3.3.
Correctness of the procedure The next proposition summarizes what we have already pointed out in the previous section.
Proposition 1 Assume that a node n of the graph contains Tl aU A(q) b, and let a be the label of the outgoing edges (remember that all outgoing edges from a node have the same label).
Then the following holds: if q is not a final state of A node n contains Ta and each outgoing edge leads to a node containing an until formula 0 Tl aU A(q ) b derived from Tl aU A(q) b in n, such 0 that q [?]
d(q, a) else, if q is a final state of A, either (a) node n contains Tb and no successor node contains a formula derived from Tl aU A(q) b, or (b) node n contains Ta and each outgoing edge leads to a node containing a derived until formula 0 Tl aU A(q ) b, such that q 0 [?]
d(q, a)  Figure 2.
Function create graph x and f values of the nodes of r have the following properties: [?]
* if a node contains (0, ) then its successor node contains (1, |) [?]
* if a node contains (1, ) then its successor node contains (0, |)  Given a run r, we will denote with r(t ).F the F field of the node r(t ), and similarly for the x and f fields.
* if a node contains (0, |)[?
]then its successor node contains either (0, |) or (0, )  1.
[?
]t 0 s.t.
t t 0 [?]
prf (s) : Tl aU A(q ) b [?]
r(t t 0 ).F and * q 0 [?]
dA (q, t 0 ) 5  * if a node contains (1, |)[?
]then its successor node contains either (1, |) or (1, )  2.
[?
]t 0 s.t.
t t 0 [?]
prf (s) : Tl aU A(q ) b [?]
r(t t 0 ).F, q 0 * is a final state, q 0 [?]
dA (q, t 0 ), Tb [?]
r(t t 0 ).F and no  Therefore the sequence of the x and f values in r will be as follows:  Proposition 2 Let s [?]
So and r : prf (s) -- Q be a (non necessarily accepting) run.
For each t [?]
prf (s), let r(t ) = (F, x, f ).
Then for each Tl aU A(q) b [?]
F one of the following holds: 0  0  5  * is the obvious extension of d to sequences dA A  successor node of r(t t 0 ) contains an until formula de0 rived from Tl aU A(q ) b.
Moreover, for every t 00 such that e <= t 00 < t 0 , Ta [?]
r(t t 00 ).F.
For each FaU A(q) b [?]
F the following holds: 3.
[?
]t 0 s.t.
t t 0 [?]
prf (s): if t 0 [?]
L(A(q)) then either Fb [?]
r(t t 0 ).F or there is t 00 such that e <= t 00 < t 0 , Fa [?]
r(t t 00 ).F.
Proof It follows from Proposition 1 and procedure create graph.
In an accepting run, case (2) must hold for all until formulas and all nodes.
This is proved in the following theorem, together with its converse.
Theorem 1 Let s [?]
So and r : prf (s) -- Q be a run.
Then, for each t [?]
prf (s) and for each Tl aU A(q) b [?]
r(t ).F, condition (2) of Proposition 2 holds if and only if r is an accepting run.
Proof If part: r is an accepting run.
As pointed out before the nodes of r are arranged in alternating 0-sequences and 1-sequences of finite length.
Then we can have the following cases: a) l = 0 and r(t ).x = 0.
Let us assume that condition (1) of Proposition 2 holds.
Then each node r(t t 0 ) following r(t ) in the same 0-sequence, will contain a derived formula T0 aU A(q) b (remember that the label of a derived formula cannot change).
On the other hand, the 0-sequence containing r(t ) is finite, and, by construction, the last node of this sequence does not contain any until formula labelled with 0.
Therefore the assumption is wrong, and condition (2) must hold.
b) l = 1 and r(t ).x = 1.
As case (a).
c) l = 1 and r(t ).x = 0.
Let us assume again that condition (1) of Proposition 2 holds.
Then each node r(t t 0 ) following r(t ) will contain an until formula derived from T1 aU A(q) b in r(t ).
All derived formulas will be labelled 1 up to the last node of the 0-sequence.
This label will necessarily propagate to the first node of the following 1-sequence, and we fall in case (b).
d) l = 0 and r(t ).x = 1.
As case (c).
Only if: condition (2) holds.
We show that all 0 and 1-sequences of r are finite.
This is true for the initial 0sequence, which consists only of the first node.
Let us assume now that a 0-sequence is finite.
We show that the following 1-sequence is also finite.
According to the construction, the last node of the 0-sequence can contain only until formulas with label 1.
The following 1-sequence goes on until its nodes contain some until formula with label 1.
Since condition (2) holds, for each of these until formulas there is a t 0 such that the successor node of r(t t 0 ) does not contain an until formula derived from it.
On the other hand  all new until formulas created in this 1-sequence will have label 0.
Therefore, if t max is the longest among all t 0 , after node r(t t max ) there will be no until formula labelled with 1, and the 1-sequence will terminate.
The same holds by replacing 0 with 1 and vice versa.
Lemma 1 Let s beVa set of W formulas V and tableau(s) = {s1 , .
.
.
, sn }.
Then s - 1<=i<=n si .
Proof All rules used by the function tableau correspond to equivalence formulas.
Lemma 2 Let M = (s, V ) be a model, t [?]
prf (s), and let such that M, t |= V n = (F, x, f ) be a node of the graph 0 F. Then there exists a successor n = (F 0 , x0 , f 0 ) of n V 0 such that M, t a |= F , where t a [?]
prf (s).
Moreover, if TaU A(q) b [?]
F 0 where q is a final state and M, t a |= Tb, then Tb [?]
F 0 .
Proof The proof comes from the construction and the previous lemma.
In particular the last part holds if, when expanding TaU A(q) b in F 0 with rule (R1), we choose the set containing Tb.
Theorem 2 Let M = (s, V ) and M, e |= ph.
Then s [?]
L(B(ph)).
Proof We show how to build an accepting run r of B(ph) over s. The first node of r is chosen by taking an initial V node n = (F, x, f ) of the graph such that M, e |= F. The following nodes of r are chosen by repeatedly applying Lemma 2.
To prove that the run is an accepting run, we have to show that all the until formulas are fulfilled.
Assume that TaU A(q) b occurs on the run at r(t ).
Then, for the choice of the run r, it must be that M, t |= aU A(q) b.
By definition of satisfiability we have that there exists t 0 [?]
L(A(q)) such that t t 0 [?]
prf (s) and M, t t 0 |= b.
Moreover, for every t 00 such that e <= t 00 < t 0 , M, t t 00 |= a.
As t 0 [?]
L(A(q)), by the choice of run r and the construction * of the automaton, there must be a final state q 0 [?]
dA (q, t 0 ) A(q 0 ) 0 such that TaU b belongs to r(t t ).F.
Moreover for all t 00 such that e <= t 00 < t 0 , Ta belongs to r(t t 00 ).F.
By Lemma 2, Tb also belongs to r(t t 0 ).F.
Hence, condition (2) of Proposition 2 holds and we can conclude, by Theorem 1, that r is an accepting run.
Given a set F of signed formulas, we define the sets P os(F) and N eg(F) respectively as the sets of positive and negative propositions in F, i.e.
P os(F) = {p [?]
P|Tp [?]
F}, and N eg(F) = {p [?]
P|Fp [?]
F}.
Theorem 3 Let s [?]
L(B(ph)).
Then there is a model M = (s, V ) such that M, e |= ph.
Proof Let r be an accepting run.
for each t [?]
prf (s) let r(t ) = (Ft , xt , ft ).
The model M = (s, V ) can be obtained by defining V (t ) [?]
2P such that V (t ) [?]
P os(Ft ) and V (t ) [?]
N eg(Ft ) = [?].
It is easy to prove by induction on the structure of formulas that, for each t and for each formula a, if Ta [?]
Ft then M, t |= a, and if Fa [?]
Ft then M, t 6|= a.
In particular, for until formulas labelled T we make use of Theorem 1 and of Proposition 2, case 2, while for until formulas labelled F we make use of Proposition 2, case 3.
From Tph [?]
F2 , it follows that M, 2 |= ph.
3.4.
Complexity It is known that for p [?]
P rg(S), we can construct in polynomial time a non-deterministic finite state automaton A with L(A) = [[p]] such that the number of states of A is linear in the size of p [7].
The expansion of each until formula aU A(q) b in the initial formula ph introduces at most a number of formulas which is linear in the size of A and, hence, is linear in the size of p. In fact, observe that the expansion of the until formula aU A(q) b (and its descendants) 0 introduces at most |QA | subformulas of the form aU A(q ) b, with q 0 [?]
QA .
Let a1 U p1 b1 ,....,an U pn bn be all the until formulas occurring in the initial formula ph.
It must be that |p1 | + .
.
.
+ |pn | <= |ph|.
Hence, the number of until formulas which are introduced in the construction of the automaton is linear in the size of the initial formula ph.
Therefore, in the worst case, the number of states of the Buchi automaton is exponential in the size of |ph|.
4.
Conclusions In this paper we have presented a tableau-based algorithm for constructing a Buchi automaton from a DLT L formula.
The formula is satisfiable if the language recognized by the automaton is nonempty.
The construction of the states of the automaton can be done on-the-fly during the search that checks for emptiness.
As in [6] we make use of finite automata to verify the fulfillment of until formulas.
However, the construction of the automaton given in [6] is based on the idea of generating all the (maximally consistent) sets of the subformulas of the initial formula.
Moreover, rather then introducing the states of the finite automata in the global states of the Buchi automaton, we stay closer to the standard construction for LTL [2] and we detect the point of fulfillment of the until formulas by associating a finite automaton with each until formula (rather than a regular expression) and by keeping track of the evolution of the state of these (finite) automata during the expansion of temporal formulas.
This construction could be improved in various ways, in particular by adopting the techniques presented in [1].
5.
Acknowledgements This research has been partially supported by the project MIUR PRIN 2003 "Logic-based development and verification of multi-agent systems".
References [1] M. Daniele, F. Giunchiglia and M.Y.
Vardi.
Improved automata generation for linear temporal logic.
In Proc.
11th CAV, Springer LNCS vol.
1633, pp.
249-260, July 1999.
[2] R. Gerth, D. Peled, M.Y.
Vardi and P. Wolper.
Simple on-thefly automatic verification of linear temporal logic.
In Proc.
15th work.
Protocol Specification, Testing and Verification, Warsaw, June 1995.
[3] L.Giordano, A.Martelli, and C.Schwind.
Reasoning about actions in dynamic linear time temporal logic.
Logic Journal of the IGPL, 9(2):289-303, 2001.
[4] L. Giordano, A. Martelli, and C. Schwind.
Specifying and Verifying Systems of Communicating Agents in a Temporal Action Logic.
In Proc.
AI*IA'03, Pisa, Springer LNCS vol.
2829, pp.
262-274, September 2003.
[5] J.G.
Henriksen and P.S.
Thiagarajan.
A Product Version of Dynamic Linear Time Temporal Logic.
In CONCUR'97, 1997.
[6] J.G.
Henriksen and P.S.
Thiagarajan.
Dynamic Linear Time Temporal Logic.
In Annals of Pure and Applied logic, vol.96, n.1-3, pp.187-207, 1999.
[7] J. Hromkovic, S. Seibert and T. Wilke.
Translating Regular Expressions into Small e-Free Nondeterministic Finite Automata.
In Proc.
STACS'97, Springer LNCS vol.
1200, pp.
55-66, 1997.
[8] F. Somenzi and R. Bloem.
Efficient Buchi automata from LTL formulae.
In Proc.
12th CAV, Springer LNCS vol.
1855, pp.
247-263, 2000.
[9] M. Vardi and P. Wolper.
Reasoning about infinite computations.
In Information and Computation 115,1-37 (1994).
[10] P. Wolper.
Temporal logic can be more expressive.
In Information and Control 56,72-99 (1983).
[11] P. Wolper.
Constructing Automata from Temporal Logic Formulas: A Tutorial.
In Proc.
FMPA 2000, Springer LNCS vol.
2090, pp.
261-277, July 2000.