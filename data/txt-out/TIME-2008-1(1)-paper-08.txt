A Labeled Tableaux System for the Distributed Temporal Logic DTL David Basin Department of Computer Science, ETH Zurich, Switzerland basin@inf.ethz.ch Carlos Caleiro Jaime Ramos SQIG-Instituto de TelecomunicacESSoEes and Department of Mathematics, IST, TU Lisbon, Portugal {ccal | jabr}@math.ist.utl.pt Luca ViganoE Department of Computer Science, University of Verona, Italy luca.vigano@univr.it  Abstract DTL is a distributed temporal logic for reasoning about temporal properties of distributed systems from the local point of view of the systemas agents, which are assumed to execute sequentially and to interact by means of synchronous event sharing.
We present a sound and complete labeled tableaux system for future-time DTL.
To achieve this, we first formalize a labeled tableaux system for reasoning locally at each agent, which provides a system for full future-time LTL, and afterwards we combine the local systems into a global one by adding rules that capture the distributed nature of DTL.
1  Introduction  The distributed temporal logic DTL [8] is a logic for reasoning about temporal properties of distributed systems from the local point of view of the systemas agents, which are assumed to execute sequentially and to interact by means of synchronous event sharing.
Distribution is implicit and properties of entire systems are formulated in terms of the local properties of the agents and their interaction.
DTL is closely related to the family of temporal logics whose semantics are based on the models of true concurrency introduced and developed in [14, 15, 19].
In particular, the semantics of these logics are based on a conflict-free version of Winskelas event structures [26], enriched with information about sequential agents.
Different versions have been given, reflecting different perspectives on how nonlocal information can be accessed by each agent.
DTL was first proposed in [8] as a logic for specifying  and reasoning about distributed information systems.
The logic has also been used in the context of security protocol analysis for reasoning about the interplay between protocol models and security properties [3, 4].
However, all of the previous results have been obtained directly by semantic arguments.
It would be reassuring, and useful in general, to have a usable deductive system for DTL.
An attractive possibility in this regard is a labeled tableaux system as deductions will then closely follow semantic arguments.
In this paper, we present a sound and complete labeled tableaux system for future-time DTL.
Our main contributions are two-fold.
First, we introduce a labeled tableaux system for full future-time LTL, where reasoning is local.
Due to lack of space, we do not consider here past-time operators like since, although all the results presented in this paper extend straightforwardly to full LTL (and thus to full DTL) as we show in [1].
Second, we combine the LTL systems local to each agent with rules that capture the distributed nature of DTL, via communication.
The tableaux systems for local reasoning (in LTL) are, as expected, built from formulas labeled with local state information and relations between these labels (order and equality).
We integrate these systems into a system for global reasoning, where we introduce an additional relation expressing synchronization.
We prove the soundness and completeness of the system with respect to DTL entailment and provide examples of its use.
We have not, for now, addressed the question of efficient proof search and have included an infinite closure rule that captures eventualities which are always delayed.
Note, in this regard, that DTL entailment is decidable as it can be reduced to entailment in LTL by a suitable polynomial-time syntactic translation and linearization of the distributed models.
Here we use the subscript aS to denote the reflexive versions of the operators.
Note also that calling is specific to DTL as it involves communication: @i [D j D] means that if D holds for agent i then he calls (synchronizes with) agent j, for whom D must hold.
A local life-cycle of an agent i is a countable (finite or infinite), discrete, well-founded, total order Iti = hEi , a$?i i, where Ei is the set of local events and a$?i the local order of causality.
We define the corresponding local successor relation ai a Ei A Ei to be the relation such that e ai e0 if e <i e0 and there is no e00 such that e <i e00 <i e0 .
As a consequence, we have that a$?i = aai , i.e., a$?i is the reflexive and transitive closure of ai .
A distributed life-cycle is a family It = {Iti }iaId of loS cal life-cycles such that a$?
= ( iaId a$?i )a defines a partial S order of global causality on the set of all events E = iaId Ei .
Note that communication is modeled by event sharing and thus for some event e we may have e a Ei aS Ej for i 6= j.
In that case, requiring a$?
to be a partial order amounts to requiring that the local orders are globally compatible, thus excluding the existence of another e0 a Ei aSEj where both e <i e0 and e0 <j e. A local state of agent i is a finite set Iz a Ei that is downward-closed for local causality, i.e., if e a$?i e0 and e0 a Iz then also e a Iz.
The set Ii of all local states of an agent i is totally ordered by inclusion and has a as the minimal element.
In general, each non-empty local state Iz is reached from the local state Iz \ {last i (Iz)} by the occurrence of an event that we call last i (Iz).
The local states of each agent are totally ordered as a consequence of the total order on local events.
Since they are discrete and well-founded, we enumerate them as follows: a is the 0th state; {e}, where e is the minimum of hEi , a$?i i, is the first state; and, in general, if Iz is the k th state of agent i and last i (Iz) ai e0 , then Iz aS {e0 } is the (k+1)th state of agent i.
We denote by Izik the k th state of agent i. Izi0 = a is the initial state and Izik is the state reached from the initial state after the occurrence of the first k events.
In fact, Izik is the only state of agent i that contains k elements, i.e., where |Izik | = k. Given e a Ei , observe that (e a i) = {e0 a Ei | e0 a$?i e} is always a local state.
Furthermore, if Iz is non-empty, then (last i (Iz) a i) = Iz.
An interpretation structure Al = hIt, Di consists of a distributed life-cycle It and a family D = {Di }iaId of labeling functions.
For each i a Id, Di : Ii a a(Propi ) associates a set of local state propositions to each local state.
We denote hIti , Di i by Ali and define the global satisfaction relation by  However, the distributed properties expressible in DTL are trace-consistent, or invariant under different linearizations, and this suggests developing a simpler, dedicated deductive system for DTL along the lines that we follow here.
We proceed as follows.
In ASS2, we introduce DTL.
In ASS3, we present our tableaux system for local reasoning and establish its soundness and completeness with respect to entailment.
In ASS4, we extend our local system into a system for global reasoning by including a new synchronization relation between local labels and we also prove soundness and completeness with respect to entailment.
We conclude, in ASS5, by comparing with related work and discussing future work.
Due to lack of space, examples have been shortened and proofs have been omitted; full details are given in [1].
Applications of the logic are also presented in [1], as well as in [3, 4, 8, 9].
2  The distributed temporal logic DTL  2.1  The syntax and semantics of DTL  DTL is defined over a distributed signature IL = hId, {Propi }iaId i of a system, where Id is a finite set of agents and, for each i a Id, Propi is a set of local state propositions.
The global language LDTL is defined by the grammar LDTL ::= @i1 [Li1 ] | AV AV AV | @in [Lin ] , for Id = {i1 , .
.
.
, in }.
The local languages Li , for each i a Id, are in turn defined by Li ::= Propi | AZ Li | Li a Li | F Li | G Li | X Li | c j [Lj ] , Li W Li |  with j a Id.
A global formula @i [D] means that D holds for agent i.
Local formulas, as the name suggests, hold locally for the different agents.
For instance, locally for an agent i, the operators F, G, X, and W are the usual sometime in the future, always in the future, next, and weak until (unless) temporal operators, respectively, while the communication c j [D] means that agent i has just communicated formula  (synchronized) with agent j, for whom D held1 .
We will 6c use L i to denote the set of all purely temporal formulas of Li , that is, excluding communication formulas.
Other logical connectives (conjunction, disjunction, etc.)
and temporal operators can be defined as abbreviations, e.g.
: DUD FaS D GaS D D j D  aA aA aA aA  (F D) aSS (D W D) D a" FD D aSS GD c j [D] Da  aV Al DTL @i [D] iff Ali i D iff Ali , Iz i D for every Iz a Ii ,  strong until; now or sometime in the future; now and always in the future; calling.
where the local satisfaction relations at local states are defined by aV Ali , Iz i p if p a Di (Iz);  1 Note  that the DTL syntax here differs from, and improves upon, the c i was overloaded original presentation in [8].
Previously, the operator  with @i and its interpretation was therefore context dependent.
aV Ali , Iz i AZ D if Ali , Iz 6i D; aV Ali , Iz i D a D if Ali , Iz 6i D or Ali , Iz i D;  2  aV Ali , Iz i F D if |Iz| = k and there exists Izin a Ii such that k < n with Ali , Izin i D;  distributed model, as opposed to checking all possible linearizations.
This makes DTL properties particularly wellsuited for efficient model checking using partial-order reduction techniques [17], which was explored in [9].
Furthermore, this fact suggests that proof techniques tailored directly to DTL might have advantages over off-the-shelf techniques operating on the translations in LTL.
This is yet another motivation for developing a labeled tableaux system for DTL.
aV Ali , Iz i G D if |Iz| = k and Ali , Izin i D for every Izin a Ii such that k < n; aV Ali , Iz i X D if |Iz| = k, Izik+1 exists and Ali , Izik+1 i D; aV Ali , Iz i D W D if |Iz| = k and Ali , Izin i D for every Izin a Ii with k < n; or there exists Izin a Ii such that k < n with Ali , Izin i D, and Ali , Izim i D for every k < m < n; c j [D] if |Iz| > 0, last i (Iz) a Ej , and Alj , (last i (Iz) a aV Ali , Iz  i  j) j D.  The satisfaction conditions for the connectives and the temporal operators defined as abbreviations can be obtained from the primitive ones in a straightforward way.
For example, for strong until we have that  3  We start by developing a labeled tableaux system for reasoning locally at each agent.
This essentially amounts to a tableaux system for full future-time LTL (see [1] for the extension with past-time operators).
From now on, we consider fixed a distributed signature IL.
Our tableaux for local reasoning handles four kinds of local judgments for each agent i a Id: labeled local formulas (excluding communication), equality between labels, inequality between labels, and a special judgment indicating absurdity.
Local labels denote the local states of agent i.
To define the language of labels, for the given signature IL, we assume fixed a family V = {V i }iaId of sets of label variables and also use a family F = {Fi }iaId of sets of Skolem function symbols defined as follows:  aV Ali , Iz i D U D if |Iz| = k and there exists Izin a Ii such that k < n with Ali , Izin i D, and Ali , Izim i D for every k < m < n.  We say that Al is a model of I a LDTL if Al globally satisfies each of the formulas in I, and given I' a LDTL we say that I entails I', written I DTL I', if every global model of I is also a model of I'.
Given IS aS {D} a Li , we write IS i D to denote the fact that every local model of IS is also a model of D or, equivalently, that {@i [D] | D a IS} DTL @i [D].
c j [X q]] holds in a model if For instance, @i [p a F  whenever proposition p holds locally at a state of agent i then there must be a future state of agent i where he has just synchronized with agent j, for whom q will hold in the next state.
Additional examples can be found in [1].
Note that, as is well known, the expressive power of the U operator is exactly the same of the set {F, G, X, W}.
This can be seen from the following equivalences.
FD GD XD DWD  2.2  aA aA aA aA  >UD AZFAZD aLUD (G D) a" (D U D)  Tableaux for local reasoning  Fi  6 6  = {fDWD | D, D a L i } aS {fAZ(DWD) | D, D a Li }.
c  c  Note that while N denotes the natural numbers with 0, we write N+ to denote the positive natural numbers, N \ {0}.
The syntax of the local labels of agent i is defined by  sometime in the future; always in the future; tomorrow (next); weak until (unless).
Ti ::= N | V i + Z | Fi (Ti ) + Z , Si ::= (i, Ti ).
Labels involving the Skolem function symbols will be used in the tableaux to guarantee the existence of certain local states associated with the satisfaction of formulas involving the weak until.
Although the use of fresh variables suffices in some cases, weak until, as well as its negation, may require the existence of states in the model with specific properties.
This requirement makes the use of the Skolem functions an essential ingredient of our system.
We write v to denote an arbitrary label variable, x, y, and z to denote arbitrary label terms, and si to denote an arbitrary element of Si .
We abbreviate x + 0 as x and if c a N+ then we write x a c instead of x + (ac), as usual.
The syntax of local judgments of agent i can now be defined by  Decidability of DTL  It is not difficult to show, as suggested in [8], that DTL is decidable by means of a translation to LTL.
We omit this translation for the sake of space and refer the reader to [1].
Since LTL is decidable, any decision procedure for LTL entailment can thus also be used for DTL (and since our translation is polynomial, the asymptotic complexity is identical).
The translation relies on the fact that given a distributed life-cycle It = {hEi , a$?i i}iaId , it is always possible to linearize the global order on events hE, a$?i: one can define an injective function f : E a N that preserves the global causality relation, i.e., if e < e0 then f (e) < f (e0 ).
However, the result given in [1] is actually independent of the chosen linearization function f and in general there may be many such functions.
This means that DTL is traceconsistent in the sense of [24]; namely, DTL properties can be checked by considering one arbitrary linearization of the  6 Ji ::= Si : L i | Si = Si | Si < Si | c  s0i  s00i  CLOSED .
When convenient, we write si < < instead of si < s0i and s0i < s00i .
The intended meaning of a labeled formula 3  aV Al, D  si = s0i if [[si ]]Al,D and [[s0i ]]Al,D are both defined and [[si ]]Al,D = [[s0i ]]Al,D ;  si : D is that D holds at the local state (denoted by) si of agent i. Equalities and inequalities of local labels of agent i are interpreted directly over the causality ordering.
To make this formal, we extend our notion of interpretation structure with information concerning labels: we interpret labels as natural numbers in such a way that the interpretation of a given local label identifies, by its value, the local state of the corresponding agent.
An assignment on label variables is a function Di : V i a N. We also need to consider a fixed interpretation structure Al.
The denotation of labels over Al and D = {Di }iaId , for each agent i a Id, in symbols [[AV]]Al,D : Si a N, is defined as the following partial function:  aV Al, D  si < s0i if [[si ]]Al,D and [[s0i ]]Al,D are both defined and [[si ]]Al,D < [[s0i ]]Al,D ; aV Al, D 6  [[s ]]  Recall that Izi i Al,D denotes the [[si ]]th Al,D local state of agent i in Al.
We can finally define our tableaux for local reasoning.
Definition 3.1 The local tableaux system Ti , for agent i a Id, built over sets of local judgments in Ji , consists of the rules shown in Figures 1a2.
  aV [[(i, k)]]Al,D = k;  We assume that the reader is familiar with standard terminology and notation for tableaux, for example from [7].
As usual, a branch of a (possibly infinite) tableau is exhausted if no more rules are applicable, closed if it contains CLOSED, and open if it is exhausted but not closed.
A tableau is closed if all of its branches are closed.
Figure 1 contains the rules for the logical connectives, which are straightforward, and the rules for the temporal operators, most of which are standard.
For instance, the rule (F) guarantees that in order for F D to hold at state x, there must exist a future state v where D holds, which is enforced by the freshness of v (i.e., v is a new variable, not occurring in the tableaux).
In contrast, the rule (AZ F) concludes that if AZ F D holds at state x then D cannot hold in any state y in the future of x.
The additional premise (i, y) : D is there only to control the introduction of labeled formulas.
The rules (G) and (AZ G) are justified similarly.
The rule (X) simply requires the existence of a suitable next state.
The rule (AZ X) follows a pattern similar to the ones above.
The rules for weak until follow closely the operatoras semantics, but some explanation is needed to clarify the use of the Skolem function symbols.
Rule (W1 ) splits the satisfaction of DWD at state x into two cases: either D holds always in the future, or there is a future state fDWD (x) where D holds.
Of course, this future state, which we have required to be the earliest possible, defines together with x an interval where D must hold.
These requirements are then imposed by rule (W2 ), hence justifying the use of the Skolem function fDWD .
The rules for negated weak until (AZ W1 ) and (AZ W2 ) are similar.
The rules in Figure 2 define the properties of the relations.
Note that we use I,(i, x) to denote any local judgment of agent i where x occurs.
The rule (P OS) states that the values of the labels are either 0 or greater than 0.
The rule (C ONG) expresses the congruence of =, i.e., if two labels (i, x) and (i, y) denote the same local state, then we may replace some occurrences of x by occurrences of y in any judgment.
Similarly, rule (R EFL) asserts the reflexivity of equality.
With rule (F ILL), we afill downa the set of states: if (i, x) denotes a state and if (i, y) is smaller than (i, x), then it should also denote a state (which we express by having truth hold there).
(T R) forces the order relation to be  aV [[(i, v)]]Al,D = Di (v); aV [[(i, fDWD (x))]]Al,D = n provided that a [[(i, x)]]Al,D is defined; a n > [[(i, x)]]Al,D is the least number, if it exists, such that aS Izin a Ii and Ali , Izin i D; aS Ali , Izik i D, for every k such that [[(i, x)]]Al,D < k < n; aV [[(i, fAZ(DWD) (x))]]Al,D = n, provided that a [[(i, x)]]Al,D is defined; a n > [[(i, x)]]Al,D is the least number, if it exists, such that aS Izin a Ii , Ali , Izin 6i D and Ali , Izin 6i D; aS Ali , Izik 6i D, for every k such that [[(i, x)]]Al,D < k < n; aV [[(i, x + k)]]Al,D = [[(i, x)]]Al,D + k, provided that [[(i, x)]]Al,D is defined and [[(i, x)]]Al,D + k aL 0.
For simplicity, when [[(i, x)]]Al,D depends only on D, we may write Di (x).
One reason why the denotation of labels is partial is that we do not consider negative values.
This is, however, unproblematic as the labels appearing in relevant places in our tableaux will always denote non-negative values.
A second reason for the partiality is due to the interpretations of the Skolem functions.
The interpretations of the function symbols for negated weak until fAZ(DWD) are defined depending on the satisfaction of the corresponding formulas AZ(DWD), in which case the interpretations will have the value of the first state in the future where D does not hold.
The interpretations of the function symbols for weak until (i.e., fDWD ) do not mimic the satisfaction of the corresponding formulas so closely.
Actually, it is enough for our purposes that they are only defined under the assumption that D does not hold forever in the future.
In this case, their interpretations will take the value of the first state where D holds.
In any case, the relevant labels of this form appearing in our tableaux will always arise in contexts where their denotation is defined.
We can now define the satisfaction of local judgments of agent i at Al, given an assignment D: [[si ]]Al,D  aV Al, D  si : D if [[si ]]Al,D is defined, Izi [[s ]] Ali , Izi i Al,D  CLOSED .
a Ii , and  i D;  4  si : AZ D  si : D  si : AZ AZ D (AZ AZ) si : D  CLOSED  (i, x) : F D (i, x) < (i, v) , (i, v) : D (i, x) : G D  (i, y) : D  (i, y) : D (i, x) : X D  (i, x) < (i, y)  (i, y) : D  (i, y) : AZ D (i, x) : AZ G D  (G)  (i, x) < (i, y)  (i, y) : D  (i, x + 1) : AZ D  (i, x) : D W D (i, x) : G D | (i, x) < (i, fDWD (x)) , (i, fDWD (x)) : D  (W1 )  (i, x) : AZ(D W D) (i, x) < (i, fAZ(DWD) (x)) , (i, fAZ(DWD) (x)) : AZ D , (i, fAZ(DWD) (x)) : AZ D  (AZ F)  (AZ G) [v fresh]  (i, x) < (i, v) , (i, v) : AZ D  (i, x) : AZ X D  (X)  (i, x + 1) : D  (i, x) : AZ F D  (F) [v fresh]  (i, x) < (i, y)  si : AZ(D a D) (AZ a) s i : D , si : AZ D  si : D a D (a) si : AZ D | s i : D  (A BS)  (AZ X)  (i, x) < si < (i, fDWD (x)) s i : D , si : AZ D  (W2 )  (i, x) < si < (i, fAZ(DWD) (x))  (AZ W1 )  s i : AZ D , si : D  (AZ W2 )  Figure 1.
Rules for the logical connectives and the temporal operators.
I,(i, x) (i, x) = (i, 0) | (i, 0) < (i, x) I,(i, x)  (i, x) = (i, y)  (P OS)  I,(i, y)  I,(i, y + c)  (i, x + c) < (i, y + c) (i, 0) < (i, x) (i, x a 1) < (i, x)  (T R)  (RS HIFT) [c > 0]  (P RED)  (C ONG)  I,(i, y)  (i, x) < (i, y) | (i, x) = (i, y) | (i, y) < (i, x) (i, x) < (i, y)  I,(i, x)  (i, x) < (i, y)  I,(i, y + c)  (i, x) < (i, y + c) (i, x) < (i, y)  I,(i, x + c)  (i, x + c) < (i, y + c)  (i, x) < (i, x + c) CLOSED  (NL OOP) [c a$?
0]  I,(i, x) (i, x) = (i, x)  si : D  (R EFL)  s0i  s0i < si :>  (i, x) < (i, y) < (i, z)  (M ON) [c > 0]  (i, x) < (i, z a 1)  (LS HIFT) [c < 0]  I,(i, x + 1) (i, x) < (i, x + 1)  (i, x + c) < (i, y) CLOSED  aa c aL 0  (F ILL)  (DT RANS)  (S UCC)  (I NF)  Figure 2.
Rules for the relations.
trichotomic2 .
(M ON) is a form of transitivity, given that y precedes y + c when c > 0.
(DT RANS) is discrete transitivity: if (i, x) is smaller than (i, y) and (i, y) is smaller than (i, z), then (i, x) is also smaller than (i, z).
In fact, our rule is more specific and formalizes that (i, x) is actually smaller than (i, za1).
(RS HIFT) and (LS HIFT) shift the precedence order along with addition, taking care that no new states are introduced.
(S UCC) and (P RED) order successive states in appropriate conditions.
The closure rule (NL OOP) states that x cannot precede x + c when c a$?
0.
Finally, (I NF) is an infinitary closure rule: if in a branch there are infinitely many, distinct, non-negative constants that when added to (i, x) denote a value smaller than (i, y), then the branch is closed.
We illustrate the use of the tableaux system with an ex-  ample.
To prove that ((DWD)aSSX(AZ D))aX D is a theorem, we give a closed tableau in Figure 3 for the negated formula.
Further examples are provided in [1].
Note that we do not claim the independence of all the proposed rules of our tableaux system Ti .
For instance, it is easy to obtain the rule (NL OOP) from (I NF) by infinitely many applications of (RS HIFT) and (DT RANS).
We leave the identification of a minimal, equivalent, set of rules for future work and instead we now establish the soundness and completeness of Ti .
We first consider soundness, where, as usual, a rule is sound if every model that satisfies its premises also satisfies at least one of its conclusions.
Of course, a closure rule, i.e., a rule whose conclusion is CLOSED , is sound if no model satisfies its premises.
Proposition 3.2 The rules of Ti are sound.
2 Note  that the trichotomy rule may lead to considerable branching in the tableaux.
In [1], we have replaced this rule by a set of rules that permit only controlled forms of trichotomy.
Before we proceed to the completeness result, we recall [18] some technical results about integer constraints 5  (i, v) : AZ(((D W D) aSS X(AZ D)) a X D) AZa  (i, v) : (D W D) aSS X(AZ D) (i, v) : AZ X D aSS  (i, v) : (D W D) (i, v) : X(AZ D) X (i, v + 1) : AZ D S UCC  (i, v) < (i, v + 1) UUUU kkk UUUU W1 k k k k UUUU kkk UUUU k k k k kk (i, v) < (i, fDWD (v)) (i, v) : G D (i, fDWD (v)) : DRR RRR T R iiii i i RRR i ii G RRR i i i i RR i i i (i, v + 1) < (i, fDWD (v)) (i, v + 1) = (i, fDWD (v)) (i, fDWD (v)) < (i, v + 1) (i, v + 1) : D AZX  (i, v + 1) : AZ D A BS  C LOSED  W2  DT RANS  C ONG  (i, v + 1) : D (i, v + 1) : AZ D  (i, v + 1) : D  AZX  (i, v) < (i, v) NL OOP  A BS  (i, v + 1) : AZ D  C LOSED  C LOSED  A BS  C LOSED Figure 3.
Tableau for AZ(((D W D) aSS X(AZ D)) a X D).
c  of the form x a$?
y, where (i, x) and (i, y) are local labels in Si .
It is clear that any such constraint is of the form u1 + n a$?
u2 + m, where u1 and u2 are either label variables, label terms whose head is a Skolem function, or 0.
Let A = {A1 , A2 , .
.
. }
be a (possibly infinite) set of such constraints.
The constraint graph for A is a weighted, directed graph GA = hVA , EA i constructed as follows:  As notation, u1 a u2 represents the directed edge (u1 , u2 ) with weight c. Intuitively, this means that u1 is at most c larger than u2 .
So, for instance, edges of the sec0 ond kind, 0 a u, express that 0 a$?
u + 0, which is satisfied when u is non-negative, i.e., a natural number.
As usual, a path p in a graph is a finite sequence of vertices u1 , .
.
.
, un , where (ui , ui+1 ) is an edge, for all i such that 1 a$?
i a$?
n. The weight of a path is the sum of the weights of its edges.
aV VA = V(A) aS {0}, where V(A) is the set of V i variables and of label terms headed by a Skolem function occurring in A3 ; man  Lemma 3.3 A (possibly infinite) set of constraints A is satisfiable if and only if for each non-zero node in GA , there exists a minimum-weight path in GA among all the paths from 0 to that node.
0  aV EA = {u1 aa u2 | u1 + n a$?
u2 + m a A} aS {0 a u | u a V(A)}.
In our tableaux, every judgment of the form (i, x) < (i, y) can be equivalently stated as a constraint of the form  3 At this point, labels whose head is a Skolem function symbol are treated as if they were simply variables.
6  x a$?
y a 1.
Similarly, a judgment of the form (i, x) = (i, y) can be equivalently formalized as the pair of constraints x a$?
y and y a$?
x.
We can now prove our completeness result for the tableaux system Ti .
Since the Skolem function symbols are intended to be used only as an internal tool of the system, we will assume that the initial set of judgments contains no Skolem functions at all.
Note, still, that this requirement could be dropped if we added additional constraints to the graphs GA , (1) imposing the required ordering between labels whose head is a Skolem function and their subterms (e.g., stating that (i, si ) < (i, fDWD (si ))), and (2) splitting the rules (W1 ) and (AZ W1 ) in two, one for introducing the Skolem symbols and another for introducing their properties.
where the local judgments are extended to also incorporate communication formulas Ji ::= Si : Li | Si = Si | Si < Si |  The intended meaning of a synchronization judgment (i, x) ./ (j, y) is that the event leading to state x of agent i is synchronized with the event leading to state y of agent j. Semantically, we require a distributed assignment on label variables D = {Di }iaId .
The denotation of labels is defined as before.
The satisfaction of judgments is also just extended with aV Al, D  si  =  [[sj ]]Al,D  6= a, Izj  6= a and  [[s ]] last j (Izj j Al,D ).
We finally define our tableaux for global reasoning, which we show to be sound and complete.
Definition 4.1 The global tableaux system T for DTL, built over sets of global judgments in J , consists of the rules of Ti for each agent i a Id, together with the global rules in Figure 4.
We can then reason about entailment in the logic: Corollary 3.5 Given IS aS {D} a Li , IS i D if and only if every exhausted Ti -tableau for {(i, 0) : GaS D | D a IS} aS {(i, v) : AZ D} is closed.
Figure 4 contains the rules for communication and sync and chronization.
The rules for communication, () c follow closely the semantics.
Consider, for instance, (AZ ), c if agent i, in state x, just communicated with agent j, (): for whom D held, then the event leading to state x is synchronized with an event leading to some state v of agent j, where D holds (and where v is fresh).
The rules for synchronization are also quite intuitive.
For instance, (E VT) guarantees that since there is no event leading to the initial state, synchronization is not possible.
The rules (S YM), (S ELF), and (T RANS) are straightforward.
The rule (O RDER) guarantees that local orders are globally compatible.
If there is a chain of synchronizations linking two events of agent i, then these two events preserve the ordering imposed by the synchronization chain.
For instance, assume that the events leading to states si and s0i of agent i have just synchronized with the events leading to states sj and s0j of agent j, respectively.
Furthermore, assume that sj precedes s0j .
Then this order must be reflected in agent i and so si must precede s0i .
This extends to more than two agents in a straightforward way.
The tableau in Figure 3 shows that i ((D W D) aSS X(AZ D)) a X D.  Tableaux for global reasoning  Our aim is to build a tableaux system T for full DTL by capitalizing on the local tableaux systems for each agent i a Id.
We will now introduce an additional kind of global judgment: synchronization between labels.
Labeled local formulas will also be unrestricted, i.e., communication formulas are allowed.
Of course, the language of labels is now distributed.
That is, if Id = {i1 , .
.
.
, in } then S ::= Si1 | AV AV AV | Sin , where the local labels of agent i are defined, as before, by Ti ::= N | V i + Z | Fi (Ti ) + Z , Si ::= (i, Ti ),  Proposition 4.2 The rules of T are sound.
The completeness of T builds on the completeness result for each of the local systems Ti .
but where the Skolem function symbols extend now also to formulas involving communication, that is, Fi  [[si ]]Al,D  ./ sj if Izi  [[s ]] last i (Izi i Al,D )  Proposition 3.4 Let I be a set of local judgments without Skolem functions.
Then I is satisfiable if and only if there is a Ti -tableau for I with an open branch.
4  CLOSED .
Proposition 4.3 T is complete, i.e., a set of global judgments I without Skolem functions is satisfiable if and only if there is a T -tableau for I with an open branch.
= {fDWD | D, D a Li } aS {fAZ(DWD) | D, D a Li }.
The syntax of global judgments can now be defined by J ::= Ji1 | AV AV AV | Jin | Si ./ Sj ,  We can then reason about entailment in DTL: 7  c j [D] (i, x) :  (j, v) : D , (i, x) ./ (j, v) (i, x) ./ (i, y) (i, 0) < (i, x)  (E VT) si1 ./ si2  c jD (i, x) : AZ   c [v fresh] ()  si ./ sj sj ./ si (S YM) si2 < s0i2  s0i2 ./ si3  (i, x) ./ (j, y) c (AZ )  (j, y) : AZ D si ./ s0i si = s0i si3 < s0i3  si1 < s0i1  (S ELF) ...  si ./ sj sj ./ sk (T RANS) si ./ sk s0ip ./ s0i1  (O RDER)  Figure 4.
Rules for communication and synchronization.
Corollary 4.4 Given I aS {@i [D]} a L, I DTL @i [D] if and only if every exhausted T -tableau for {(j, 0) : G0 D | @j [D] a I} aS {(i, v) : AZ D} is closed.
past and future-time DTL, and plan to report on this soon.
This might be useful since, as noted in the introduction, we have not yet addressed the question of efficient proof search and have thus considered an infinite closure rule that captures eventualities which are always delayed.
We will address alternative rules, leading to more efficient deduction, in future work, by adding loop checking as is usually done.
When doing so, we also expect to be able to capitalize on having based our tableaux system on constraint graphs.
Actually, in the finite case, our Lemma 3.3 is well known to amount to checking that there are no cycles with negative sum in the graph [18], which can be done efficiently using the Bellman-Ford algorithm [6].
For example, as is done in [1], we can show c j [>] a  c j [X  c k [>]]], @j [ c k [>] a that {@i [ c k [X  c i [>]]]} DTL @i [ c j [>] a F  c k [>]] by building  a closed T -tableau for the corresponding judgments.
5  Related and future work  We have given the first sound and complete tableaux system for the distributed temporal logic DTL.
To do so, we first gave a system for reasoning locally (in LTL) at each agent and afterwards we combined the local systems into one for global reasoning.
We again note that our tableaux system can be smoothly extended to deal also with past operators, like since, as shown in the full paper [1].
A number of tableaux and other deductive systems have been given for fragments of LTL, e.g., [5, 7, 10, 11, 12, 13, 16, 20, 21, 22, 23, 25, 27] to name a few.
In particular, different kinds of labels are employed to guide the proof search in the different labeled systems.
For instance, [13] considers time points as labels for formulas, while [5, 20, 21] consider time intervals.
It is interesting to note that Schmitt and Goubault-Larrecq employ constraint graphs to reason about the completeness of their rules, where labels are time intervals, similar to what we did for our time-point labels.
Most importantly, different fragments of the logic are considered in the different systems to cope with the difficulties of the full logic, e.g., the difficulties of formalizing rules for until and since.
The manuscript [20] is an attempt to give a labeled tableaux system for the full logic, but unfortunately it has never been completed.
We have designed our systems with the aim of providing tableaux for full DTL, including past, but it is interesting to note that our system for local reasoning seems to be closely related to the natural deduction system for futuretime LTL of [2], which was developed in parallel with our work.
We have begun investigating whether the rules of [2] would also be suited for the extension to global reasoning in  Another direction for future work will be to extend our system to the Distributed Temporal Protocol Logic DTPL that we have devised to reason about models and properties of security protocols.
In [3, 4], we have applied DTPL in two different ways: first to verify (or refute) that security protocols provide the security properties they have been designed for, and second to prove metatheoretic properties of protocol models that can be used to simplify the verification of protocols or to search for attacks against them.
All of these results have been obtained directly by semantic arguments.
Hence, extending the tableaux system given here to DTPL will allow us to formalize, and possibly implement, (meta)reasoning about security protocols.
We will report on this in a forthcoming paper.
Acknowledgments The first author was partially supported by the Hasler Foundation, ManCom project 2071.
The second and third authors were partially supported by FCT and EU FEDER, via the projects KLog PTDC/MAT/68723/2006 of SQIG-IT, and QuantLog POCI/MAT/55796/2004 of CLC.
The fourth author was partially supported by the FP7-ICT-2007-1 Project no.
216471, aAVANTSSAR: Automated Validation of Trust and Security of Service-oriented Architecturesa (www.
avantssar.eu).
We thank Matthias Schmalz for useful comments on a draft of this paper.
8  References  [13] R. HaEhnle and O. Ibens.
Improving Temporal Logic Tableaux Using Integer Constraints.
In Proc.
ICTLa94, LNAI 827.
Springer-Verlag, 1994.
[1] D. Basin, C. Caleiro, J. Ramos, and L. ViganoE.
Labelled Tableaux for Distributed Temporal Logic.
Submitted for publication, 2008.
Available online at http://wslc.math.ist.utl.pt/ftp/ pub/CaleiroC/07-BCRV-dtl-tableaux.pdf.
[14] K. Lodaya, R. Ramanujam, and P. Thiagarajan.
Temporal logics for communicating sequential agents: I. Intern.
Journal of Foundations of Computer Science, 3(1):117a159, 1992.
[2] A. Bolotov, O. Grigoriev, and V. Shangin.
Automated Natural Deduction for Propositional LinearTime Temporal Logic.
In Proc.
TIME07, pages 47a58.
IEEE Computer Society Press, 2007.
[15] K. Lodaya and P. Thiagarajan.
A modal logic for a subclass of event structures.
In Proc.
ICALP 14, LNCS 267, pages 290a303.
Springer-Verlag, 1987.
[16] Z.
Manna and A. Pnueli, editors.
Temporal Verification of Reactive Systems: Safety.
Springer-Verlag, 1995.
[3] C. Caleiro, L. ViganoE, and D. Basin.
Metareasoning about Security Protocols using Distributed Temporal Logic.
In Proc.
ARSPAa04, pages 67a89.
ENTCS 125(1), 2005.
[17] D. Peled.
All from one, one for all: on model checking using representatives.
In Proc.
CAV a93, pages 409a 423.
Springer-Verlag, 1993.
[4] C. Caleiro, L. ViganoE, and D. Basin.
Relating strand spaces and distributed temporal logic for security protocol analysis.
Logic Journal of the IGPL, 13(6):637a 664, 2005.
[18] V. Pratt.
Two easy theories whose combination is hard.
Technical report, MIT, Cambridge, 1977.
[19] R. Ramanujam.
Locally linear time temporal logic.
In Proc.
LICS 11, pages 118a127.
IEEE Computer Society Press, 1996.
[5] S. Cerrito and M. Cialdea Mayer.
Labelled tableaux for propositional linear time logic over finite frames.
In D. Basin, M. DaAgostino, D. M. Gabbay, S. Matthews, and L. ViganoE, editors, Labelled Deduction.
Kluwer Academic Publishers, 2000.
[20] P. H. Schmitt and J. Goubault-Larrecq.
A tableau system for full linear temporal logic.
Unpublished manuscript.
[6] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.
Introduction to Algorithms, Second Edition.
MIT Press, 2001.
[21] P. H. Schmitt and J. Goubault-Larrecq.
A Tableau System for Linear-TIME Temporal Logic.
In Proc.
TACASa97, LNCS 1217, pages 130a144.
Springer-Verlag, 1997.
[7] M. DaAgostino, D. M. Gabbay, R. HaEhnle, and J. Posegga, editors.
Handbook of Tableau Methods.
Kluwer Academic Publishers, 1999.
[22] S. Schwendimann.
A New One-Pass Tableau Calculus for PLTL.
In Proc.
Tableauxa98, LNAI 1397, pages 277a291.
Springer-Verlag, 1998.
[8] H.-D. Ehrich and C. Caleiro.
Specifying communication in distributed information systems.
Acta Informatica, 36:591a616, 2000.
[23] R. Scott, M. Fisher, and J. Keane.
Parallel Temporal Tableaux.
In Proc.
Euro-Para98, LNAI 1470, pages 852a861.
Springer-Verlag, 1998.
[9] H.-D. Ehrich, M. Kollmann, and R. Pinger.
Checking object system designs incrementally.
Journal of Universal Computer Science, 9(2):106a119, 2003.
[24] P. S. Thiagarajan.
A Trace Consistent Subset of PTL.
In Proc.
CONCURa95, LNCS 962, pages 438a452.
Springer-Verlag, 1995.
[10] M. Fisher.
Implementing Temporal Logics: Tools for Execution and Proof.
In Proc.
CLIMA VI, LNAI 3900, pages 129a142.
Springer-Verlag, 2006.
[25] L. ViganoE and M. Volpe.
Labeled Natural Deduction Systems for a Family of Tense Logics.
This volume.
[11] M. Fisher, D. M. Gabbay, and L. Vila, editors.
Handbook of Temporal Reasoning in Artificial Intelligence I. Elsevier, 2005.
[26] G. Winskel.
Event structures.
In W. Brauer, W. Reisig, and G. Rozenberg, editors, Petri Nets: Applications and Relationships to Other Models of Concurrency, LNCS 255, pages 325a392.
Springer-Verlag, 1987.
[12] G. D. Gough.
Decision procedures for temporal logic.
Technical Report UMCS-89-10-1, Department of Computer Science, University of Manchester, 1984.
[27] P. Wolper.
The tableau method for temporal logic: An overview.
Logique et Analyse, 110:119a136, 1985.
9