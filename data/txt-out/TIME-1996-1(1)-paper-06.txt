In Proc.
of the Third International Workshop on Temporal Representation and Reasoning (TIMEa96) May 19-20, 1996, Key West, Florida.
IEEE Computer Society Press, pp.
144-151.
Guiding and Rening Simulation using Temporal Logic Giorgio Brajnik  Daniel J. Clancy  Dip.
di Matematica e Informatica Universita di Udine 33100 Udine, ITALY  Department of Computer Sciences University of Texas at Austin Austin, TEXAS 78712  Abstract  We illustrate TeQSIM, a qualitative simulator for continuous dynamical systems.
It combines the expressive power of qualitative dierential equations with temporal logic by interleaving simulation with model checking to constrain and rene the resulting predicted behaviors.
Temporal logic expressions are used to specify constraints that restrict the simulation to a region of the state space and to specify trajectories for input variables.
A propositional linear{time temporal logic is adopted, which is extended to a three valued logic that allows a formula to be conditionally entailed when quantitative information specied in the formula can be applied to a behavior to rene it.
We present a formalization of the logic with theoretical results concerning the adopted model checking algorithm (correctness and completeness).
We show also an example of the simulation of a non{autonomous dynamical system and illustrate possible application tasks, ranging from simulation to monitoring and control of continuous dynamical systems, where TeQSIM can be applied.
1 Introduction  Reasoning about change across time is a common problem within articial intelligence and computer science in general.
For systems with discrete state spaces, temporal logic (TL) provides a broad class of formalisms that have been used for such tasks as reasoning about the eect of actions, specifying and verifying correctness of reactive computer programs and synthesizing or analyzing discrete event systems [13, 6, 2, 8].
Qualitative reasoning [10] has been used to reason about continuous change within the eld of dynamical systems in the presence of incomplete knowledge.
The expressiveness of the models used within qualitative simulation, however, is often limited to structural equations constraining the potential values for related variables.
The modeler is unable to express behavioral information about the trajectory of a variable or relationships between the trajectories of interconnected variables.
Such an information allows the modeler to restrict the simulation to a region of the state space and to specify trajectories for input variables.
 The research reported in this paper has been performed while visiting the Qualitative Reasoning Group at the University of Texas at Austin.
The Temporally Constrained QSIM (TeQSIM, pronounced tek'sim) algorithm combines the expressive power of these two paradigms by interleaving temporal logic model checking with the qualitative simulation process.
Temporal logic is used to specify qualitative and quantitative trajectory information that is incorporated into the simulation to constrain and rene the resulting behaviors.
Qualitative simulation constructs a set of possible behaviors consistent with a model of a dynamical system represented by a qualitative dierential equation (QDE).
The QSIM algorithm [10] represents the behavior of a dynamical system by an incrementally generated tree of qualitative states.
Each state describes the system at either a time{point or over a time{interval between two points by a tuple of qualitative values for the variables specied within the QDE.
Each qualitative value is described by a magnitude and a direction of change: the direction of change represents the sign of the variable's time derivative while the magnitude is dened upon a totally ordered set of distinctive landmark values and is either a landmark value or an interval between two landmark values.
The simulator uses the constraints specied within the QDE along with continuity to derive a branching{ time behavioral description.
Each path within the tree represents a potential behavior of the system: branches result from inherent ambiguity within the qualitative description.
Semi{quantitative simulation incorporates quantitative information into the qualitative simulation in the form of numeric ranges for landmark values and bounding envelopes for functions.
TeQSIM interleaves temporal logic model checking with the qualitative simulation process to obtain two major benets.
Behavior ltering tests each partial behavior against the set of temporal logic expressions representing trajectory constraints as the set of behaviors is incrementally generated.
A behavior is eliminated from the simulation when it can be shown that all of its possible completions fail to model the set of temporal logic expressions.
Thus, the space of the behavioral description is restricted to include only behaviors that can satisfy the temporal logic expressions.
Behavior renement integrates numeric information contained within the temporal logic expressions into the qualitative simulation to provide a more precise numerical description.
This process restricts an individual behavior to include only those real valued inter-  Simulation & Model Checking  Preprocessing Extended TL Expressions Event List  QDE & Initial State  Event Replacement  QDE Modifier  TL Expressions  Modified QDE & Initial State  TLaGuide  Filtered and Refined Behavior Tree  QSIM  Figure 1: TeQSIM architecture.
pretations which model the set of temporal logic expressions and therefore improves the precision of the prediction.
The integration of temporal logic model checking and qualitative simulationwas initially investigated by Kuipers and Shults [11].
They use a branching{time temporal logic to prove properties about continuous systems by testing the entire behavioral description against a temporal logic expression.
The appropriate truth value is returned depending upon whether or not the description models the expression.
Our work focuses on constraining the simulation as opposed to testing a simulation after it is completed.
The next section provides an overview of the TeQSIM algorithm.
Section 3 provides an example along with a discussion of some of the applications of this technique while section 4 describes the formal syntax and semantics of our temporal logic.
Soundness and completeness theorems are presented for the TL{ guide algorithm.
Finally, section 5 provides a discussion of some of the extensions that will be investigated in the future.
2 TeQSIM Overview  TeQSIM has been designed to provide the user with a mechanism for specifying trajectory constraints to guide and rene the qualitative simulation process.
By trajectory of a set of variables over a time interval (a; b)  < we mean a mapping from (a; b) to variable values ( < ).
Trajectory constraints on a set of variables restrict the possible trajectories for those variables.
Figure 1 provides an overview of the system architecture.
In general, the algorithm can be divided into two main components: a preprocessing stage that combines the trajectory information provided by the modeler into the qualitative model and generates the appropriate TL expressions; and a simulation and model checking stage that integrates model checking into the simulation process by ltering and rening qualitative behaviors according to a set of temporal logic expressions.
Trajectory information is specied in the form of an event list and a set of extended temporal logic statements.
An event is a time{point distinguished within the simulation.
The event list is a sequence of named, quantitatively bounded events not represented within the QDE that are incorporated into the simulation.
An extended temporal logic statement is simply a tem-  poral logic formula which may include direct references to events occurring within the event list.
These references are replaced by the appropriate formulae.
The simulation provides a complete temporal ordering between these externally dened events and other events dened within the model.
Model checking and behavior renement is performed by TL{guide.
Each time QSIM extends a behavior by the addition of a new state, the behavior is passed to TL{guide.
The behavior is ltered if there is sucient information within the partially formed behavior to determine that all completions of the behavior fail to model the set of TL expressions.
If the behavior can potentially model the set of TL expressions, then it is rened by the incorporation of any relevant quantitative information contained within the TL expressions.
Otherwise the behavior is retained unchanged.
3 Problem solving with TeQSIM  Incorporating temporal logic model checking into the qualitative simulation process allows the modeler to control the simulation by restricting the behavior of input and dependent variables.
Trajectory constraints can be used for a variety of tasks, including simulation of non{autonomous systems, incorporating observations into simulation, analysis of continuous control laws and performing goal oriented simulation.
The TeQSIM algorithm has been tested on a range of examples demonstrating each of the tasks above.
The following example demonstrates the use of TeQSIM to simulate a non{autonomous system incorporating information obtained via observation.
The system being simulated is a very simple one, which generalizes to the real{world problem of water supply control in the domain of lakes, rivers and dams [7].
Consider an open tank, with an uncontrolled inow u, a regulated outow y, valve opening v and amount of liquid A in the tank.
The system is modeled by the dierential equation A_ = u ?
y; y = f (A; v) where f (A; v) is an unknown monotonically increasing function on both arguments, numerically bounded.
This model can be straightforwardly specied using the QSIM QDE language.
Figure 2 shows the trajectory constraints used by TeQSIM for simulating the regulated tank.
Part (a) of the gure shows a totally ordered event list that provides quantitative temporal bounds for external events corresponding to two opening actions on the outow valve.
Four events are dened corresponding to the beginning and the end of each of these actions.
Part (b) contains the trajectory constraints that specify the behavior of the outow valve along with constraints on inow and level (up to the end of the rst opening action; the second action, not shown, is similarly specied): i. the variable Inflow is constant3 and its value is within the range [200, 220] cm /s, ii.
the valve opening is constant at 0.5 until the beginning of the rst opening action, iii.
between events b-open1 and e-open1 (i.e.
the duration of the rst opening action) the valve  (event (event (event (event  b-open1 e-open1 b-open2 e-open2  :time :time :time :time  (30 30)) ; sec (35 36)) (150 150)) (153 155))  (a) External event declaration.
i)  (always (and (qvalue InFlow (nil std)) (value-in InFlow (200 220))) ii) (until (and (value-in Valve (0.5 0.5)) (qvalue Valve (nil std))) (event b-open1)) iii) (between (event b-open1) (event e-open1) (and (qvalue Valve (nil inc)) (qvalue Level (nil inc)))) iv) (occurs-at (event e-open1) (value-in Valve (0.65 0.7)))  (b) Trajectory constraints (rst opening action only).
Figure 2: Input to TeQSIM.
opening is increasing and Level is observed to increase, and iv.
valve reaches a value in [0.65, 0.7] at the end of the rst opening action.
Figure 3 shows the result of the simulation.
TeQSIM yields a single behavior where Level increases and reaches a new equilibrium value, well below the High threshold.
Correctness properties of TeQSIM guarantee that this is the only possible outcome of any real plant that is validly described by the QDE model, the initial state and the trajectory constraints.
This example is very simple but it shows one possible use of trajectory constraints to extend the scope of qualitative simulators (like QSIM, that are limited to simulation of initial value problems only).
A brief description of other tasks to which TeQSIM can be applied along with a discussion of how each task can be demonstrated on the model described above is contained in gure 4.
Additional examples are contained in [5].
4 Guiding and rening simulation  TeQSIM guides and renes the simulation based upon a specication formulated using a variation of propositional linear time logic (PLTL).
PLTL combines state formulae, that express information about an individual state, with temporal operators such as until, always, and eventually to extend these state formulae across time and represent change.
We have extended PLTL by using a three valued logic that allows an expression to be conditionally entailed when quantitative information contained within the expression can be applied to a behavior to rene the description.
A renement condition species numerical bounds extracted from the TL expressions.
Application of these conditions to the behavior eliminates the region of the  state space that extended beyond the quantitative information specied in the TL expression.
In addition, the TL{guide algorithm is designed to handle the incremental nature of a qualitative simulation.
An undetermined result occurs whenever the behavior is insuciently determined to evaluate the truth of a TL expression.
4.1 TL specication language  This section provides a formal description of the syntax and semantics for the TL language.
The syntax and semantics are derived from work done by Emerson [6] and Kuipers and Shults [12].
A discussion of the TL{guide algorithm along with soundness and completeness theorems are presented in the following subsections.
Proofs of these theorems along with additional lemmas and corollaries can be found in [5].
Syntax.
The syntax and semantics for the state for-  mulae are described in gure 5(a).
Path formulae are derived by applying the temporal operators until and strong-next along with boolean operators to state formulae.
Path formulae P are formally dened as P ::= Sj (and P P )j(not P )j(strong-next P )j(until P P ), where S is the set of state formulae.
Informally, (until p q) is true for a path if p holds in all states preceding the rst one where q holds, while (strong-next p) is true for a path if p holds in the second state of the path which must exist.
Figure 5(b) gives a set of useful abbreviations.
We require that formulae are in positive normal form, i.e.
(i) until, releases and strong-next are the only temporal operators in the formula, (ii) for every not in the formula, its scope is an atomic proposition, and (iii) such a scope does not include any proposition constructed using value-<=, value->= or value-in.
The rst two requirements do not restrict the expressiveness of the language since the abbreviations shown above can be used to transform a formula to satisfy these conditions.
The latter requirement is due to the specic representation of numeric information in QSIM, which does not allow open numeric intervals.
Semantics.
Temporal logic formulae are given meaning with respect to the interpretation structures dened below.
These structures are extended from their typical denition (e.g.
[6]) in order to accommodate the renement process.
Path formulae are interpreted against an interpretation structure M = <S; ; ?
; I ; C ; M> where:  S is a set of states;  : S !
S is a partial function, mapping states  to their successors (we are dening a linear{time logic, hence each state has at most one successor);  I : S  S !
ft; f; ?g is an assignment of truth values to propositions and states (?
denotes the \unknown" truth value);  T1  T2  T3  T4  ..a T5 [153 +INF] .
... .... a  HIGH [75 75]  ... L-20 [30.8 37.4] .
..... ..... ..... ..... ..... ..... ..... ..... .. Adeg .... a a a a a a a a a a L* [30 35] 0 [0 0]  0 [0 0] T0  INF  TOP [100 100]  1 [1 1]  ..... ..... ....Adeg Adeg Adeg V-56 [0.900 0.950] ..a. .
.
.
V-28 [0.650 0.700] .. ..... ..... ... Adeg Adeg Adeg ..a ... ..... ..... V* [0.500 0.500] Adeg Adeg Adeg  MINF  T5  T0  VALVE  T1  T2  T3  T4  T5  ..a .
... .... a ...a .
.
.
.... a  .....a ...a ..a.. .
.
.
.
.... a a T0  T1  T4 [153 155] T3 [150 150] T2 [35 36] T1 [30 30] T0 [0 0]  T2  T3  T4  T5  TIME  LEVEL  Figure 3: Output of TeQSIM.
 ?
is a set of renement conditions.
?
is closed with respect to the standard boolean operators f^; :g and contains the distinguished item TRUE;  C : S  S !
?
is a function (condition gener-  ator) that maps state formulae and states into  renement conditions that disambiguate a formula truth value; we require that C ('; s) = TRUE i I ('; s) = t and C ('; s) to be dened when I ('; s) =?.
 M: ?
 S !
S is a function (state modier) that maps a condition and a state into a rened state.
For any state s, M(TRUE; s) = s and M(:TRUE; s) = ?.
We require that if ' is an atomic proposition then renement conditions are necessary and sucient for resolving the ambiguity, i.e.
if C = C ('; s) then I ('; M(C; s)) = t and I ('; M(:C; s)) = f (unless C = TRUE, in which case M(:C; s) = ?).
As customary, a path x is a sequence of states x = <s0 ; s1 ; : : :> such that for any pair of consecutive states (s ; s +1) we have that (s ) = s +1 .
The length of a path is denoted by jxj, which for innite paths is 1.
For all non negative integers i < jxj, x denotes the sub{path <s ; : : :> and x(i) denotes s .
A full{ path extension of a nite path x, denoted with xb, is an innite path formed by concatenating x with an innite sequence of states.
Finally, M is naturally extended to paths in order to rene paths.
In the specic case of QSIM, I may give ?
only for propositions including value-<=, value->= and value-in (as illustrated in g. 5(a)).
A renement condition is an inequality between the partially known numeric value of a variable in a state and an extended real number (or a boolean combination of conditions).
The condition that the QDE variable X in state s has to be less than 5 is written \X < 5".
Notice that ambiguity is not purely a syntactic property, but it depends on state information.
For example, (value-<= X .3) will be (unconditionally) true on a state s where R(X; s) = [0; 0:25], but only conditionally true on s0 where R(X; s0 ) = [0; 1:0].
Because of ambiguity, to dene the semantics of formulae we need to introduce two entailment relations.
The rst one, called models (j=), will be used to characterize non{ambiguous true formulae; the second one, i  i  i  i  i  i  i  s  called conditionally{models ( j=? )
will characterize formulae that are ambiguous.
We will say that an interpretation M and a state s falsify (6j=) a formula ' when neither s j= ' nor s j=? '
hold.
Figure 5(c,d) gives the semantics of the language.
To simplify the analysis of the renement process, the usage of ambiguous formulae must be restricted.
The problem is that an arbitrary ambiguous formula may yield several alternative renement conditions.
A disjunction of renement conditions cannot be applied to states without requiring a change in the successor function  and the introduction of a new behavior which is qualitatively identical to the original behavior in the tree.
Two dierent types of disjunction can result from certain ambiguous formula.
A state disjunction results from a disjunction of ambiguous state formulae.
For example, when interpreted against a particular state (or (value-<= X 0.5) (value->= Y 15)) may yield the condition (X  0:5 _ Y  15).
When applying such a condition to a state, M(C; s) yields two states { s0 in which X is restricted to be  0:5 and s00 where Y  15.
A path disjunction, on the other hand, occurs when an ambiguous formula is included in a path formula in such a manner that a sub{formula can be conditionally true for more than one sub{path.
For example, in the path formula (until p (value-<= X 0.5)) a disjunction occurs across sub{paths regarding when (value-<= X 0.5) should be conditionally true.
The following denitions restrict the syntax to formulae that are well{behaved.
A potentially ambiguous formula is any TL formula that (i) is an atomic proposition constructed using one of the following operators value-<=, value->= or value-in, or (ii) is a path formula which contains a potentially ambiguous sub{formula.
Admissible formulae are those formulae ' that satisfy the following conditions: 1. '
is in positive normal form, and 2. if '  (until p q) then q is not potentially ambiguous, and 3. if '  (releases p q) then p is not potentially ambiguous, and 4. if '  (or p q) then at most one of p and q is potentially ambiguous.
It can be proved that for all admissible formulae ' s  s0  s00  s  Continuous feedback control  A control law is expressed in terms of a set of formulae relating the value of the monitored variable (say Level) with the required value, or trend, of the control variable (say Valve).
The resulting closed{loop behaviors can then be analyzed with respect to the controller's goal.
The following trajectory constraint provides a partial specication of a control law to avoid overowing the tank.
It states that the valve opening must be increasing whenever the magnitude of Level is greater than high and the valve hasn't yet reached its maximum opening max.
(always (between (qvalue Level ((high nil) nil)) (qvalue Level (high dec)) (implies (qvalue Valve ((min max) nil)) (qvalue Valve (nil inc)))))  Continuous feed{forward control  The control law is expressed in terms of a set of formulae relating a predicted value of the monitored variable to the current value or trend of the control variable.
The following trajectory constraint species that if the tank can potentially overow then the valve opening should be increased until it reaches its maximum value or level becomes smaller than high.
(always (implies (eventually (qvalue Level (top nil))) (until (qvalue Valve (nil inc)) (or (qvalue Level (high dec)) (qvalue Valve (max nil))))))  Goal Oriented Simulation  The statements reported below can be used to check whether the tank will overow within a specied time frame.
Since TeQSIM is sound, if no behaviors are produced then the modeled system can not violate these constraints (assuming that the QDE model is valid).
The following trajectory constraint limits the simulation to behaviors in which the tank Level reaches high within 150 seconds.
(and (event horizon :time 150) (before (qvalue Level (high nil)) (event horizon)))  Figure 4: Applying TeQSIM to other tasks using the regulated tank model.
and for any interpretation M and path x, if x j=? '
then any necessary and sucient condition C for rening x into a model for ' (i.e.
M(C; x) j= ' and M(:C; x) 6j= ') is either a single condition or a conjunction of conditions.
Even though the restriction to admissible formulae reduces expressiveness, such a restriction does not hinder the practical applicability of TeQSIM.
As long as important distinctions are qualitatively represented (using landmarks or events), most trajectory constraints can be cast into admissible formulae.
For example, the constraint that \until level goes above 50 the input ow rate has to be below 200" could be expressed with the following non{admissible formula (until (value-<= InFlow 200) (value->= Level 50)) where the two distinctions (200 and 50) do not correspond to qualitative landmarks.
By adding a landmark to the quantity space of Level corresponding to the value 50, the formula can be rewritten in an admissible form (i.e.
(until (value-<= InFlow 200) (qvalue Level (lm-50 nil)))).
QSIM computes in nite time a set of behaviors, each representing a class of trajectories of the system being simulated.
Although a QSIM behavior is a nite structure, it may represent innite trajectories of the simulated system.
In fact, quiescent states are nite descriptions of xed{point trajectories1 .
For-  mally, a QSIM behavior b is a nite sequence of non repeating states <s0 ; : : :; s > such that 8i; 0  i < n : (s ; s +1 ) belongs to the QSIM relations successor or transition.
A behavior b is closed i QSIM detected that s is a quiescent state or that s is a transition state that has no possible successor.
1 QSIM may identify cyclic behaviors as well and represent them throughcycles in a directed graph.
The use of quantitative information, however, only makes sense if time is not cyclic;  furthermore the renement of behaviors requires that they do not share sub{behaviors.
For these reasons cycle detection is disabled within TeQSIM.
n  i  i  n  n  4.2 Model checking  The model checking algorithm is designed to evaluate a behavior with respect to a set of admissible formulae as the behavior is incrementally developed.
This allows behaviors to be ltered and rened as early as possible during the simulation.
Our algorithm is derived from the one described in [11]; however, it has been modied to deal with conditionally true formulae and to cope with behaviors which are not closed.
A detailed discussion of the algorithm is provided in [5].
The algorithm computes the function  : P  Behaviors !
fT; F; Ug Conditions: A denite answer (i.e.
T or F) is provided when the behavior contains sufcient information to determine the truth value of the formula.
For example, a non{closed behavior b, for all interpretations M , will not be suciently determined with respect to the formula ' (eventually p) if p is not true for any sux of b, since p may become true in the future.
A behavior is considered to be suciently determined with respect to a formula whenever there is enough information within the behavior to determine  (a) Syntax and semantics of state formulae.
In the denitions of the most important state formulae given below, v denotes a QSIM variable, R(v; s) the range of potential values for v in state s, and vs the unknown value of v in s. n, ni denote extended real numbers.
(qvalue v (qmag qdir )) where qmag is a landmark or open interval dened by a pair of landmarks in the quantity space associated with v, and qdir is one of finc, std, decg.
NIL can be used anywhere to match anything.
Such a proposition is true exactly when the qualitative value of v in the state s matches the description (qmag qdir ).
(value-<= v n) is true i 8x 2 R(v; s) : x  n; it is false i 8x 2 R(v; s) : n < x; it is unknown otherwise.
In such a case the renement condition is that the least upper bound of the possible real values of v is equal to n (i.e.
vs  n).
(value->= v n) is similar.
(value-in v (n1 n2 )) is true i R(v; s)  [n1 ; n2 ]; it is false i R(v; s) \ [n1 ; n2 ] = ;.
It is unknown otherwise, and the renement condition is that the greatest lower bound is equal to n1 and the least upper bound is equal to n2 (i.e.
n1  vs ^ vs  n2 ).
Non{atomic propositions are dened using standard boolean operators (and, not); standard propositional abbreviations are also allowed (true, false, or, implies, iff).
(c) Entailment relations for state formulae.
(a ranges over atomic propositions, p and q over S ): s j= a i I (a; s) = t s j=?
a i I (a; s) =?
s j= (and p q) i s j= p and s j= q s j=?
(and p q) i s j=?
p and s j= q, or s j= p and s j=?
q, or s j=?
p and s j=?
q s j= (not p) i s 6j= p s j=?
(not p) i s j=?
p  (b) Path formulae abbreviations.
(or p (releases p (before p (eventually (always (never (starts p (follows p (occurs-at (between p  q) q) q) p) p) p) q) q)           p q) q r)     (not (and (not p) (not q ))) (not (until (not p) (not q ))) (not (until (not p) q )) (until true p) (releases false p) (always (not p)) (releases p (implies p (always q ))) (releases p (implies p (strong-next (always q )))) (releases p (implies p q )) (releases p (implies p (strong-next (until r q ))))  The intuitive meaning for some of these forms is: p q): q is true up until and including the rst state in which p is true.
(starts p q ): q holds from the rst occurrence of p. (follows p q ): similar to starts, but q should hold just after the rst occurrence of p. (occurs-at p q ): q is true at the rst occurrence of p. (between p q r ): r holds in the open time interval between the rst occurrence of p and the subsequent rst of q.
(releases  (d) Entailment relations for path formulae.
(p 2 S and '; 2 P ): x j= p i x(0) j= p x j=?
p i x(0) j=?
p x j= (strong-next ') i jxj > 1 and x1 j= ' x j=?
(strong-next ') i jxj > 1 and x1 j=? '
x j= (until ' ) i 9i  0 : xi j= and 8j < i : xj j= ' x j=?
(until ' ) i 9i  0 : (xi j= or xi j=? )
and ? ')
and 8j < i : (xj j= ' or xj j= ?
occurs at least once j= The semantics of (and ' ) and (not ') is similar to the propositional case.
Figure 5: Syntax and semantics of the language.
a single truth value for all completions of the behavior.
If a behavior is not suciently determined for a formula, then U is returned by  and the behavior is not ltered out by TL{guide.
Notice that indeterminacy is a property independent from ambiguity: the former is related to incomplete paths, while the latter deals with ambiguous information present in states of a path.
The following recursive denition characterizes determinacy.
Given an interpretation M , a path x is suciently determined for a positive normal formula ' (written x  ') i one of the following conditions is met: 1. x corresponds to a closed behavior or ' is a proposition or x j= ' or x j=? '
2. '
 (strong-next p) and jxj > 1 and x1  p  3. '
 (until p q) and 9i: i < jxj and x 6j= p and x  p and 8j  i: x 6j= q and x  q 4. '
 (releases pq) and 9i: i < jxj and x 6j= q and x  q and 8j  i: x 6j= p and x  p 5. '
 (and p1 p2) and 9i: x 6j= p and x  p 6. '
 (or p1 p2 ) and 8i: x 6j= p and x  p We will write x = ' to signify that x is not suciently determined for '.
We are now ready to state the main correctness and completeness theorem on model checking.
i  i  j  j  i  j  j  i  i  i  i  i  Theorem 1 ( is sound and complete) For any  admissible formula ' and for any QSIM behavior b the following statements hold:  1.
('; b) = (T; TRUE) () there exists an interpretation M such that b j= '.
2.
('; b) = (T; C ) and C 6= TRUE () there exists an interpretation M such that b j=? '
and if b0 ; b00 exist such that b0 = M(C; b) and b00 = M(:C; b) then b0 j= ' and for all full{path extensions bb00 of b00: bb00 6j= '.
3.
1 ('; b) = F () for all interpretations M and for all full{path extensions bb: bb 6j= ' and b  '.
4.
('; b) = (U; C ) () for all interpretations M , b = ' and if b0 = M(:C; b) exists then for all full{path extensions bb0 : bb0 6j= '.
Proof is based on induction on formula length.
It follows by a case{by{case analysis of the algorithm.
4.3 Guiding and rening the simulation  When given a behavior b and an admissible formula ', TL{guide computes  ('; b) = (v; C ).
The behavior b is refuted i v = F; it is retained unmodied i v 6= F and C = TRUE; and it is rened into M(C; b) i v 2 fT; Ug and C 6= TRUE.
The following theorem justies our use of temporal logic model checking for guiding and rening the simulation.
Theorem 2 (TL{guide is sound and complete)  Given a QSIM behavior b and an admissible formula ' then TL{guide: 1. refutes b i for all interpretations M and for all full{path extensions bb: bb 6j= ' and b  '.
2. retains b without modifying it i (a) there exists an interpretation M such that b j= '; or (b) for all interpretations M , b  = ' and there is0 no necessary condition C such that if b = M(:C; b) exists then for all full{path extensions bb0: bb0 6j= '.
3. replaces b with b0 i (a) there exists an interpretation M such that b j=? '
and exists C such that b0 = M (C; b) j= '00 and C is necessary (i.e.
exists b00 such that b = M(:C; b) and for all full{path extensions bb00: bb00 6j= '); or (b) for all interpretations M , b  = ' and there is a necessary condition C such that b0 = M(:C; b) and for all full{path extensions bb0: bb0 6j= '.
Proof follows almost directly from the previous theorem.
5 Discussion and future work  TeQSIM is designed to provide a general methodology for incorporating trajectory constraints into the qualitative simulation process.
The current trajectory specication language is, however, insucient to express certain constraints relevant to dynamical systems (e.g.
stability requirements for controllers).
Three dierent extensions to the language are currently being investigated.
Limited rst order expressiveness - The temporal logic used is limited to PLTL and is unable to quantify over attributes of states.
Certain trajectory constraints require the ability to refer to values across states within the behavior.
For example, the specication of a decreasing oscillation requires the ability to compare the magnitude of a variable across states.
A limited form of rst order logic may provide a suciently expressive language while still giving satisfactory performance with respect to complexity.
Metric temporal logic - Due to the introduction of landmarks during the simulation process, QSIM behaviors are potentially innite structures.
Getting a denite answer for formulae such as (eventually p) is not always possible when potentially innite behaviors are encountered since it is always possible for p to occur in the future.
Metric temporal logic [1] allows the denition of a horizon for a temporal logic expression.
This would allow statements such as \within 50 seconds the tanks level reaches 70 inches."
This statements is only expressible within our logic using an external predened event.
Such an extension oers the modeler more exibility to express relevant constraints.
Functional envelopes - Semi{quantitative reasoning [3] within TeQSIM uses interval bounds and static functional envelopes for monotonic functions to derive quantitative information about a behavior.
NSIM [9] derives dynamic envelopes describing a variable's behavior with respect to time.
Currently, only interval information can be specied within TeQSIM trajectory constraints.
Extending the language to include information about bounding envelopes with respect to time would increase the precision of solutions computed by TeQSIM.
Finally, the current algorithm for incremental model checking is inecient if compared to the on{ the{y model checker algorithm developed by Bhat and colleagues [4].2 We plan to incorporate it within TeQSIM.
6 Conclusions  Qualitative simulation and temporal logic provide two alternative formalisms for reasoning about change  2 In all the examples we have run so far, the practical time{ complexity of a TeQSIM simulation is denitely dominated by other operations(like quantitativeinferences)rather than model checking.
across time.
TeQSIM integrates these two paradigms by incorporating trajectory information specied via temporal logic into the qualitative simulation process.
Behaviors that do not model the set of temporal logic expressions are ltered during simulation.
Numeric information specied within the TL expressions can be integrated into the simulation to provide a more precise numerical description for the behaviors which model these expressions.
The correctness of the TL{guide algorithm along with the correctness of QSIM guarantee that all possible trajectories of the modeled system compatible with the QDE, the initial state and the trajectory constraints are included in the generated behaviors.
In addition, the completeness of TL{guide ensures that all behaviors generated by TeQSIM are potential models of the trajectory constraints specied by the modeler.
Acknowledgments  We would like to thank Benjamin Shults for letting us use part of his program to implement TeQSIM, and to the Qualitative Reasoning Group for many fruitful discussions.
Thanks also to a careful anonymous referee.
QSIM and TeQSIM are available for research purposes via anonymous ftp at ftp.cs.utexas.edu in the directory /pub/qsim.
These and other results of the Qualitative Reasoning Group are accessible by World-Wide Web via http://www.cs.utexas.edu/users/qr.
This work has taken place in the Qualitative Reasoning Group at the Articial Intelligence Laboratory, The University of Texas at Austin.
Research of the Qualitative Reasoning Group is supported in part by NSF grants IRI-9216584 and IRI-9504138, by NASA grants NCC 2760 and NAG 2-994, and by the Texas Advanced Research Program under grant no.
003658-242.
References  [1] R. Alur and T. Henzinger.
Real{time logics: complexity and expressiveness.
Information and Computation, 104(1):35{77, 1993.
[2] M. Barbeau, F. Kabanza, and R. St-Denis.
Synthesizing plant controllers using real-time goals.
In Proc.
of IJCAI{95, pages 791{798.
IJCAI, Morgan Kaufman, August 1995.
[3] D. Berleant and B.J.
Kuipers.
Using incomplete quantitative knowledge in qualitative reasoning.
In Proc.
of the Sixth National Conference on Articial Intelligence, pages 324{329, 1988.
[4] G. Bhat, R. Cleaveland, and O. Grumberg.
Ecient on{the{y model checking for CTL*.
In Proc.
of Conference on Logic in Computer Science (LICS{95), 1995.
[5] G. Brajnik and D. J. Clancy.
Temporal constraints on trajectories in qualitative simulation.
Technical Report UDMI{RT{01{96, Dip.
di Matematica e Informatica, University of Udine, Udine, Italy, January 1996.
[6] E.A.
Emerson.
Temporal and modal logic.
In J. van Leeuwen, editor, Handbook of Theoretical Computer Science, pages 995{1072.
Elsevier Science Publishers/MIT Press, 1990.
Chap.
16.
[7] A. Farquhar and G. Brajnik.
A semi{quantitative physics compiler.
In Tenth International Conference on Applications of Articial Intelligence in Engineering, Udine, Italy, July 1995.
Presented also at the Eighth International Workshop on Qualitative Reasoning on Physical Systems, 1994, Nara, Japan.
[8] D. Jonescu and J.Y.
Lin.
Optimal supervision of discrete event systems in a temporal logic framework.
IEEE Transactions on Systems, Man and Cybernetics, 25(12):1595{1605, Dec. 1995.
[9] H. Kay and B.J.
Kuipers.
Numerical behavior envelopes for qualitative models.
In Proc.
of the Eleventh National Conference on Articial Intelligence.
AAAI Press/MIT Press, 1993.
[10] B.J.
Kuipers.
Qualitative Reasoning: modeling and simulation with incomplete knowledge.
MIT Press, Cambridge, Massachusetts, 1994.
[11] B.J.
Kuipers and B. Shults.
Reasoning in logic about continuous change.
In J. Doyle, E. Sandewall, and P. Torasso, editors, Principles of Knowledge Representation and Reasoning, San Mateo, CA, 1994.
Fourth International Conference (KR{94), Morgan Kaufmann.
[12] B. Shults and B. J. Kuipers.
Qualitative simulation and temporal logic: proving properties of continuous systems.
Technical Report TR AI96{244, University of Texas at Austin, Dept.
of Computer Sciences, January 1996.
[13] J.G.
Thistle and W.M.
Wonham.
Control problems in a temporal logic framework.
International Journal on Control, 44(4):943{976, 1986.