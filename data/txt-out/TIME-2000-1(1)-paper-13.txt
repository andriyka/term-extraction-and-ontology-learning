Efficient Resolution Mechanism for Fuzzy Temporal Constraint Logic  M. A. Cardenas, I. Navarrete, R. Marin Dept.
de Informatica, Inteligencia Artificial y Electronica.
Universidad de Murcia, Spain E-mail: marian@dif.um.es Abstract In this paper we describe a module, named Temporal Solving Module (TSM), for answering the queries sent to a data blackboard which must take into account fuzzy temporal constraints among blackboard variables.
The TSM receives the queries written in an interaction language that is translated into a language of a reified [13] many-sorted [9] first-order logic, called Fuzzy Temporal Constraint Logic (FTCL).
This logic has been formalized in previous works, together with a sound resolution principle for it [3] [4].
Now, we justify the search strategy used in the implementation of the unit resolution.
The main results achieved in this work are the simplification criteria and the heuristic evaluation function given for improving the search process to achieve the refutation.
First, we use the fuzzy number ordering functions proposed by Marin et al.
[12] for obtaining a simplification on queries that imply an exhaustive search in the data blackboard.
Secondly, in order to prune the tree, we use a function to check the possibility of obtaining a fuzzy temporal instant different to empty set, in the unification of two imprecise temporal variables.
Keywords: Temporal logics and ontologies, temporal constraint reasoning, temporal languages and architectures, belief and uncertainty in temporal knowledge.
1.
Introduction  cardiopathy, submitted to continuous monitoring of the electrical and mechanical signals of the heart.
A distributed agent architecture has been implemented in the system.
Each agent is associated with a blackboard architecture, formed by a temporal data blackboard, a control mechanism and a set of subagents with the same architecture (recursive architecture).
Besides, each agent has a blackboard interface with the Temporal Solving Module (TSM) inside.
Actually, the conclusions of this paper derive from the design of this module that replies to the temporal queries sent by the system's agents.
Figure 1 shows the structure of the TSM.
Temporal blackboard variables are interconnected by means of fuzzy temporal constraints, which are represented in a Fuzzy Temporal Constraint Network or FTCN [1] [2] [14].
An Interaction Language with the TSM is defined, so that any system agent can communicate with the temporal data blackboard.
This language, given in section 2, is user friendly and allows queries and asserts with one or more fuzzy temporal constraints, which may either be absolute or relative.
In section 3 we review the Fuzzy Temporal Constraint Logic (FTCL) that has been formalized in previous works [3] [4].
We have implemented a module, named ABSTRAE, for the automatic translation of the Interaction Language into the first order language of the FTCL.
The main results of this work are shown in section 4, where we show the simplification criteria and the heuristic evaluation function used for improving the search process in the implementation of the unit resolution for FTCL.
Finally, an example is given to illustrate all this process.
2.
Interaction language with the TSM This work is part of a research project for designing and implementing an intelligent monitoring system of patients, based on temporal reasoning.
The domain of this application focus on Intensive Care Units and the system is applied to patients with severe ischemic  0-7695-0756-5/00 $10.00 a 2000 IEEE  In this section an Interaction Language with the Temporal Solving Module is defined, in such a way that any system agent can communicate with the temporal  data blackboard.
The syntax of this language is specified in figure 2 using BNF format.
In a query or an assertion  Assert or Query written in the Interaction Language  written in the Interaction Language appears the observable name, the value taken by the attribute and the  Clauses of FTCL  ABSTRAE  Resolution Mechanism and Search Strategy  DATA BLACKBOARD  Answer  FUZZY TEMPORAL CONSTRAINT NETWORK Simplification Mechanism  Constraint Propagation process and Decomposition Network  Heuristic Evaluation Function  Fuzzy Number Ordering Methods  Figure 1 General outline of TSM  DURATION : TQ  ROOT : ASSERT  | "[" TQ "," TQ "]"  | QUERY; ASSERT : "assert" OBSERVATION; QUERY : "query" OBSERVATION; OBSERVATION : OBSERVABLE VALUE TIME; OBSERVABLE : /* Blackboard observables */; VALUE : /* Observable values */  | "(" TQ "," TQ "," TQ "," TQ ")" | "approximately" TQ; TQ : number "years" RESTY | number "months" RESTM | number "days" RESTD | number "hours" RESTH  | "?
"; TIME : INSTANT INSTANTS  | number "minutes" RESTMIN | number "seconds";  | "?
"; INSTANTS : /* empty */ | "and" INSTANT INSTANTS; INSTANT: INS_ABSOLUTE | INS_RELATIVE; INS_ABSOLUTE : T | "[" T "," T "]"; | "(" T "," T "," T "," T) | "approximately" T | DURATION "ago"; T : HOUR DATE | HOUR | DATE; DATE : number | number "/" number  RESTY : /* empty */ | number "months" RESTM; RESTM : /* empty */ | number "days" RESTD; RESTD : /* empty */ | number "hours" RESTH; RESTH : /* empty */ | number "minutes" RESTMIN; RESTMIN : /* empty */ | number "seconds"; INS_RELATIVE : DURATION "before" REFERENCE | "before" REFERENCE | DURATION "after" REFERENCE | "after" REFERENCE  | number "/" number "/" number  | "approximately at the same time of" REFERENCE  | "today"  | "at the same time of" REFERENCE;  | "yesterday"; HOUR : number ":" | number ":" number | number ":" number ":" number  REFERENCE : "last occurrence of event of" OBSERVABLE | "first occurrence of event of" OBSERVABLE | "occurrence of maximun value of " OBSERVABLE | "occurrence of minimun value of " OBSERVABLE;  | "now";  Figure 2 BNF syntax of Interaction Language.
The variables are in capital letters and the tokens in small letters (in inverted commas if they are literals) 0-7695-0756-5/00 $10.00 a 2000 IEEE  time of occurrence of this event.
This time may be an absolute instant, an instant relative to other or a list of instants (absolute or relative), where all of them may be precise or imprecise.
The purpose of the Interaction Language is allowing an easy and expressive way for the user to interact with the system.
Although this is a user friendly interface, the Interaction Language can not take the advantage of the automatic theorem proving that we could have with a formal logic language.
That is why we use an intermediate stage for translating the sentences given by the user in the Interaction Language into the first order language of the Fuzzy Temporal Constraint Logic.
We have implemented a module, named ABSTRAE, that performs this translation in an automatic and syntaxdirected way with the help of the LALR(1) parse generator Yacc [10].
3.
Fuzzy Temporal Constraint Logic We review the Fuzzy Temporal Constraint Logic (FTCL) that has been formalized in previous works [3] [4].
It is based on Possibilistic Logic [6] [7] [8].
We give in this section the syntax and informal semantics of this logic.
The resolution principle process is briefly described in section 3.1.
Let be a many-sorted language [9].
is a firstorder language consisting of the following elements: punctuation marks, logical connectives, quantifiers, numerable set of variables (that may be observable variables, value variables, instant temporal variables and duration temporal variables), numerable set of functions (divided into the same types as the variables) and numerable set of predicates.
In this latter set, apart from observable predicates, temporal predicates and value predicates, there exists a special one, called mixed predicate.
Through this predicate we can represent events, in which an observable is associated with a value and with a time.
With the previous elements, and just as in classical logic, we define the notions of term and formula.
There are four types of terms, depending on the type of variable included in them, and the formulas will be heterogeneous, that is to say, they will be formed by predicates and terms of different types.
With this definition of , the syntax of FTCL can be summarized as follows: Let  be the set of interpretations associated with .
Let T be the discrete time axis.
We consider that L=[0,1] T is a lattice of fuzzy subsets of T. The fuzzy inclusion defines an ordering in this lattice.
Furthermore, the lattice operators on L are the fuzzy intersection, the  n  n  n  0-7695-0756-5/00 $10.00 a 2000 IEEE  n  fuzzy union and the fuzzy complementation [11].
(L,[?],[?])
is a complete distributive lattice but it is not Boolean since generally t~ [?]
t~ [?]
T and t~ [?]
t~ [?]
[?]
.
Given a clause z of , in which the instant temporal variable pi appears, we propose the following definitions: Definition 1 A temporal possibility distribution for the instant temporal variable pi in is a function, pi : -L , which will be associated with this temporal variable.
Definition 2 We define a context temporal possibility ~ : - L , induced by each p , as function P i i ~ P (z ) = [?
]{p (o ), o is a model of z } i i Definition 3 We define a context temporal necessity function Ni : -L, induced by each pi, as  n  n  n  n  ~ N (z ) = [?]
{p (o ), o is a model of !z } = i i [?]
{p (o ), o is a model of !z } i Definition 4 We define a fuzzy temporal constraint ~ clause , as a pair (z , ) , where z is a Horn clause of  fi    n, which consists of k predicates in which n temporal ~ variables appear; fi is a tuple (t~ ,..., t~ ) , where each 1 n  t~ is a subset of [0,1]T, or a fuzzy subset of T, being T i ~ the discrete time axis.
tells us that each instant ~ (z ) .
temporal variable pi occurs in a time t~ [?]
N i i Definition 5 We define the temporal truth degree of a predicate rk, in which the instant temporal variables pi and pj are involved, and we will denote it by means of ij ij V~ , as a function V~ :  - L defined as : T if rk is k k completely true, [?]
if rk is completely false, and a fuzzy ij subset ~ v of T otherwise.
k ij ~ v will measure the fuzzy set of instants to which a k predicate in question can certainly be referred, bearing in mind the relationship with the instant temporal variables pi and pj.
We shall associate to each fuzzy temporal constraint ~ ~ ~ = (V ,...,V ) of true values of each clause , a tuple 1 K predicate; and a tuple N=(a1,...,an), which gives us lower bounds for the certainty value that each one of the temporal variables pi of z takes its value at given times ij with t~ , and it is going to depend on Ni and V~ .
i k In [3] a full description of the FTCL-semantics can  fi    O  be found, including the proofs of the deduction and refutation theorems.
3.1 Resolution principle The objective of this section is to summarize the FTCL-resolution principle [3] [4].
We are going to use two notions of the necessity function for each one of the instant temporal variables pi: the context temporal necessity function Ni, already defined before, and the conventional necessity function, denoted with Ni.
There may be various temporal variables in a clause, thus it is important to introduce a necessity value associated with each one of them.
This tells us the uncertainty, which will be associated with each one of the temporal variables in a clause.
On the other hand, we consider that in the clause there may be fuzzy or imprecise predicates, which in our case are limited to the temporal predicates (for example, before).
Thus, a temporal truth degree, ij ~ v , is associated with each predicate, being pi and pj the k temporal variables involved in the fuzzy temporal predicate, as defined before.
The process of refutation will be as follows: 1.
In each clause, a lower bound of ai and another of t~ is assigned to each one of the temporal i variables pi.
The first ones is set to 1, and the others are set to the universal constraint T. When, instead of a variable, we have a constant, it will be started at its value, if it is given as a trapezoidal fuzzy number, or at L0k, if it is given at a node Pk of the temporal constraint network.
2.
In the unification process, for each t~ , the i following formula will be applied: ji ji t~ = t~ [?]
t~ '[?
]v~c~ [?]
v~c~ ' k i i i k being t~ ' the value of context temporal i certainty which is associated with the unified variable or unified constant with pi, k the index of predicate which is being manipulated in this ij ij step of resolution and ~ v c~ = t~ [?]
v~ .
k i k 3.
Each time we make an intersection with the t~ , i which belong to the predicate rk, we update the ai of this variable according to the following formula: ai=min(ai, ai',cmi), being  0-7695-0756-5/00 $10.00 a 2000 IEEE     1 - sup inf 1 - ut~ (t ), ut~ ' (t )  if r k is  t [?]
T  i i   not temporal  cm =    i    1 - sup inf 1 - u ~ ji (t ), u ~ ji (t )  if r k is v v '   t [?]
T   k k  temporal  If rk is temporal, we suppose that the instantiated variables pi and pj appear in rk.
On the other hand, u (t ), u (t ), u (t ) y u (t ) are the ji ji t~ i t~ i v~ v~ ' k k membership functions of each one of these fuzzy sets.
4.
Finally, with all the ai, we calculate a limit a for the conventional necessity value according to the expression a = mini ai.
The soundness of refutation by resolution of FTCL is showed in [3] and [4].
Furthermore, in the second paper, the previous resolution principles proposed in [6] and [7], are generalized.
4.
Resolution optimization in the search process In this section we show the simplification criteria and the heuristic evaluation function used for improving the search process in the implementation of the unit resolution for FTCL.
First, we use the fuzzy number ordering functions proposed by Marin et al.
[12] for obtaining a simplification on queries that imply an exhaustive search in the data blackboard.
Secondly, in order to prune the tree, we use a compatibility function to check the possibility of obtaining a fuzzy temporal instant different to empty set, in the unification of two imprecise temporal variables.
We use the unit resolution in the search strategy.
Each unit clause has just one literal.
If one of the parents of a resolvent is a unit clause and the other a clause C, this resolvent must contain less literals than C and this way the resolvent is closer to the empty clause.
Therefore, a trivial heuristic is using only unit resolutions in the refutation process.
In order to make this process complete [5], we use a slightly restricted form of clauses with at most one positive literal which are the Horn clauses.
In our case using only Horn clauses does not reduce the expressivity power of the language.
So the strategy will be complete, as duly, and moreover we will prune the tree in such a way that the pruned branches would not lead to any possible refutation.
For the sake of simplicity, in sections 4.1, 4.2 y 5, ~ tuple of clauses.
we omit the  fi  4.1 Simplification criteria There are three kind of queries that the TSM can support: 1.
If one asks about the time of occurrence of an event then the query is translated into a unit clause in this way observation(OBS1,VALUE1,pa), where OBS1 is an observable constant, VALUE1 is a value constant, and pa is an instant temporal variable.
No simplification strategy is applied in this case due to the simplicity of the query.
2.
If one asks about the value taken by an observable of the blackboard at a certain time, three cases are considered: a) The time is absolute.
In this case we have again a unit clause like this: observation(OBS1,va,TIME1), where OBS1 is an observable constant, TIME1 is an instant temporal constant, and va is a value variable.
b) The time is relative to an instant.
Here we have to apply some simplifications and this will be discuss later.
c) The query in the Interaction Language has multiple temporal labels linked with the token ''and'' (see figure 2).
In this case the size of the query is bigger but its complexity is the same as in the two previous cases.
3.
If one asks if an attribute value of an observable happened at certain time, then the query is similar to the previous queries taken into account that now all variables are instantiated.
Next we describe the mechanism of simplification and we focus on the case 2.b) above, since the other cases where relative temporal variables appear can be resolved in the same manner.
A query of this form written in the Interaction Language has the structure query obs1 ?
duration relation reference  (1)  where obs1 denotes an observable of the blackboard, ?
means that a value variable is being consulted, duration is a time extent, relation can be one of the following expressions: BEFORE, AFTER, APPROXIMATELY AT THE SAME TIME OF or AT THE SAME TIME OF, and reference may be: LAST  0-7695-0756-5/00 $10.00 a 2000 IEEE  OCCURRENCE OF EVENT OF OCCURRENCE OF EVENT OF obs2, OF MAXIMUM VALUE OF obs2 or OF MINIMUM VALUE OF obs2.
The query (1) can be expressed in  obs2, FIRST OCCURRENCE OCCURRENCE  n as  [?
]p pg,pc [?
]v va,vb (observation(obs1, va, pg)[?]
observation(obs2, vb, pc)[?]
relation(duration, pg, pc)[?]
[?
]p pe [?
]v vd (observation(obs2, vd, pe)[?]
!Q=P)), where P is one of the following expressions: after(df, pc, pe) if reference is LAST OCCURRENCE OF EVENT OF obs2, before(df, pc, pe) if reference is FIRST OCCURRENCE OF EVENT OF obs2, >=(vb, vd) if reference is OCCURRENCE OF MAXIMUM VALUE OF obs2 or <=(vb, vd) if reference is OCCURRENCE OF MINIMUM VALUE OF obs2.
Moreover Q is the expression at_the_same_time_of(pe, pc) if P is after(df, pc, pe) or before(df, pc, pe) and the expression =(vb, vd) if P is >= (vb, vd) or <= (vb, vd).
Therefore, the negation of the query (1) is translated into three clauses of the FTCL language,  !observation(obs1, va, pg)[?]
!observation(obs2, vb, pc)[?]
!relation(duration, pg, pc)[?]
observation(obs2, g(va,vb),f(pg,pc)), !observation(obs1, va, pg)[?]
!observation(obs2, vb, pc)[?]
!relation(duration, pg, pc)[?]
!Q,  (2)  !observation(obs1, va, pg)[?]
!observation(obs2, vb, pc)[?]
!relation(duration, pg, pc)[?]
!P, where P is one of the following expressions: after(df, pc, f(pg, pc)) if reference is LAST OCCURRENCE OF EVENT OF obs2, before((df, pc, f(pg, pc))) if reference is FIRST OCCURRENCE OF EVENT OF obs2, >= (vb,g( va, vb)) if reference is OCCURRENCE OF MAXIMUM VALUE OF obs2 or <= ( vb,g( va, vb)) if reference is OCCURRENCE OF MINIMUM VALUE OF obs2.
Moreover, Q is the expression at_the_same_time_of(f(pg, pc), pc) if P is after(df, pc, f(pg, pc)) or before((df, pc, f(pg, pc))), and the expression =(vb, g(va, vb)) if P is >= (vb,g( va, vb)) or <=(vb,g(va, vb)).
Furthermore, f and g are Skolem functions introduced when existential quantifiers are eliminated.
Realize that in many-sorted logic like this, the quantifiers (existential or universal) are specific for each kind of variables.
In order to make the search efficient it is convenient to locate the reference time pc first, since we must look for the last, first, maximum or minimum occurrence of a value in the blackboard.
Next we find pg using relation.
This is better than if one first finds consistent values for pc and pg and after checks, for any pair of these values, if pc is really the reference required.
Moreover, if we assign suitable semantic interpretations to f and g then the set of the former clauses becomes shorter and the search process in the blackboard is improved considerably.
Now we show how to define f and g. Let f be above Skolem function and pc the second variable of the domain of this function.
With the following definitions we give a semantic interpretation to the function f. Definition 10 If P is after(df, pc, f(pg, pc)) then f returns the last fuzzy temporal instant of occurrence of an event of obs2.
Definition 11 If P is before(df, pc, f(pg, pc)) then f returns the first fuzzy temporal instant of occurrence of an event of obs2.
Let g be the other Skolem function and vb the second variable of the domain of this function.
The following definitions give us a semantic interpretation to the function g. Definition 12 If P is >=(vb, g(va, vb)) then g returns the maximum value of the observable obs2.
Definition 13 If P is <= (vb, g(va, vb)) then g returns the minimum value of the observable obs2.
Corollary 14 With the former definitions of the Skolem functions f and g, the third clause of the set (2) can be eliminated.
It is worth noting that the above discussion would not have any sense without efficient procedures for computing functions f and g .
Efficient fuzzy number ordering methods are required in order to compute the function f. A wide study about this ordering functions with good results can be found in [12].
The computing of the function g is a trivial implementation problem which we are not going to deal with.
4.2 Heuristic evaluation function In our resolution process, the resolvents are taking necessity values in the way explained in section 3.
However these values do not provide a criterion to prune a branch, since one can has a null necessity although there may exist a possible refutation.
So, if we use the necessity functions the search process would be incomplete.
Instead, we base our heuristic evaluation function on the function  0-7695-0756-5/00 $10.00 a 2000 IEEE  [  ]  P ( p , p ' ) = sup u P[?]
P ' (u ) = sup min u P (u ), u P ' (u ) t[?
]T u[?
]U defined by Zadeh [15] to show to what extent a value compatible with P and P' can be found.
We call this function h whose domain is the set of clauses (resolvents, to be precise) and for every clause z, h is defined as      sup inf  ut~ (t ), ut~ ' (t )  if r k is not temporal t [?]
T  i i   h (z ) =        sup inf  u ~ ji (t ), u ~ ji (t )  if r k is temporal v '  t [?]
T  v k  k  rk is the predicate used in the unification.
In both cases, variables pi , pj appears in the predicate and u (t ), u (t ), u ji (t ) y u ji (t ) are the v~ v~ ' t~ i t~ i k k membership functions to each one of the fuzzy sets defined in section 3.
The objective is to evaluate, whenever two temporal variables are unified, the possibility of finding some precise instant of the time axis that belongs to both variables.
If this possibility is null then the refutation can not be reached with the pruned branch.
In this way, the completeness of the resolution process is maintained.
We could relax the condition of null possibility to have a certain limit of possibility so that beneath this limit the search is stopped.
This would increases the efficiency but the completeness is lost, on the other hand.
The theoretic completeness is studied in [3].
5.
Example We are going to describe an example belonging to an application on the domain of Intensive Care Units.
The observations come from a patient with severe ischemic cardiopathy, submitted to continuous monitoring of the electrical and mechanical signals of the heart.
We want to know if there was relative low blood pressure (RLBP) approximately 90 minutes after the administration of oral nitrates (OR_NIT), supposed that in the blackboard we have just the following facts: observation(RLBP,YES, P1) observation(RLBP,YES, P0) observation(OR_NIT, YES, P2), being P0, P1 and P2 the nodes of the fuzzy temporal constraint network of figure 3.
P0  L01 =(80,120,180,360)  P1  L21 =(20,60,120,300)  L02 =(60,60,60,60)  P2  Figure 3 Fuzzy Temporal Constraint Network of example  evaluation function of section 4.2.
We suppose that the third clause has already been eliminated.
Moreover, for the sake of clarity, the only clause used is the second one which leads to a refutation.
In this case, with the resolvent (*) the refutation is achieved, whereas a cut is done in the resolvent (**) .
This is because the heuristic function h returns zero in this case since  On the other hand, the query is expressed by means of these three clauses in FTCL language: !observation(RLBP, va, pg)[?]
!observation(OR_NIT, YES, pc) [?]
!after(approximately ( 90MINUTES), pg, pc) [?]
observation(OR_NIT, g(va, YES), f(pg, pc)), !observation(RLBP, va, pg)[?]
!observation(OR_NIT, YES, pc) [?]
!after(approximately ( 90MINUTES), pg, pc) [?]
!at_the_same_time_of(f(pg, pc), pc),    20 v~k = (30,60,120,150 )  where  !observation(RLBP, va, pg)[?]
!observation(OR_NIT, YES, pc) [?]
!after(approximately ( 90MINUTES), pg, pc) [?]
!after(df, pc, f(pg, pc))  6.
Conclusion In this work we have described a Temporal Solving Module (TSM) for adding assertions and answering queries in a data blackboard which contains facts that  !observation(RLBP,va,pg)v !observation(OR_NIT,YES,pc)v !after(approximately(90MINUTES),pg,pc)v !at_the_same_time(f(pg,pc), pc) SIMPLIFICATION  !observation(RLBP,va,pg)v !observation(OR_NIT,YES,pc)v !after(approximately(90MINUTES),pg,pc)v !at_the_same_time(P2, pc)  NETWORK  h(z)=1 !observation(RLBP,va,pg)v !observation(OR_NIT,YES,P2)v !after(approximately(90MINUTES),pg,P2) h(z)=1 observation(RLBP,YES,P1)  !observation(RLBP,va,pg)v !after(approximately(90MINUTES),pg,P2)  observation(RLBP,YES,P0) h(z)=1  h(z)=1  !after(approximately(90MINUTES),P0,P2)  (*) !after(approximately(90MINUTES),P1,P2)  NETWORK  h(z)=1 l  Figure 4 Search tree of example 0-7695-0756-5/00 $10.00 a 2000 IEEE  and  20 ' v~k = (- 60,-60,-60, -60 )  The search tree is shown if figure 4, where we can see the values taken by the variables in each step of the resolution, following the simplification mechanism of section 4.1 and making the cut according to the heuristic  observation(OR_NIT,YES,P2)    h(s ) = sup inf  u ~ 20 (t ), u ~ 20' (t )  vk  vk  t [?
]T  (**)  h(z)=0 CUT  may be related together by means of fuzzy temporal constraints.
An Interaction Language with the TSM has been defined to provide an easy but expressive interface.
And in order to take the advantage of the automatic theorem proving, we have implemented a parsing module to translate the sentences written in the Interaction Language into Horn clauses of the first order language of a Fuzzy Temporal Constraint Logic (FTCL).
The main results achieved in this work are the simplification criteria and the heuristic evaluation function given for improving the search process to achieve the refutation without loosing the completeness of the resolution process.
Temporal Constraint Logic: A Valid Resolution Principle.
Fuzzy Sets and Systems.
In press, 1999.
[5]  R.D.
Dowsing, V.J.
Rayward-Smith, C.D.
Walter, A first Course in Formal Logic and its Applications in Computer Science, Blackwell Scientific Publications, 1986.
[6]  D. Dubois, H. Prade.
Resolution principles in possibilistic logic.
International Journal Approx.
Reasoning, 4 (1990) 1-21.
[7]  D. Dubois, J. Lang, H. Prade.
Timed possibilistic logic.
Fund.
Inf.
XV (1991) 211-234.
[8]  D. Dubois, J. Lang, H. Prade.
Possibilistic Logic.
Handbook of Logic in Artificial Intelligence and Logic Programming.
D. M. Gabbay, C.J.
Hogger, J.A.
Robinson, eds., 1994, 3: 439-513.
[9]  H. B. Enderton, A Mathematical Introduction to Logic, Academic Press, New York, 1972.
[10]  S.C. Johnson, Yacc: Yet Another Compiler-Compiler, Computing Services Technical Report No.
32, Bell Laboratoires, Murray Hill, N.J., 1975.
[11]  Kaufmann A., Gupta M., Introduction to Fuzzy Arithmetic, Van Nostrand Reinhold, New York, 1985.
[12]  R. Marin, M.A.
Cardenas, M. Balsa, J.L.
Sanchez.
Obtainig Solutions in Fuzzy Constraint Networks.
International Journal of Approximate Reasonig 16 3-4, p. 261-288, 1997.
Y. Shoham, Reified Temporal Logics: Semantical and Ontological Considerations, in: Proc.
1986 European Conference on Artificial Intelligence, Society for the Study of Artificial Intelligence and Simulation of Behavior (ALSB), pp.
390-397, 1986.
Acknowledgements This work has been partially supported by CICYTFEDER and EC project 1FD97-0255-C03-01.
References [1]  S. Barro, R. Marin, R.P.
Otero, R. Ruiz, J. Mira.
On the Handling of time in intelligent monitoring of CCU patients.
Proceedings of the 14th Annual International Conference of the IEEE Engineering in Medicine and Biology Society (1992) 871-873.
[2]  S. Barro, R. Marin J. Mira, A.R.
Paton.
A model and a language for the fuzzy representation and handling of time.
Fuzzy Sets and Systems, 61 153-175,1994.
[3]  M.A.
Cardenas, M. Balsa, J.T.
Palma, R. Marin.
Logica de restricciones temporales borrosas: sintaxis y semantica.
Proceedings of 6th Iberoamerican Conference on Artificial Intelligence IBERAMIA-98, Lisboa (Portugal), 6 a 9 de Octubre de 1998, Progress in Artificial Intelligence.
Helder Coelho ed., pag.
147-158.
[4]  M.A.
Cardenas, R. Marin, I. Navarrete.
Fuzzy  0-7695-0756-5/00 $10.00 a 2000 IEEE  [13]  [14]  L. Vila, L. Godo.
On fuzzy temporal constraint networks.
Mathware and Soft Comput., 1(3), 315334, 1994.
[15]  Zadeh, L.A., Fuzzy sets as a basis for a theory of possibility, Fuzzy Sets and Systems, 1, 3-28, 1978.