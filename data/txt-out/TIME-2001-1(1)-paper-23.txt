Reasoning About the Temporal Aspects of Interacting Agents* Edjard Mota email: edjard@dcc.fua.br Departamento de Ci6ncia da Computa@o Universidade Federal do Amazonas AV.
Gen. Rodrigo OtBvio, 3000 Mini-Campus CEP: 69077-000 Manaus - Brasil  April 16, 2001 Abstract The formalization of temporal reasoning for dealing with actions taking place at different grains of time has been investigated in the recent years.
The main concern has been the representation of the real calendar and the mechanisms needed for mapping events "annotaded" with any convex an non-conuex intervals to their annotation in the calendar.
This work presents some results on the representation and reasoning about the actions of agents interacting at different time scales.
1  Introduction  The investigations on the representation and reasoning about the interaction of agents have not paid too much attention to the temporal aspects of the interaction itself.
We should understand this as the way models of agents influence each other as time goes by, despite the fact that such influences may happen at different grains of time.
In domains like simulation models of ecological and/or social systems there can be problems when one needs to integrate models (agents) specified at different time granularities.
In this work we shall see how a temporal logic programming approach can be used to formalize the behaviour of an agent when observing the change of other agents' attribute if suh informa*This work was partially supported by the Brazilian Research Council (CNPq), Lab-TIAMA grant.
0-7695-1 107401 $10.00 0 2001 IEEE  57  tion is relevant to its behaviour.
Three main issues are involved here: a) the representation of information about periods at differente levels, b) the exchange of timing information across different models of autonomous agents, and c) the problems we face when combining both issues above in simulation models of autonoumous agents.
We propose a way to tackle the problem (b) and address a brief discussion on ( c ) .
The rest of this paper is organised as follows.
In Section 2 we shall see the main motivation for this work .
In Section 3 presents a logic programming approach to representing an agent's behaviour.
Section 4 presents our solution for the problem this work aims to solve.
In Section 5 some related work are addressed.
Finally, Section 6 presents a brief discussion and the concluding remars.
2  Motivation and Related Work  2.1 The Problem to be Solved When modeling how change takes place at different levels of abstraction on such systems, there can be three different situations of temporal interaction: 1.
There are two interacting agents, say a1 and a2, in which their models are expressed at the same level and they update their states at the same tick of the clock.
We shall say they are aligned in time.
co.astructor of composed lengths of time, and P is a period.
For instance, p(10, day) plus p(3, month) a f t e r t(2,1,2001).
There are two interacting agents, say a1 and their models are not expressed at the same level of granularity.
a2, but  Any temporal formula A @ Ti is written as A @ A temporal temporal normal logic PrOgrajm has the form {cl :: h , - -7-c n :: where each Ci is a temporal clause and 13, is its temporal substitution framework (TSF), used to perform a special unification [l].
We now use this language and set notation to describe the model of an agent's behaviour.
Let Att, be an attribute of an agent A which changes every P units of time, and Attb be an attribute of another agent B which affects A.
The simulation clause scheme ( S C S ) of A's behaviour which changes Att is given by  There are three interacting agents, say a l , a2 and a3.
Agents a1 and a2 have their models expressed at the same level, but their states change non-aligned in time.
T :: [(3"%)].
The main questions we have to face are: i ) what is the value of the attribute of each agent at a specific time in between two consecutive time steps at the agent's scale of time?
ii) what are the values of an agent's attribute during a certain period of time?
(for aligned and non-aligned periods in relation to changes on the agent's attributes).
3  Representing Agents  the  Behaviour  of  walue(Att, A, &) @ Ti :: [(Ti, Xi)].
value(Att, A, V i ) Q T vaZue(Att, A, V,) @ Tp& VL = {V I value(Attb,B , V ) @ T' and Ti is included in Tp...T}& W f p , V L , Vf1 :: [(Tp, Xp),(T, P a f t e r Tp>l.
+  Here, models of agents' behaviour are represented by an extension of Prolog, enhanced with a special unification for temporal labels [l].
The logical connectives for conjunction, disjunction, and implication are represented here by &, or, and -e=,respectively.
The only temporal operator used here is the throughout @ operator.
A classical formula is "annotated" (in the sense of [2]) with temporal expressions, and in this case it is called an atomic temporal formula if the associated classical formula is atomic.
In the case of a classical well formed formula, when each of its elements or the whole formula is annotated, then we call it a well formed temporal formula (WFTF).
Temporal entities of the hierarchy of time are called Pure temporal expressions (PTE).
The sorts of PTEs or temporal entities of interest for this work are defined as follows.
0  0  where value(Att,At,V,) @ T, is the initial state of Att and R(Vp,VL,Vf) represents a sequence of sub-goals which relates V,, VL and Vf.
This clause scheme is used as an abstraction and it could be pluged within any other standard logic of action and change.
The actual difference to standard computational logic is the mechanism of inference for dealing with non-aligned processes which we shall see next.
4  Reasoning about Interacting Agents  4.1 Agents Aligned in Time For this case the deduction process tries to satisfy a given query relative to an attribute's value at an specific time T.If Tfis the final time point of the search interval with length P , then we start from t,he first value of the attribute and repeatedly get new instances of simulation clause for the changes of the attribute.
We stop when either 1' = Tf or Tf precedes T,where Tf = P  t ( q ,...,z,) to represent one moment of time.
For instance, t(16,6,2001) is a moment in a three level hierarchy of time.
P a f t e r T represents a time in the future obtained from T after a period of length P. The form of P can be either p(Value, Scale), or p(VaZue,Scale) plus P , where plus is a  a f t e r Tp.
We extend the meta-interpreter of [l] as follows, where v a r ( X ) is true if X is a variable and  58  body-o f -scs(A) is true if A can be matched with the body of a SCS.
1var(T1) & body-of-scs(vaZue(Att, Ag, V ) @ T I) & clause(vaZue(Att,Ag, Vi)@ Ti e T :: Oi) & (Ti,Tz)E Oi & TI does not precede T2 & 21' = Pa after T2 aligned-search(P,, vaZue(Att, Ag, K ) @ Ti, Oi, vaZue(Att, Ag, V ) @ T ,Os, Of).
soZve(vaZue(Att,Ag, V ) @ T ,Os, Of) e= (T,Tl)E os, 85 var(T1) body-of -scs(vaZue(Att, Ag, V ) @ 7') & cZause(value(Att, Ag, &) @ Ti -e=T :: On) & f ree-search(vaZue(Att, Ag, E) @ Ti, On, vaZue(Att, Ag, V ) @ T, Os, Of).
The declarative meaning of it is that the value of the attribute Att of the agent Ag is V throughout T if TI is the temporal substitution of T in U,, and TI is a variable, and value(Att, Ag, V ) @ T can be matched with the body of a simulation clause, and there is a clause value(Att, Ag, Vi) 63 Ti T with TSF On, and the search free of fixed time yields a solution for vaZue(Att, Ag, V ) a t time T , with T in Os, and Of is its TSF.
In the free_search/5 the use of new instances of SCS involves temporal combination to generate them.
This shall be represented by the predicate inst-simul-cls/5 which associates X, @ Tpof the body of a SCS and its TSF O to the head of this new clause instance, the constraints after X, @ Tp,as well as in the new TSF resulting from this new instance.
This is formalised as follows.
+  The declarative meaning of this clause is similar to the previous one.
In what follows we show the possible cases and their specification, where change(Att, Proc) is true if Att is changed by process Proc, scaZe(Agent, Proc, s)is true if Agent has a process Proc which runs at scale of time S, and smaller-period(P1, Pz) is true if period PI is a length of time smaller than P2.
f ree-seurch(X @ Ti, Oi,X @ T ,0, Of) s temp-comb(Oi, Ti,0, T, Of).
free-search(Xp @ Tp,Op, Xr @ T r , Os, Of) tinst-simu-cZs(Xp @ Tp,op,Xf @ T ,C,8,) &  4.2  Agents Aligned and Non-Aligned in  Time The idea now is to align the search so that the last time stamp found, or Vf will always be at the given T of the query, i.e.
T = 5"' will always hold.
This policy forces the search to take any new influence into account.
Formally we have the following soZve/3 definition for this case.
soZve(vaZue(Att,Ag, V ) @ T ,Os,0,) (T,Td E 0 s &  +=  59  (Pl = P P 1 , Sl) Plus A-,S ) temp-comb(Tj, [(Tj,V,)], T ,  The search/5 stops when the the final time is reached, otherwise a new instance of simulation clause is matched with the value of the attribute at the previous time, the constraints are solved and the search re-starts with this new value.
Formally we have.
seurch(X @ T,,e,, X @I T,, e,, e) e e,/ = 8, \ { ( T IVn)) , 8-z Os!
= 6, \ { P S , temp-cmb((T,, V,), Os/, (Tn,K),en/,e!).
search(X, @ T,,O,,X, @ T,,8,,8f) -+= (TE,VZ) E 8, & ( T T ) V,) E e r V, precedes V, & inst-simu-cZs(X, @ T,, e,, X f @ T , C,e) & e' = e \ {(T, vi) & temp-comb((T,,V,),[ I , ( ~ , V ) , e ' , e j ) ((precedes(V,,V,) & X , = X , & Of = e,) or (VTdoes not precede V, & soZve(C, e,, e,,) & search(X, @ T,,Ojt,X, @I Tj-,e,,ef)).
then the period observation is open on the right.
We use length-of-time(lL, P ) to associate any linear interval to its length (i.e.
its ending points inclusive).
From this point there are two possible computations as we show as follows.
First the case where agents are aligned.
Representing Interaction Between Agents Two agents A, and- A, interact at different grains of time, and an attribute Att, of A, affects an attribute Att, of A,.
Agent A, has to "observe" the changes on the values of Att,.
The observer process (OP) will get the progression of the values of Att,, in a list L , during a specific period of time of the length of IC.
This idea is 4.3  depicted in Figure 1.  state 1  state 2  progress-observed( value(Att, Agent) @ T , P,[VIRl, os, Of) -+= chcmge(Att,Proc) & scale(Agent,Proc, S ) & (T,Tp)E 8, & Zength_of-time(Tp...Tf, P) & soZve(vaZue(Att, Agent, V) @ T ,e,, e,) & compute-rest(vaZue(Att,Agent, V) 63 T , q ,p, s,On,Of, R).
Second, for the case where the initial state of the attribute is either included within the given period or the initial state occurs at some time after the last time of observation, we have.
progress-observed(vaZue(Att,Agent) @ T , P , Prog, e,, 0,) + chtsnge(Att,Proc) & scaZe(Agent, Proc, C ) & (T: B p ) E 8, & Zengtk-of-time(Bp...B f ,P ) & l s d v e ( v a Z u e ( A t t ,Agent, -) @ T,e,, -) & soZve(vaZue(Att, Agent, V) @ Ti,e,, e,) & VZ,Bi) E 8, ik (Tprecedes(Bf,Bi) & Prog = [VIR] & compute-rest(vaZue(Att,Agent, V) @ Ti, Bf,p, c,On, Of, E ) or precedes (Bf ,B,) & prog = [ I> In the rest of the progress, represented by compzrterest/5, the important thing to describe is how the period of observation relates to the agent's scale of change.
For the simplest case where P is smaller than the length of C , we have four different cases as depicted in Figure 2.
First, P starts at a time aligned to an updating time step of the agent's attribute ( a ) .
Second, P finishes at an updating time ( b ) .
Third, it is in between two consecutive updating time steps, ( c ) , and finally it includes a single updating time step ( d ) .
This gives us the following specification.
state k  Figure 1: Interaction between agents Ai and Aj, where the OP of Ai get the list L of values of Attj during a period IC units of time.
The extension of the meta-interpreter for dealing with it is simply to call for the predicate progress-observed(value(Att,Agent) @ T ,P, L , 6,, 0,).
As the value of the observed attribute at the right ending point is unimportant to compute the state of the agent for that time,  60  4 TI P Tr ,b)  111  T  I  Figure 2: Case 1 - a ) P starts aligned; b) ends aligned; c) P is included in between two consecutive time steps; d ) P includes a single time step.
length greater than or equal to the length of c, then it should compute the progression of the value of the attribute until time Tf, taking theses cases above into account.
This is formally specified as follows.
-  -  compute-rest(vaZue(Att,Agent, -) (Q -,Tf, compute-rest(vaZue(Att, Agent, V ) 63 Ti,Tf, P(D, Cl),c2, Os, Of,[Vi]) 1 (Cl= C2) & P(D,Cl), Os, Of,R) smaZZer-period(p(D, Cl),p(l,C2))& smaZZerqeriod(p(1, C ) , p ( D ,Cl)) & soZve(vaZue(Att,Agent, V f )(Q T , [(T, Tj)lO,], Of).
evoZve(vaZue(Att,Agent, V ) 43 Ti,Tf, C,Os,Of,R).
c,  Now, there are three possibilities when evoZve/4 is called:  The other case is the one in which the length of c is smaller than or equal to the length of P. This can lead us to other possibilities which we classify in two ways.
In the first case, depicted in Figure 3, P can be decomposed into C and either it matches the actually updating time steps of the agent's attribute ( a ) , or it may be non-aligned (b).
It may also not be decomposable and then it matches at the beginning ( c ) but not at the end, or vice-versa (d).
1.
Ti is equal to T', then R should be associated with an empty list.
-  2.
Ti is not equal to Tf, then apply resolution between vaZue(Att, Agent, V ) 43 Ti and the body of a simulation clause  vaZue(Att,Agent, V,) 63 p(1, C ) a f t e r Ti vaZue(Att,Agent, 5) @ p(1, C ) a f t e r T, & Constraints.
Either:  (a) Tf precedes T', i.e.
Ti a f t e r p(1,C ) or the next value to be computed, then find Vf at Tfassociate R to [Vf] (b) Tfdoes not precedes T', then solve the Constraints, and associate R to [V,[RI] and compute the rest of progression in RIfrom Tj until Ti.
Figure 3: Case 2 - The Period of observation is modularly decomposable into C , ( a ) and ( b ) , and P is not modularly decomposable, ( c ) and ( d ) .
5 The final case is where P and unitary length at c are equivalent and either ( a ) they are totally aligned (starts and ends at the same time step), or (b) they are non-aligned.
This is depicted in Figure 4.
What has to be done, in the context of compute_rest/5, is simply to check if P has a  61  Related Work  This work identified four important cases when the period of an agent's observation is shorter than the time scale of the other agent.
We can related them to the Allen's interval calculus [3].
Here we described ending interval, beginning interval, wholly within the interval, and overlapping.
in between t ( l l , l , 1) and t(13,1,1).
As a matter of fact this approach is symmetric to what is proposed here.
This problem only shows how complicated can be the use of models of interacting autonomous agents to predict the future within a temporal structure.
Our main contribution is to raise the problems of communication between interacting agents at different grains of time, and to address the passible initial direction to cope with it.
Other approaches on temporal granularity did not concerned with this identification, [4, 51.
A logic programming approach similar to this work is Chronolog(MC) [6] which is flexible for multiple granularities, but no exploration was made on representing interacting agents working at different clocks.
Kraus et.
al.
[7] proposed a strategic model of interaction that takes the passage of time during the negotiation process itself into account.
They investigated agents that lose over time and need to share resources.
They base their investigation in cooperation of agents while ours does not need to assume cooperation.
This means that our approach is not suitable for strategic models.
6  References .
[I] E. Mota, "Cyclical and granular time theories as subsets of the herbrand universe," in Principles of Knowldege Representation and Reasoning, 2000.
Discussions and Final Remarks  [2] T. Fruhwirth, "Annotated constraint logic programming applied to temporal reasoning," Tech.
Rep. 22, ECRC, July 1994.
Consider a scenario of interaction as depicted in Figure 5 where all agents work at grain 7.
The goal is for the time stamp t(20,1, l ) , and agents a3 and a4 both affect a1 and a2 but are introduce some time later.
According to policy we used the initial state for the search is t(6,1,1).
However, this is not fully accurate because a3 would has affected a1 since t(4,1,1).
[3] J. F. Allen, "Maintaining knowledge about temporal intervals," Communications of the ACM, vol.
26, no.
11, 1983.
[4] E. Ciapessoni, E. Corsetti, A. Montanari, and P. S. Pietro, "Embedding time granularity in a logical specification language for synchronous real-time systems," Science of Computer Programming, vol.
20, no.
1, pp.
141171, 1993.
Agent 9 I  Agent %  ~  I Agent q  [5] A. Montanari, "A metric and layered temporal logic for time granularity, synchrony and as.ynchrony."
First International Conference on Temporal Logic, July 1994.  .
Figure 5: Another situation in which two other non-aligned agents are present.
[6] C. Liu and M. A. Orgun, "Dealing with multiple granularity of time in temporal logic programming," Journal of Symbolic Computation, vol.
22, no.
5-6, 1996.
Alternatively we could take the earliest initial state of all agents affecting (in this case) a1 and start the search from it.
Note that in this situation the last change in a1 before t(13,1,1) is t ( l l , l , 1).
Thus, the value assumed for a1 state at t(13,1,1) would be the one found at t ( l l , l , 1).
However, this would be no better than the one proposed here because it would not take the influence of a4 upon a1 into account.
This other agent has been introduced at t(12,1,1) which is  [7] S. Kraus, J. Wilkenfeld, and G. Zlotkin, "Multiagent negotiation under time constraints," Artificial Intelligence, vol.
75, no.
2, 1995.
62