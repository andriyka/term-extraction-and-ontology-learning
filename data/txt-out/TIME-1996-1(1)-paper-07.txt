Reasoning about Concurrent Actions within Features and Fluents Choong-ho Yi Department of Computer Science University of Karlstad S-651 88 Karlstad, Sweden E-mail: Choong-ho.Yi@hks.se  Abstract  trast to the case for sequential actions where several entailment criteria, e.g.
chronologically maximal ignorance [Sho88], have been proposed for selecting intended models, no such method has been tested for dealing with concurrent actions.
The work presented in this paper is an approach '[in that direction" which has been done based directly on Sandewall.
By making necessary generalizations we have introduced concurrent actions into his framework which was restricted to sequential actions.
The resulting formalism is capable of reasoning about interdependent as well as independent concurrent actions.
Then as a first step, we picked out the simplest entailment criteria PCM (prototypical chronological minimization of change) and PCMF (filtered PCM) of Sandewall, allowed independent concurrent actions into the classes of reasoning problems for which he had proven PCM and PCMF to be correct respectively, and proved that these criteria are still correct for the respective extended classes.
Sandewall proposed a systematic assessment method for temporal logics.
In favour of the assessment of logics, we have introduced concurrency into his framework.
The resulting formalism is capable of reasoning about interdependent as well as independent concurrent actions.
We have then applied the entailment criteria PCM and PCMF t o selecting intended models of common sense theories where concurrent actions are allowed, and proved that the criteria lead to only intended models for respective subsets of such theories.
1  Introduction  With restriction to the case where actions are assumed to occur sequentially, a number of nonmonotonic logics have been proposed in AI.
In the meanwhile, research has advanced and one began to investigate model-theoretically whether a logic at hand produces conclusions correctly for a given theory.
In his Features and Fluents [San941 Sandewall proposes a new approach in this context.
For each of the major logics presented by then he identified, in a systematical way, a corresponding class of reasoning problems for which the logic is proved to obtain exactly the intended conclusions, i.e.
the range of applicability of the logic.
On the other hand, logics have been suggested by, e.g.
Kowalski & Sergot [KS86], Allen [AllSl], Pelavin [Pe191],Lansky [LanSO], and Georgeff [Geo86] which, directly or indirectly, allow concurrency.
As was the case in reasoning with sequential actions, the importance and the need to identify the range of applicability of a given logic could not be emphasized too much even when concurrent actions are allowed.
By this time, however, there has not been reported any systematic result in that direction.
Actually, in con-  2  describes a systematic approach to common-sense reasoning, where he first defined several classes of reasoning problems, formalised different nonmonotonic logics, and then assessed the correctness of each logic on the classes of reasoning prob1ems.l In his approach common-sense reasoning is understood on the basis of an underlging semantics which views the interaction between the ego of an intelligent agent and a world as a game, and which characterizes the actions the agent may evoke during the game in terms of a trajectory semantics.
The inertia problem is approached by building inertia into the underlying semantics, i.e.
the world has inertia so that features lThe presentation in this section is mainly based on [SanSS].
6 0-8186-7528/96 $5.00 0 1996 IEEE  The Features and Fluents In the Features and Fluents formalism Sandewall  results of an action, but also about its trajectories.
Since it is the world which performs actions, the pair (Inf 1,Trajs) characterizes a world.
Later, ego and world will be defined exactly in a trajectory semantics generalized for concurrency.
remain unchanged unless actions which override the inertia are performed.
2.1  The Game  The game is made in terms of a finite development  (8, M ,R, -4,  2.3 Commonsense Scenarios A commonsense theory is expressed as a tuple  B is a set of integers representing the time points at which the ego and the world alternate in the game and the largest member n of the set is "now".
M assigns values to temporal constants and object constants.
R is a mapping from a set (0,. .
.,n} of time points to a set R of states, i.e.
R is a history of the world up to n. The pair  (6,n, SCD,OBS).
0 is an object domain.
I3 is a set of formulae describing the effects of actions, e.g.
Cs,tl Openwindow 3 [tl WindowsOpen  ( M ,R)  which means if the Open Window action happens over the time interval s to t , then the feature Window rep-  then constitutes an interpretation for a given object domain 6.
A is a set of tuples (s,E , t ) where s and t are start respective end time of the action E and s < t 5 n, i.e.
a set of actions which have been terminated at time n. C is a set of tuples ( s , E ) where s is start time and s 5 n, i.e.
a set of actions which have been started but not terminated yet at time n. The tuple (a, M,R , A, C) works as a "game board" in the game; the ego and the world alternate and extend it such that, roughly, the world executes the actions which axe evoked by the ego.
2.2  resenting the openness of the window has value Open at time t. Actually, this set is an exhaustive description of Traj s in logical formulae.
SCD represents the actions scheduled to be performed, and is a set of action statements, e.g.
[3,51 Open Window,  and time statements, e.g.
The Trajectory Semantics and Nondeterminism  tl < 52.
The effect  The trajectory semantics characterizes actions in terms of two functions.
The function  [SI Window&Open  Inf1(E,r )  of performing [3,51Open Window is then obtained by applying the action statement to II.
The result of  represents a set of features which may be affected if the action E is performed in the state r .
The function  replacing each action statement in SCD by the effects specified by l7 will be written as ~ ( s c D ) .
OBS is a set of observation statements, i.e.
any formulae not containing action statements.
Trajs(E,r) represents a set of possible trajectories of E initiated in r , where a trajectory, written as U , is expressed as a finite sequence  of partial states ri (1  5 i 5 k) each of  2.4  Intended Models  If a scenario T = (O,II,SCD,OBS)is given, then the set of intended models of Y is defined as follows.
First, select an arbitrary world which is exactly characterized by II, select an arbitrary ego, an arbitrary initial state and an arbitrary initial mapping for temporal and object constants.
Let  which as-  signs values to exactly those features appearing in  Infl(E,r).
This sequence is a trajectory of the action of the form [s,s + kl E , where s is start point in time and s + k end point, and describes the effects of E successively for ecah time point during the execution period.
Therefore, in the trajectory semantics one cares not only about the nondeterministic  Mod(T) be a set of completed developments ( B ,M , R, A, C) obtained from games between them over Y such that there is a 1:l correspondencebetween members of the  7  nation Kp-IsAn represents a set of reasoning problems satisfying the restrictions IsAn and Kp.
Such combinations are used for identifying the applicability of different logics.
That is, the correctness of a logic is defined for a class of reasoning problems in terms of equality between the set of intended models and the set of preferred models.
set A and those of SCD (i.e.
all of the scheduled actions have been performed successfully), and all formulae in SCD U OBS are true in (M, R) having 0 as object domain.
Then,  is the set of intended models of Y.
2.5 Taxonomy of Reasoning Problems One of the characteristics of Sandewall's systematic approach is the use of taxonomy of reasoning problems.
The taxonomy is obtained by making explicitly ontological assumptions about actions and world and epistemological assumptions about knowledge about the actions and the world to be reasoned with.
For example, the ontological characteristic I represents that inertia holds; A represents "alternative results", i.e.
the effects of an action are conditional on the starting state; C represents that concurrent actions are allowed; D represents dependencies between features, i.e.
change in one feature implies possibility of immediate change in another feature; and so on.
The classical frame problem is then denoted as IA, and the ramification problem is in the IAD ontological family.
In addition, for a more precise specification, he provides sub-characteristics which are additional constraints within characteristics and which are written with small letters.
For example, Is represents the subfamily of I where all actions take a single time step; An denotes the subfamily of A where all features which are allowed to be influenced as result of an action in a given state should change their value if the action is performed in that state: if a feature with three possible values red, yellow, green is influenced by an action, then the action is allowed to nondeterministically change the value from red to yellow or red to green, but it is not allowed to choose between switching from red to green or keeping it red; and so on.
All of the sub-characteristics can be defined precisely in terms of the trajectory semantics.
In order to characterize the epistemological assumptions, a list of epistemological characteristics is provided.
For example, K: denotes complete and correct knowledge about actions.
K p represents that in addition there are no observations about any time point after the initial one.
Therefore Icp denotes pure prediction problem.
The ontological and the epistemological descriptors are then combined and characterize a class of sys-  2.6  PCM and PCMF  The entailment criteria PCM has been formalized by Sandewall as follows.
Let 1 = ( M ,R) be an interpretation, then the breakset of I at time t is defined as a set of features which change value from time t - 1 to t; formally  breakset(I,t) = {fil R(fi,t - 1) # R(f;,t ) } .
Definition [San941 Let I = ( M , R ) and I' = (W,RI) be interpretations, then I is said to be PCMpreferred over I/,written as I <<pcm I f , iff M = MI and there is some time point t such that 0  R ( f ,t ) = R'(f, t ) for all features f in v and for all time points t < t , and breakset(1,t) c brealcset(I',t).
Sandewall has shown that PCM guarantees only intended models for reasoning problems within the class Xp-IsAn described above.
However, the applicability can be improved by combining PCM with the entailment technique filtering into the new criterion PCMF.
The idea with filtering [San891 is to separate the premises in the sets SCD and OBS.
Let denote the set of classical models for the set I?, then the set of PCM-minimal models is  Min((<,,,,  I[n(SCD) U OBS]).
The PCMF-minimal models set is instead M~+Z,,,,  pwD)n)  n  wn,  so that the PCM-minimization is performed before the observations.
PCMF is correct for a larger class IC-IsAn of reasoning problems, i.e.
the restriction that only initial observations are allowed, is now removed.
For the detailed discussion and the full proofs, please refer to [San94].
3  Concurrency in the Trajectory Semantics  In Sandewall [San941 the trajectory semantics was defined with the restriction that only sequential actions are allowed, i.e.
at most one action is considered  tems or reasoning problems.
For example, the combi-  8  at a time.
However, in dealing with concurrent actions new problems arise which were not there for sequential actions.
Concurrent actions imply that at least two actions are involved at a given time, and, consequently, that interactions may arise between them.
Therefore, the semantics must be modified.
3.1 Concurrent Interactions In a broad sense, concurrent actions may be interacting or noninteracting, and, if they interact, they may interact interferingly or noninterferingly.
Given two or more actions, one cannot say unconditionally whether they interact or not, and if they do, whether they interfere or not.
The behaviour of individual actions in these respects is dependent on their start states and the trajectories chosen for them.
The set of features influenced by executing an action in a state may be different if the action occurs in another state.
What it means is that any two overlapping actions E1 and E2 which influence no feature in common if they start in state r1 and r2 respectively, i.e.
reasoned about effectively.
What is missing in this function is to represent such conditions for every trajectory U E Traj s ( E ,r).
Definition Let E be an action and T a state, then each trajectory 2r E Trajs(E,r) is defined now as a pair ((r~,...,ri),(r~,...,r~))  of finite sequences of partial states where  is a trajectory description and is our "old" trajectory, and (ry,.. .
,r!)
is trajectory preserving condition.
If the action E is started at time point s, each ry (1 5 i 5 k) in the trajectory preserving condition specifies conditions to hold at time point s + i in order for the action E to proceed as described by ( r i ,.
.
.
,r i ) .
The trajectory description will be written as d, and the trajectory preserving condition as pc.
The trajectory preserving condition is a generalization of the prevail condition of Sandewall & Rnnquist [SR86] in that both two refer to conditions that should hold during an action performance.
The difference is that their prevail condition only represents conditions that should hold during the whole duration of an action, while the trajectory preserving condition can freely refer to conditions not solely for the whole duration but also for some parts of it, or even for a time point.
Infl(E1,rl)n 1nfl(E2,rz)= 0 , can easily show different effects if performed in different states, e.g.
such that  InfI ( & , r1) n Inf l(E2,r3) # 0.
For another example, let  {v1,v2} E. Trajs(E1,r;) (213,214) C Trajs(E2,rj).
3.3  Concurrent Interactions in terms of  Inf 1 and p c In our formalism, concurrent interactions are considered at the level of concurrent trajectories, i.e.
the trajectories of concurrent actions.
Concurrent trac jectories can interact in two ways, namely, by influencing some feature in common, or by influencing a feature which appears in the preserving condition of the other trajectory.
The formal definition follows.
For the forthcoming discussion, we introduce some notations first.
For a given trajectory  Then it may be the case that the trajectory 211 interacts with 213, and, also with 214 but differently than with 213, while there is no interaction between v2 and 9J4.
However, ils will be discussed when we define concurrent interactions formally, the interactions are relative to the start time points of actions as well.
3.2 Trajectory Preserving Condition As mentioned in our previous discussion, the function Trajs(E,r) captures the set of possible trajectories of the action E w.r.t.
its starting state r. In the case of sequential actions, it was enough to say merely that there are several ways for a given action to go.
In discussing about concurrent actions, one also needs to know the conditions under which each trajectory proceeds as such, since, unless these conditions are available, interactions between trajectories of concurrent actions cannot be represented and  d(IC) and pc(IC) shall be the k:th (1 5 IC 5 m) element of the trajectory description d and that of the trajectory preserving condition pc, respectively.
Similarly, d(f,k) and pc(f,k) will be used to express the value of a feature f defined in d(k) respectively p c ( k ) .
Let v = (d,pc), then Zength(v) shall be the length of time  9  period over which the trajectory v proceeds, i.e.
m. In addition, by 3 ( r ) we denote the set of features which are defined in a given state r .
Definition Given two arbitrary actions of the form Csl ,tilE1 and Cs2, t 2 l E2 such that m a z ( s ~s2) , < min(tl,ts), i.e.
they are concurrent actions, let R be an arbitrary history defined over [O,sl where s 2 m a z ( s l , s 2 ) , and, for 1 5 i 5 2, let R(s;)= r,, let U ; = (d;,pcz) be a member of Trajs(E,,r,) of length t, - s,, let x, = muz(s1,sz) - sa + 1 and yz = min(t1,t2)-s,, i.e.
z, and yz are intended to represent the first respectively the last moment at which U, might interact with the other trajectory.
Then v1 and 212 are said to 0  Inf 1-interact iff  e  pc-interact iff  Figure 1: A cart in front of the curb.
time points satisfying x1 5 tl 5 y1, 2 2 5 k2 5 y2 and SI kl = s2 k2.
Then the trajectories 211 and u2 are said to  +  +  e Inf 1-interfere iff  they Inf 1-interact through some feature f and dl (f,k1) # d2 (f,k2) for some k1 and k2;  pc-interfere iff  Notice that Inf l(E1,T I ) and Inf l(Ez,r2) represent the set of features defined in the elements of dl respectively d2, and that the interactions in the above definition are relative to the choice of s1 and s 2 .
Additionally, let  they pc-interact through some feature f and  (dl(f, k)# pc2(f, k2) v &(f,h ) # pc1 (f,h))for some ICl and Az.
fl E Infl(El,rl)n Infl(Ez,r2), f2 E (Infl(E1, TI) n F ( p c ~ ( k 2 ) ) )U  In addition, independent actions are defined trivially such that they neither Infl-interact nor pcinteract.
n F(pc1(k1))).
(1nfV2,r2)  Then, for any f1 and f2, VI and 212 are said to Inf 1interact through fl and p i n t e r a c t through f 2 , respectively.
Therefore, concurrent trajectories may Inf 1-,or pc-interact, or both of the two.
Based on these concepts, we can go on and identify clearly interferences too.
Inf 1-interacting trajectories interfere iff they assign at some overlapping time point different values to some feature through which they Inf 1-interact.
And the pc-interacting interfere iff one trajectory assigns at some overlapping time point a different value from the trajectory preserving condition of the other to some feature through which they pc-interact.
The precise definition is as follows.
As an example, consider a situation shown in Figure 1 where a cart is standing in front of the curb, and we want to move it over the curb.
In order to do that, you should first press down the handle while the front wheels go over the curb and then lift the handle while the back wheels go over.
The vertical position of the front wheels and the back wheels is represented in relation to the curb by the features VpF repectively VpB which have as their value domain  Definition Let the same assumptions be given as in the previous definition, and let A1 and IC2 be any  Therefore, the wheels may be on the ground, under or over the curb, or lifted higher than the curb so  3.4 An Example  { on, lifted}.
10  as to pass it freely.
Similarly, HpF and HpB whose value domain is  where Inf l(PC,r2) = { HpF, H p B }  {before, passed, elsew},  d2 = ({HpFGbefore,HpBlelsew}, { HpFPpassed, HpBGeZsew }, { Hp F &pass ed ,HpB before}), pc2 = ({ V p F 3 i f t e d } , { VpF+lifted},0).
state the horizontal position of the front and the back wheels in relation to the curb.
before means that the front or the back wheels are directly before the curb and ready to go over, passed they passed it, and elsew the wheels are elsewhere before the curb but not directly in front of it.
Let PH denote the action "press handle" whose intended effect is to lift the front wheels.
The action PC, "push cart", has the effect of moving the cart over the curb while its wheels are lifted.
By restricting to these actions and some states which would characterize the actions well, let us briefly consider about concurrent interactions in the trajectory semantics.
Let r1 be any state which satisfies TI Z I  According to the trajectory v2, pushing the cart in r2 would proceed as follows; if the front wheels continue to be held lifted over the curb over Cs 1, s 21 where s is start time of P C , i.e.
+ +  pc2 ( V p F , 1 ) = pc2 ( VpF, 2 ) = lzfted, then the cart rolls on back wheels so that the front wheels pass the curb at [s 21, i.e.
+  dz(HpF, 2 ) = passed,  { VpFGon, V p B A o n } ,  and the back wheels reach the curb at Es  and let  + 31, i.e.
I n f l ( P H , r l ) = { VpF}.
dz(HpB, 3) = before.
It means, pressing down the handle of the cart when the wheels are on the ground, can influence the vertical position of the front wheels.
Then consider a trajectory  Here, too, 212 is assumed to be the only member of Traj s ( P C , r 2 ) , Now, let r be the initial state  VI  { V p F A o n ,HpFGbefore, V p B A o n , HpBPelsew}  = (d1,wl) E Trajs(PH,rl)  pictured in Figure 1, and let 0 be initial time point.
In addition suppose that we press the handle of the cart over the interval [0,4] and push the cart concurrently over C1,41.
Since r satisfies the condition of r1, u1 E T r a j s ( P C , r ) .
Let u1 be chosen for [0,41 P H .
(We need to and will discuss in detail about choosing trajectories for given actions in next section.)
By starting the trajectory v1 from time 0, the front wheels are lifted at succeeding time point 1 , and this is the only change caused by vi at time 1; recall d l ( 1 ) = { VpFLlifted).
Therefore the state of the world is changed from r to 7-2 over CO, 11.
And so, let the trajectory 212 be selected for [1,41PC.
The concurrent trajectories V I and w2 interact, namely pcinteract through the feature VpF, but not interfere.
Actually, u1 enables w2 such that the trajectory preserving condition pc2, i.e.
pcz(1) and pc2(2), is satisfied by d l ( 2 ) and d l ( 3 ) .
where  dl = ({ VpFAlifted}, { VpF%fted}, { V p F 3 i f t e d } ,{ V p F % f t e d } ) PCl  = (0,0,0,@.
That is, a possible trajectory of the action PH initiated in r1 is that it proceeds over 4 time units and holds the front wheels lifted over the interval, i.e.
dl(VpF,l) =...=dl(VpF,4)=Zzfted.
No trajectory preserving condition is required.
Of course, T r a j s ( P H ,r l ) may also contain other trajectories.
For convenience, however, we assume that V I is its only member.
Next, suppose a state r2 such that  { VpF +lifted, HpF bef ore, V p B A on, HpB A elsew}.
4  Then, for the action PC we consider in a similar way a trajectory  Trajectory Semantics World and Ego  For dealing with concurrency in the trajectory semantics, the single-timestep ego-world game where  v2 = (d2,pcz) E T r a j s ( P C , r z )  11  Definition Let a development (B, M , R, A, C) be given where max(B) = n and R is defined over CO, n] .
Then a compatible-trajectories combination, written as c, for C is defined as any set of trajectories v, = (d,,pci) E Trajs(E,,R(si)) for some or all members (si,E,) of C which satisfy  the world advances time by exactly one time step at a time, is adopted.
It offers a clear and simple underlying semantics, and reduces the technical complexity.
Following Sandewall, trajectory semantics world and ego are defined as follows.
Formal definitions are given in [Yi95].
4.1 Trajectory Semantics World in a Single-timestep Ego-World Game As mentioned previously, the ego-world game is performed in terms of a finite development (B,M , R, A, C ) .
Let a world description (Trajs, Inf 1) be given, and let (23, M , R, A, C ) be a development given for a singletimestep game between a trajectory semantics world and a trajectory semantics ego where the "now" time, i.e.
maa:(B),is n, and the history R is defined over CO, nl .
Assume that the world takes over the control now, and that the world modifies the development into (B',M', R', A',C').
As we will see, the modification is made differently according to whether the current action set C is empty or not.
However, the following hold irrespective of it; B' = Bun+ 1 , i.e.
the now-time is increased by one time point, M E MI, and the restriction of R' to the period [O,n] equals R. If C = 0, then it means that no action is going on at time n. It's because all actions being processed have "died out", and because the ego has decided not to start any new action at this moment.
In this case, the world extends history such that R'(n+l) = R(n), and A' and C' are set to A and 0 respectively.
On the other hand, at n there may be an arbitrary number of actions to be considered, i.e.
C has an arbitrary number of members (sa, E;) where s; is start time of E; and si 5 n. Here, it's not sure whether all members of C can be performed concurrently.
For example, it may be that some actions are evoked at n but interfere with other actions which have been started previously.
When conflict arises between concurrent actions, one may choose to perform as many actions as possible, or break the game there, or abandon all interfering ones, or save earlier actions first, and so on.
However, rather than choose a specific "policy" among them, we leave our underlying semantics open and more general on the question, and simply find some combination of compatible actions containing some or all members of C. Actually, it's a combination of mutually compatible trajectories which are in accordance with the history R. There may be more than one such combination.
The precise definition follows.
length(vi) > n - si, if n 15  then d;(k)U p c ; ( k ) R(si + k) for all L 5 n - si, i.e.
U; agrees with the previous  > s;,  history,  vi interferes in no way with any other member of c and the trajectory preserving condition pc; is satisfied by other trajectories in c or by applying inertia.
o Let c be a compatible-trajectories combination selected by the world.
Then the world extends the history as follows.
R'(n + 1) = R(n) CB  U  d;(n - S;  + 1)  (de ,pcz)Ec  where is Sandewall's "override" operation over states such that the value of a feature f in [T @ T ' ] equals that in state T' if f is defined there, otherwise that in state r. Using this CB operation inertia is interwoven into the semantics.
Notice that, since the trajectories in c do not interfere, the partial states at time n 1, d,(n - s, l), which are obtained from the trajectories, can be "put together" into a union without causing any conflict.
On the other hand, the trajectory preserving conditions at that time point, pc,(n - s, l),do not participate in the history extension.
They are expected to be satisfied by other trajectories d j ( n - sI + 1) or inertia.
For some trajectory {d,,pc,) E c, if d,(n - sI 1) is the last element of d3, then it means that the trajectory vI has been performed successfully and is terminated at n + 1.
Therefore C' is obtained by first making a set of corresponding tuples (s,, Ei) for each member v 2 of c and then removing from the set all of the "terminated" members ( s j , E j ) .
On the other hand, tuples of the form ( s j , Ej, n 1) are added to the past action set A for the completed actions Ej, and A' is set to the resulting set.
+  +  +  +  +  12  4.2 Trajectory Semantics Ego In the game it is the ego that activates one or more actions in its turn.
Let a development (B,M , R , A, C ) be given where "(8) = n, then for each action Ei  [Geo86] Michael P. Georgeff.
The representation of events in multigent domains.
In AAAI, pages 70-75, 1986.
[KS86] Robert Kowalski and Marek Sergot.
A logicbased calculus of events.
New Generation Computing, 4:67-95, 1986.  which is started by the ego at time n, a corresponding tuple (TI,&) shall be added to the C component.
If the ego passes on the control to the world without evoking any new actions, then no change is made for C. This definition does not need to be restricted to the single-timestep games.
5  [LanSO] Amy L. Lansky.
Localised representation and planning.
In J. Allen, J. Hendler, and A. Tate, editors, Readings in Planning, pages 670-674.
Morgan Kaufmann, 1990.
Reapplying PCM and PCMF to  [Pel911 Richard N. Pelavin.
Planning with simultaneous actions and external events.
In J. F. Allen, H. A. Kautz, R. N. Pelavin, and J. D. Tenenberg, editors, Reasoning about Plans, pages 127-211.
Morgan Kaufmann, 1991.
Concurrent Actions As a subset of concurrent actions, we have defined into Sandewall's taxonomy the class Ci where all trajectories of concurrent actions are mutually independent.
Then we have introduced Ci into the classes ICp-IsAn and IC-IsAn and extended them to Kp-IsAnCi respectively IC-IsAnCi.
By generalizing Sandewall's proofs of the correctness of PCM for Kp-IsAn and PCMF for IC-IsAn, we have proven that PCM and PCMF are still correct for the new classes Kp-IsAnCi and IC-IsAnCi, respectively.
For want of space, the full proofs and details are reserved in Pi951.
6  [San891 Erik Sandewall.
Filter preferential entailment for the logic of action in almost continuous worlds.
In IJCAI, 1989.
[San931 Erik Sandewall.
The range of applicability of nonmonotonic logics for the inertia problem.
In IJCAI, 1993.
[San941 Erik Sandewall.
Features and Fluents, A  Sgstematic Approach t o the Representation of Knowledge about Dgnamical Systems.
Ox-  Conclusion and Future work  ford University Press, 1994.
This work gives a base for analyzing the range of applicability of logics for concurrency.
The result of our work implies that Sandewall's systematic approach can easily be extended to concurrency, and that most of the results shown by him for the case of sequential actions may be reobtained similarly for concurrent actions as well after necessary modifications.
Considering the necessity of concurrent actions in common sense reasoning, and also, the importance of identifying the applicability of a given logic, it is urgently required to extend such assessment for concurrent actions.
In addition, we need to lift the restriction of independent actions in next step, so that even interdependent actions are considered when assessing applicabilities.
[Sho88] Y .
Shoham.
Reasoning about Change: Time and Causation from the Standpoint of Art$cia1 Intelligence.
MIT Press, Massachusetts, 1988.
[SR86] Erik Sandewall and Ralph Ronnquist.
A representation of action structures.
In AAAI, pages 89-97, 1986.
[Yi95] Choong-Ho Yi.
Reasoning about concurrent actions in the trajectory semantics.
Licentiate Thesis, 1995.
Department of Computer and Information Science, Linkijping University.
References [A11911 James F. Allen.
Temporal reasoning and planning.
In J. F. Allen, H. A. Kautz, R. N. Pelavin, and J. D.Tenenberg, editors, Reasoning about Plans, pages 1-68.
Morgan Kaufmann, 1991.
13