Conditional and Composite Temporal Constraints with Preferences Malek Mouhoub and Amrudee Sukpan University of Regina, Dept of Computer Science Wascana Parkway, Regina, Canada S4S 0A2 {sukpan1a,mouhoubm}@cs.uregina.ca Abstract Preferences in temporal problems are common but significant in many real world applications.
In this paper, we extend our temporal reasoning framework, managing numeric and symbolic information, in order to handle preferences.
Unlike the existing models managing single temporal preferences, ours supports four types of preferences, namely : numeric and symbolic temporal preferences, composite preferences and conditional preferences.
This offers more expressive power in representing a wide variety of temporal constraint problems.
The preferences are considered here as a set of soft constraints using a c-semiring structure with combination and projection operators.
Solving temporal constraint problems with preferences consists of finding a solution satisfying all the temporal constraints while optimizing the preference values.
This is handled by a variant of the branch and bound algorithm, we propose in this paper, and where constraint propagation is used to improve the time efficiency.
Preliminary tests, we conducted on randomly generated temporal constraint problems with preferences, favor the forward checking principle as a constraint propagation strategy.
1 Introduction Temporal preferences play an important role in many real world applications.
In general, they express non crisp desire of start/end times, time intervals and temporal relations of feasible scenarios.
Obviously, preferences are not hard constraints that have to be fully satisfied, but have an effect on choosing a good or the best scenario satisfying all the hard constraints.
Moreover, often temporal preferences are implicit.
In order to deal with temporal preferences such as early, late, about 6 pm, etc., we need to transform each of them into a formal explicit preference function.
Furthermore, these preference functions are often combined with other forms of preferences in order to have a global preference for a given temporal scenario.
In [17] we have proposed a modeling framework that allows the management of numeric and symbolic time information within a unique constraint network.
In addition, this model enables the addition of temporal information dynamically to the problem to solve, during the resolution process, via composite variables and activity constraints.
Composite variables are variables whose possible values are temporal events1 .
In other words this allows us to represent disjunctive temporal events.
An activity constraint has the followcondition - Y where X1 , .
.
.
, Xp and Y ing form X1 [?]
.
.
.
Xp are temporal variables (composite or events).
This activity constraint will activate Y (Y will be added to the problem to solve) if X1 [?]
.
.
.
Xp are active (currently present in the problem to solve) and condition holds between these variables.
We call Conditional and Composite Temporal Constraint Satisfaction Problem (CCTCSP) this model we have proposed.
In this paper, the CCTCSP is extended to include four types of temporal preferences: numeric, symbolic, composite and conditional preferences.
We call this model CCTCSP with Preferences (or CCTCSPP).
Numeric and symbolic temporal preferences associate degrees of preferences respectively to time intervals and symbolic relations, in order to favor some temporal decisions.
A composite preference is a higher level of preference among the temporal choices of a composite variable.
Conditional preferences allow some preference functions (numeric, symbolic or composite) to be added dynamically to the problem (associated to a given event or composite variable), during the resolution process, if a given condition on some temporal variables is true.
Solving a CCTCSP is a decision problem which consists of finding an assignment of time intervals to the temporal events such that all the constraints are satisfied.
This can be handled by approximation methods based on stochastic local search or by a systematic backtrack search algorithm where constraint propagation is used to prevent earlier later failure [19, 18].
On the other hand, solving a CCTCSPP is an optimization prob1 An  event is defined here as a preposition that holds over a time inter-  val.
Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE  lem which consists of finding the best solution according to the preference values.
This can be done by a variant of the branch a bound algorithm we propose in this paper.
Note that constraint propagation is also used here to prune some inconsistent values at the early stage of the resolution process.
Preliminary tests, we conducted on randomly generated temporal constraint problems with preferences, favor the forward checking principle as a constraint propagation strategy.
In the next section we will introduce the CCTCSP model and its related solving techniques.
In section 3 we will summarize the related work in the area of temporal preferences.
Section 4 is then dedicated to numeric, symbolic, composite and conditional preferences.
In Section 5 we present the branch and bound algorithm for solving CCTCSPPs.
Section 6 is dedicated to the preliminary experimental tests we conducted on randomly generated CCTCSPPs.
Conclusion and perspectives are finally listed in Section 7.
2 Managing Conditional Constraints and Composite Variables In the following, we will define the CCTCSP model and its corresponding constraint network (graph representation) through an example.
Definition 1 : Conditional and Composite Temporal Constraint Satisfaction Problem (CCTCSP) A Conditional and Composite Temporal Constraint Satisfaction Problem (CCTCSP) is a tuple fiE, DE , X, DX , IV, C, Act, where E={e1 , .
.
.
en } is a finite set of temporal variables that we call events.
Events have a uniform reified representation made up of a proposition and its temporal qualification : Evt = OCCU R(p, I) defined by Allen [1] and denoting the fact that the proposition p occurred over the interval I.
For the sake of notation simplicity, an event is used in this paper to denote its temporal qualification.
DE = {De1 , .
.
.
Den } is the set of domains of the events.
Each domain Dei is the finite and discrete set of numeric time intervals the event ei can take.
Dei is expressed by the fourfold [begintimeei , endtimeei , durationei , stepei ] where begintimeei and endtimeei are respectively the earliest start time and the latest end time of the corresponding event, durationei is the duration of the event and stepei defines the distance (number of time units) between the starting time of two adjacent intervals within the event domain.
The  discretization step stepei allows us to handle temporal information with different granularities.
X= {x1 , .
.
.
xm } is the finite set of composite variables.
DX ={Dx1 , .
.
.
Dxm } is the set of domains of the composite variables.
Each domain Dxi is the set of possible events the composite variable xi can take.
IV is the set of initial variables.
An initial variable can  be a composite variable or an event.
IV [?]
E X.
C = {C1 , .
.
.
Cp } is the set of compatibility constraints.
Each compatibility constraint is a qualitative temporal relation between two variables in case the two variables are events, or a set of qualitative relations if at least one of the two variables involved is composite.
A qualitative temporal relation is a disjunction of Allen primitives [1].
Act is the set of activity constraints.
Each activity constraint has the following form : condition - Y where X1 , .
.
.
, Xp X1 [?]
.
.
.
Xp and Y are temporal variables (composite or events).
This activity constraint will activate Y if X1 , .
.
.
, Xp are active and condition holds on these variables.
condition can be, for example, the assignment of particular values to the variables X1 , .
.
.
, Xp .
John_Pick_Lisa (JPL) [0,35,15,1]  IEEE  BM  BM Mike  John_Lisa  John_Lisa_Store  [15,40,20,1]  [30,50,15,1]  [15,59,30,1]  BM  BM  BM  Watch_Movie Movie1 [30,120,90,1]  Movie2  Movie3  [45,130,85,1]  [55,140,85,1]  Watch_Movie = Movie1 B  Watch_Movie = Movie2 B  Pizza_Place1  Pizza_Place2  [130,160,30,1]  [140,170,30,1]  Figure 1.
CCTCSP representing Example 1.
Let us illustrate the CCTCSP through the following example.
Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  JPL=(0 15) v .. v JPL=(14 29)  JPL=(15 30) v .. v JPL=(20 35)  Example 1.
John, Mike and Lisa are going to see a movie on Friday.
John will pick Lisa up and Mike will meet them at the theater.
If John arrives at Lisa's before 7:30, then they will stop at a convenient store to get some snacks and pops.
It will take them 30 minutes to reach the theater if they stop at the store and 15 minutes otherwise.
There are three different shows playing: movie1 , movie2 and movie3 .
If they finish the movie by 9:15, they will stop at a Pizza place 10 minutes after the end of the movie and will stay there for 30 minutes.
John leaves home between 7:00 and 7:20.
Lisa lives far from John (15 minutes driving).
Mike leaves home between 7:15 and 7:20 and it takes him 20 minutes to go to the theater.
movie1 , movie2 and movie3 start at 7:30, 7:45 and 7:55 and finish at 9:00, 9:10 and 9:20 respectively.
The goal here is to check if this story is consistent (has a feasible scenario).
The story can be represented by the CCTCSP in figure 1.
Each event domain is represented by the fourfold [begintime , endtime , duration , step].
In the case of John P ick Lisa, the domain is [0, 35, 15, 1] where 0 (the time origin corresponding to 7:00) is the earliest start time, 35 is the latest end time, 15 is the duration, and 1 (corresponding to 1 min) is the discretization step.
For the sake of simplicity all the events in this story have the same step.
Arcs represent either a compatibility constraint or an activity constraint (case of arcs with diamond) between variables.
The compatibility constraint is denoted by one or more qualitative relations (in case it involves at least one composite variable).
The activity constraint shows the condition to be satisfied and the qualitative relation between the two variables in case the condition is true.
Each qualitative relation is a disjunction of some Allen primitives [1].
For example, the relation BM between John P ick Lisa and John Lisa denotes the disjunction Bef ore [?]
M eets.
In [19, 18] we have proposed two methods for solving CCTCSPs.
These two methods are respectively based on constraint propagation and stochastic local search.
The goal of the constraint propagation method is to overcome, in practice, the difficulty due to the exponential search space of the possible TCSPs generated by the CCTCSP to solve and also the search space we consider when solving each TCSP.
Indeed, a CCTCSP represents DM possible TCSPs where D is the domain size of the composite variables and M the number of composite variables.
In the same way as reported in [15, 10], we use constraint propagation in order to detect earlier later failure.
This will allow us to discard at the early stage any subset containing conflicting variables.
The method based on constraint propagation is an exact technique that guarantees a complete solution.
The method suffers however from its exponential time cost as shown in [19, 18].
In many real-life applications where the execution time is an issue, an alternative will be to trade the execu-  tion time for the quality of the solution returned (number of solved constraints).
This can be done by applying approximation methods such as local search and where the quality of the solution returned is proportional to the running time.
In [19, 18] we studied the applicability of a local search technique based on the Min-Conflict-Random-Walk (MCRW) [22] algorithm for solving CCTCSPs.
MCRW has already been applied to solve TCSPs [16].
Basically, the method consists of starting from a complete assignment of temporal intervals to events and iterates by improving at each step the quality of the assignment (number of solved constraints) until a complete solution is found or a maximum number of iterations is reached.
Experimental study we conducted, in [19, 18], on randomly generated CCTCSPs demonstrates the efficiency of our exact method based on constraint propagation in the case of middle constrained and over constrained problems while the SLS based method is the technique of choice for under constrained problems and also in case we want to trade search time for the quality of the solution returned (number of solved constraints).
3 Related work Managing preferences has been extensively studied in the past decade.
The CP-net framework [7, 8, 2] is a model for qualitative and conditional preferences under ceteris paribus.
Preferences are represented separately from hard constraints.
Lexicographically ordered CSP in [12] is an another alternative framework for preferred variables and values.
In this latter model, variable selection is the primary factor while value assignment is secondary.
Recently, this framework has been extended to Conditional lexicographic CSP [28] for conditional preferences.
Finally, quantitative preferences are modeled as a set of soft constraints in [4, 5, 21] supporting different kinds of soft constraints including fuzzy CSPs, weighted CSPs and partial CSPs.
These latter frameworks based on semiring structure have been widely used for quantitative preferences in CSPs [4, 5].
A semiring is a tuple fiA, +, x, 0, 1 such that : * A is a set and 0, 1 [?]
A; * +, called the additive operation, is a commutative and associative operation such that 0 is its unit element; * x, called the multiplicative operation, is an associative operation such that 1 is its unit element and 0 is its absorbing element.
x distributes over +.
The set of the semiring specifies the values to be associated with each tuple of values of the variable domain.
The two semiring operations (+ and x) represent constraint projection and combination respectively.
A semiring for handling constraints is called c-semiring.
A c-semiring is a  Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE  semiring with additional properties on the two operations such that + is idempotent, x is commutative, and 1 is the absorbing element of +.
A partial order relation <= is defined over A to compare tuples of values and constraints.
In temporal constraint reasoning, quantitative preferences have been integrated into some existing temporal frameworks [1, 27, 11, 26].
[14] introduced the Simple Temporal Problem with Preferences (STPP).
In this latter model, a preference on an interval I is a function with codomain A (the c-semiring).
In [24] the Disjunctive Temporal Problem (DTP) is extended with preferences using SAT techniques.
The Temporal Constraint Network (TCN) [11] is integrated with the addition of a mechanism for specifying preferences, based on the soft constraint formalism [6].
In this new model called Temporal Constraint Satisfaction Problem with Preferences (TCSPP), a soft temporal constraint is represented by a pair consisting of a set of disjoint intervals and a preference function: fiI = {[a1 , b1 ] , .
.
.
, [an , bn ]} , f  where f is defined from I to the c-semiring A.
Each feasible solution has a global preference value, obtained by combining the local preference values found.
x is idempotent and also restricts a total order on the elements of A.
The c-semiring operations: +: a+b = max(a, b) and x: axb = min(a, b) allow complete solutions to be evaluated in terms of the preference values assigned locally.
The optimal solutions to a TCSPP are those solutions which have the best global preference values by the ordering of the values in the c-semiring.
Finally, in [3] the thirteen basic Allen's relations are assigned with a preference degree, belonging to the interval [0, 1] called IAf uz .
IAf uz is closed under Inverse, Conjunctive Combination and Composition.
IAf uz is defined on the set : I = (r1[a1 ] , r2[a2 ] .
.
.
, r13[a13 ] ) where ai [?]
[0, 1] , ri [?]
R, i = 1, .
.
.
, 13.
If ai is 0, then ri is an inconsistent relation.
4 Numeric, Symbolic, Composite and Conditional Temporal Preferences In the following we will define the four types of preferences using the c-semiring structure fiA, +, x, 0, 1 for quantitative preferences [4, 5].
Each type of preference is illustrated through the following example (additional information to example 1).
Example 2.
Lisa prefers John to pick her up early.
They prefer to arrive at the theater before the movie starts to get good seats.
Lisa prefers to watch movie1 to movie2 and movie3 .
Whereas, Mike prefers movie3 to movie2 and movie1 .
Whoever gets there first will pick the movie that he/she likes.
4.1  Numeric and Symbolic Preferences  Since the CCTCSPP supports hybrid temporal problems, preference values can be imposed on both numeric and symbolic temporal constraints.
Thus, we define two types of soft temporal constraints over the c-semiring : Soft Numeric Temporal Constraint (SNTC) and Soft Symbolic Temporal Constraint (SSTC).
Definition 2 : straint (SNTC)  Soft  IEEE  Temporal  Con-  A Soft Numeric Temporal Constraint (SNTC) is a function fn:ei : Dei - A, where ei is a temporal event and Dei its domain of values (time intervals).
In example 2, the SNTC corresponding to "Lisa prefers John to pick her up early" is the function fn:John P ick Lisa defined as follows.
fn:John P ick Lisa ((0 15))=1.0, fn:John P ick Lisa ((1 16))=0.95, .
.
., fn:John P ick Lisa ((20 35))=0.05.
Definition 3 : straint (SSTC)  Soft  Symbolic  Temporal  Con-  A Soft Symbolic Temporal Constraint (SSTC) is a function fs:cij : Rcij - A, where cij is the symbolic temporal relation between ei and ej and Rcij is the set of Allen primitives within cij .
In example 2, the symbolic preference "They prefer to arrive at the theater before the movie starts to get good seats" favors the Allen relation before.
Thus, fs:cM ike,W atch M ovie (Bef ore) has a higher value than fs:CM ike,W atch M ovie (M eets).
Here, we set fs:cM ike,W atch M ovie (Bef ore) = 1.0 and fs:cM ike,W atch M ovie (M eets) = 0.6.
4.2  Composite and Conditional Preferences  A Composite Preference (CompP) is a function fc:x : Dx - A, where x is a composite variable and Dx its domain of values (events).
This function allows us to favor some events within the domain of a given composite variable.
The SNTC fn:x| e of an event e, selected during the backtrack search from the domain of a composite variable x, is recomputed from the composite preference of this latter variable as follows.
Definition 4 : Composite Preference (CompP) Given: a composite variable x,  Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  Numeric  its domainDx = {e1 , .
.
.
, ep }, a composite preference function fc:x , and the selected event ei , then: fn:x| ei (I) = fc:x (ei ) * fn:ei (bj ), where I is a possible time interval of ei .
4.3  A Conditional Preference (CP) allows a preference function (symbolic, numeric or composite) to be added dynamically to the CCTCSPP when a given condition on temporal events or composite variables is true.
The condition can be an assignment of particular values to variables.
Given a temporal event e (respectively a composite variable x) and a preference function f , a conditional preference has the following form : condition  -  In order to define the global preference of a solution to a CCTCSPP, two other types of preference, namely Associated Local Symbolic Preference (ALSP) and Consistent Binary Assignment Preference (CBAP), are introduced in the following.
If C is a symbolic temporal constraint between two events ei and ej then the ALSP of C,fas:C , can be deduced from the numeric preferences associated to ei s and ej s values domain.
Definition 6 : ence (ALSP)  Definition 5 : Conditional Preference (CP)  X1 [?]
.
.
.
X p  Global Preferences and Optimal Solution to the CCTCSPP  associate f to e (respectively to x)  where X1 , .
.
.
, Xp are temporal variables (composite or events).
Example 3.
The above conditional preference will associate f to e (respectively to x) if condition holds on these variables.
condition can be an assignment of particular values to the variables X1 , .
.
.
, Xp .
In our example 2, the conditional preference "Lisa prefers to watch movie1 to movie2 and movie3 .
Whereas, Mike prefers movie3 to movie2 and movie1 .
Whoever gets there first, will pick the movie that he/she likes."
can be formulated by the following two conditional preferences.
condition  1.
M ike [?]
(John Lisa [?]
John Lisa Store) - 1 assign the composite preference f1 to the composite variable W atch M ovie.
condition  - 2 2.
M ike [?]
(John Lisa [?]
John Lisa Store) assign the composite preference f2 to the composite variable W atch M ovie.
Associated Local Symbolic Prefer-  Given: cij a constraint between two events ei and ej , Rcij the set of Allen primitives composing cij , then: for each r [?]
Rcij such that IrJ for a given I [?]
D(ei ) and J [?]
D(ej ) fas:cij (r) = min(fn:ei (I), fn:ej (J)) where fn:ei and fn:ej are the SNTC respectively for the events ei and ej .
A solution to the CCTCSPP is an assignment of numeric intervals to all the temporal events of the problem such that all the compatible constraints are satisfied.
The global preference of a solution can be computed by performing the min operation on all the Consistent Binary Assignment Preferences.
Using the ALSP defined above, a Consistent Binary Assignment Preference (CBAP) is defined as follows.
Definition 7 : Consistent Binary Assignment Preference (CBAP) Given: two events ei and ej sharing a constraint cij , Rcij the set of Allen primitives composing cij , a CBAP fas:cij , and a consistent binary assignment [ei = I] r [ej = J] where : r [?]
Rcij , I [?]
Domain(ei ) and J [?]
Domain(ej ), ai = fn:ei (I), aj = fn:ej (J) and ar = fs:Cij (r) then: fas:cij (r) = min(ai , aj ) and CBAP (I, J) = min(fas:cij (r) , ar )  where : * condition1 is : M ike = I and (John Lisa = J or John Lisa Store = J) and end(I) <= end(J) * condition2 is : M ike = I and (John Lisa = J or John Lisa Store = J) and end(I) > end(J) * f1 = {movie3 = 0.9, movie1 = 0.6, movie2 = 0.6} * f2 = {movie1 = 0.9, movie2 = 0.6, movie3 = 0.6}  Example 4.
In our examples 1 and 2, let us assume that during the backtrack search we have made the following decisions (assignments) : * M ike = (15 35), John P ick Lisa = (0 15), and John Lisa Store = (15 45) Using the conditional preferences we have seen earlier in example 3, the preference function f1 will be assigned to W atch M ovie.
M ovie3 (denoted M3 in the following)  Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE  will then be the first value chosen for W atch M ovie.
The SNTC of M3 and the ALSP of M ike and M3 events with the relation B will be computed as follows : fn:W atch fn:W atch  M ovie| M3 (55 M ovie (M3 )  140) = * fn:M3 (55 140) = 0.9 * 1 = 0.9  fas:(M ike , M3 ) (B) = min(fn:M ike((15 35)) , fn:M3 (55 140)) = min(1, 0.9) = 0.9 The CBAP of the time intervals assigned to M ike and M3 will then be computed as follows.
CBAP ((15 35),(55 140)) =min(fas:(M ike , M3 ) (B), fs:(M ike , M3 ) (B)) = min(0.9, 1) = 0.9 Note that since there are no SNTCs defined for the events M ike and M3 , the corresponding functions have values 1 for all their elements.
The same can be said about the symbolic relation between M ike and M3 .
Definition 8 : Global Preference (GP) A Global Preference (GP) of a solution s = {I1 , I2 , .
.
.
, In } to a CCTCSPP is computed as follows.
Given : a set of consistent assignments ca = {(Ii , Ij ) such that i, j [?]
n and there is a constraint between ei and ej }, Then: GP (s) = min {CBAP (I, J) where (I, J) [?]
ca}  Definition 9 : Optimal Solution (Opt) An Optimal Solution (Opt) of a given CCTCSPP P is the solution having the highest global preference degree.
Given: a CCTCSP P and a set of solutions S = {s1 , .
.
.
, sn } then: Opt(P ) = max {GP (s1 ), .
.
.
, GP (sn )}  5 Solving CCTCSPPs Branch and Bound is a well known method for solving optimization problems.
In the case of CCTCSPPs this algorithm is applied to find the optimal solution as follows.
Step 1.
The method starts with an initial problem containing a list of initially activated temporal events and composite variables.
In order to ensure that domain values are considered according to their preference functions, all  the values within each domain are sorted in decreasing order of their SNTC or CompP values (depending whether they belong to event's or composite domains).
Similarly, Allen primitives are sorted within their symbolic relations in decreasing order of their SSTC values.
Arc consistency is then applied on the initial temporal events and composite variables in order to reduce some inconsistent values which will reduce the size of the search space.
If the temporal events are not consistent (in the case of an empty domain) then the method will stop.
The CCTCSPP is inconsistent in this case.
Step 2.
Following the forward check principle [13], pick an active variable v, assign a value to it and perform arc consistency between this variable and the non assigned active variables.
If one domain of the non assigned variables becomes empty then assign another value to v or backtrack to the previously assigned variable if there are no more values to assign to v. Activate any preference function (through conditional preference) and any variable v  (through activity constraint) resulting from this assignment and perform arc consistency between v  and all the active variables.
If arc inconsistency is detected then deactivate v  and choose another value for v (since the current assignment of v leads to an inconsistent CCTCSPP).
If v is a composite variable then assign an event to it.
Basically, this consists of replacing the composite variable with one event evt of its domain.
We then assign a value to evt and proceed as shown before except that we do not backtrack in case all values of evt are explored.
Instead, we will choose another event from the domain of the composite variable v or backtrack to the previously assigned variable if all values (events) of v have been explored.
This process will continue until all the variables are assigned in which case we obtain a solution to the CCTCSPP.
Since we are looking for the highest global preference degree, the GP value of this solution will be used as a lower bound (LB) of our branch and bound algorithm.
Note that anytime a preference function f is activated (added to the CCTCSPP) through a conditional preference, the domain of values of the variable associated to f is sorted according to this latter.
Step 3.
The rest of the search space is then systematically explored as follows.
Each time the current variable (event or composite) is assigned a value, an overestimation of the GP value of any possible solution following this decision is computed and used as an upper bound (U B).
If U B < LB then the current variable is assigned another value or backtrack to the previous variable if all the values have been explored.
The overestimated GP is the minimum of the CBAPs of all the assigned variables and the estimated CBAPs involving non assigned variables (including those that can be activated during the remaining search process).
Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE  An estimated CBAP involving a non assigned variable Xi is calculated as follows.
If the other variable Xj involved by the CBAP is an assigned variable then the estimated CBAP is the minimum of the following : * the SNTC of the value assigned to Xj , * the maximum of the SSTCs of all the Allen primitives within the symbolic relation between Xi and Xj , * and the maximum of the SNTCs of all the values belonging to Xi 's domain.
Figure 2.
Comparative tests on random CCTCSPPs.
Else (Xj is not assigned yet) : * the maximum of the SNTCs of all the values belonging to Xj 's and Xi 's domains, * and the minimum of the SSTCs of all the Allen primitives within the symbolic relation between Xi and Xj .
Full Look Ahead (FLA).
This strategy maintains a full arc consistency on the current and future active variables (variables not yet assigned).
FC+.
Same as FC except that the applicability of the arc consistency is extended to non active variables as well.
6 Experimentation  FLA+.
Same as FLA except that the applicability of the arc consistency is extended to non active variables as well.
In order to evaluate the method we propose, we have performed some preliminary experimental tests on randomly generated consistent CCTCSPPs.
The experiments are performed on a PC Pentium 4 computer under Linux system.
All the procedures are coded in C/C++.
Consistent CCTCSPPs are generated from consistent TCSPs.
A consistent TCSP of size N (N is the number of variables) has at least one complete numeric solution (set of N numeric intervals satisfying all the constraints of the problem).
Thus, to generate a consistent TCSP we first randomly generate a numeric solution (set of N numeric intervals), extract the symbolic Allen primitives that are consistent with the numeric solution and then randomly add other numeric and symbolic constraints to it.
After generating a consistent TCSP, some of the temporal events are randomly picked and grouped in subsets to form composite variables.
Each activity conVi =a Vj is generated by randomly choosing a pair straint Vi - of variables (Vi , Vj ) and a value a from the domain of Vi .
This activity constraint activates the variable Vj if Vi is activated and is assigned the value a.
The generated TCSPs are characterized by their tightness, which can be measured, as shown in [20], as the fraction of all possible pairs of values from the domain of two variables that are not allowed by the constraint.
While we mentioned in the previous Section that we use the forward check principle during search, we consider here other propagation strategies as well.
More precisely we compare the following four strategies.
Figure 2 presents the results of comparative tests performed on random CCTCSPPs where the total number of variables is 150 including 10 composite variables.
The domain sizes of composite variables and events (including those belonging to the composite variables domains) are respectively 5 and 30.
The number of activity constraints is 500.
In each test, the methods are executed on 100 instances and the average running time (in seconds) is taken.
The tightness of the TCSPs, from which the CCTCSPPs are generated, varies from 0.1 to 0.7.
The number of initial variables is equal to 80.
As we can easily see FC and FC+ outperform FLA and FLA+ in all cases.
FC and FC+ have similar running times.
Forward Check (FC).
This is the strategy we have described in the previous Section (in Step 2).
7 Conclusions In this paper we have proposed a unique framework managing preferences at different levels of the temporal constraint network and in a dynamic environment.
This framework is very appealing for a wide variety of real world applications such as reactive scheduling and planning, logistics and temporal databases.
The approach we adopted consists of converting a given temporal scenario involving numeric and symbolic time information into a hybrid temporal constraint network where conditional constraints and composite variables are used to add new information (variables and their related constraints) to the constraint network in a dynamic manner during the resolution process.
Preferences are associated to numeric, symbolic and conditional  Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE  constraints as well as composite variables, in order to favor some solutions to the temporal scenario.
Finding the best solution is carried out by a variant of the branch and bound algorithm we propose.
In order to evaluate the time performance of our solving method, we conducted preliminary tests comparing different propagation strategies on randomly generated CCTCSPPs.
The results favor the forward checking principle [13].
In the near future, we intend to conduct more experimental study on random temporal constraint problems as well as real life applications under time constraints.
Another perspective is to consider approximation methods such as Stochastic Local Search (SLS)[23], Genetic Algorithms (GAs)[9] and Ant Colony Algorithms (ACAs)[25].
While these techniques do not always guarantee an optimal solution to the problem, they are very efficient in time (comparing to branch and bound) and can thus be useful if we want to trade the optimality of the solution for the time performance.
References [1] J. Allen.
Maintaining knowledge about temporal intervals.
CACM, 26(11):832-843, 1983.
[2] K. R. Apt, F. Rossi, and K. B. Venable.
Cp-nets and nash equilibria, 2005.
[3] S. Badaloni and M. Giacomin.
A fuzzy extension of Allen's Interval Algebra.
In E. Lamma and P. Mello, editors, Proc.
of the 6th Congress of the Italian Assoc.
for Artificial Intelligence, pages 228-237, 1999.
[4] S. Bistarelli, U. Montanari, and F. Rossi.
Constraint solving over semirings.
In C. Mellish, editor, IJCAI'95: Proceedings International Joint Conference on Artificial Intelligence, Montreal, 1995.
[5] S. Bistarelli, U. Montanari, and F. Rossi.
Semiring-based constraint satisfaction and optimization.
Journal of the ACM, 44(2):201-236, 1997.
[6] S. Bistarelli, U. Montanari, and F. Rossi.
Semiring-based constraint satisfaction and optimization.
J. ACM, 44(2):201- 236, 1997.
[7] C. Boutilier, R. Brafman, H. Hoos, and D. Poole.
Reasoning with conditional ceteris paribus statements.
In Proc.
of the Fifteenth Annual Conference on Uncertainty in Artificial Intelligence UAI-99, pages 71-80, 1999.
[8] C. Boutilier, R. I. Brafman, C. Domshlak, H. H. Hoos, and D. Poole.
Preference-based constrained optimization with cp-nets.
Computational Intelligence, 20(2):137-157, 2004.
[9] B. Craenen and A. Eiben.
Comparing evolutionary algorithms on binary constraint satisfaction problems.
IEEE Transactions on Evolutionary Computation, 7(5):424-444, 2003.
[10] E. C. F. D. Sabin and R. J. Wallace.
Greater efficiency for conditional constraint satisfaction.
Proc., Ninth International Conference on Principles and Practice of, Constraint Programming - CP 2003, 2833:649-663, 2003.
[11] R. Dechter, I. Meiri, and J. Pearl.
Temporal Constraint Networks.
Artificial Intelligence, 49:61-95, 1991.
[12] E. Freuder, R. J. Wallace, and R. Heffernan.
Ordinal Constraint Satisfaction.
In Fifth Internal.
Workshop on Soft Constraints - SOFT'02, 2003.
[13] R. Haralick and G. Elliott.
Increasing tree search efficiency for Constraint Satisfaction Problems.
Artificial Intelligence, 14:263-313, 1980.
[14] L. Khatib, P. Morris, R. A. Morris, and F. Rossi.
Temporal constraint reasoning with preferences.
In IJCAI, pages 322- 327, 2001.
[15] S. Mittal and B. Falkenhainer.
Dynamic constraint satisfaction problems.
In Proceedings of the 8th National Conference on Artificial Intelligence, pages 25-32, Boston, MA, Aug. 1990.
AAAI Press.
[16] M. Mouhoub.
Reasoning with numeric and symbolic time information.
Artificial Intelligence Review, 21:25-56, 2004.
[17] M. Mouhoub and A. Sukpan.
Solving conditional and composite temporal constraints.
In the 16th IEEE International Conference on Tools with Artificial Intelligence (ICTAI'04), pages 734-741, Boca Raton, 2004.
[18] M. Mouhoub and A. Sukpan.
Constraint propagation versus local search for conditional and composite temporal constraints.
In Eleventh International Conference on Principles and Practice of Constraint Programming(CP 2005), Workshop on Constraint Propagation and Implementation, pages 63-78, Sitges, Barcelona, Spain, 2005.
[19] M. Mouhoub and A. Sukpan.
A new temporal csp framework handling composite variables and activity constraints.
In the 17th IEEE International Conference on Tools with Artificial Intelligence (ICTAI'05), pages 143-149, Hong Kong, 2005.
[20] D. Sabin and E. C. Freuder.
Contradicting conventional wisdom in constraint satisfaction.
In Proc.
11th ECAI, pages 125-129, Amsterdam, Holland, 1994.
[21] T. Schiex, H. Fargier, and G. Verfaillie.
Valued constraint satisfaction problems: Hard and easy problems.
In C. Mellish, editor, IJCAI'95: Proceedings International Joint Conference on Artificial Intelligence, Montreal, 1995.
[22] B. Selman and H. Kautz.
Domain-independent extensions to gsat: Solving large structured satisfiability problems.
In IJCAI-93, pages 290-295, 1993.
[23] B. Selman and H. A. Kautz.
An empirical study of greedy local search for satisfiability testing.
In AAAI'93, pages 46- 51, 1993.
[24] H. M. Sheini, B. Peintner, K. A. Sakallah, and M. E. Pollack.
On solving soft temporal constraints using SAT techniques.
In Proceedings of the Eleventh International Conference on Principles and Practice of Constraint Programming, pages 607-621, Sitges, Barcelona, Spain, 2005.
[25] T. Stutzle and H. Hoos.
"improvements on the ant system: Introducing the max-min ant system".
Artifcial Neural Networks and Genetic Algorithms, pages 245-249, 1998.
[26] P. van Beek.
Reasoning about qualitative temporal information.
Artificial Intelligence, 58:297-326, 1992.
[27] M. Vilain and H. Kautz.
Constraint propagation algorithms for temporal reasoning.
In AAAI'86, pages 377-382, Philadelphia, PA, 1986.
[28] R. J. Wallace.
Conditional lexicographic orders in constraint satisfaction problems.
In Eleventh International Conference on Principles and Practice of Constraint Programming (CP 2005), Sitges, Barcelona, Spain, 2005.
Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE