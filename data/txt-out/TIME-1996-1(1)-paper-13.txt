Networks of qualitative interval relations: combining circuit consistency and path consistency in the search for a solution A. Isli and H. Bennaceur Laboratoire d'Informatique de Paris-Nord CNRS URA 1507, Inst.
Galilke, Universit6 Paris-Nord Villetaneuse, F-93430, France is known that in such problems the relations {<, >} and {<, m, mi,>} are crucial; and none of the three subclasses contains them.
For instance, in scheduling expressing that two tasks I and J are disjunctive is extremely solicited (this is expressed by I{<, >} J or I{<, m ,m i , > } J ) .
Another solution is to design a general backtracking algorithm that deals with any problem, and eventually behaves well for all or part of real-life problems.
In this paper, we propose to combine circuit consistency and path consistency in such algorithms.
Instead of applying path consistency at every node of the search space, as does, for instance, Ladkin and Reinefeld's algorithm [Ladkin et al.
92, van Beek 921, our method applies path consistency only at nodes of level ( n- 1) x n/2 (where n is the number of variables of the input network), and circuit consistency in the remaining nodes of the search space.
Circuit consistency is less filtering than path consistency; however, it is one factor less expensive.
We provide experimental results comparing Ladkin and Reinefeld's algorithm (1) as provided by its authors, and (2) as we propose in the paper.
The paper is organized as follows.
Section 2 provides some background on qualitative interval networks.
Section 3 defines the concept of circuit consistency, while Section 4 presents an algorithm making a network circuit consistent.
The complexity analysis of circuit consistency is studied in Section 5.
Section 6 gives some background on existing backtracking search algorithms, while Section 7 explains how to combine circuit consistency and path consistency during the search in those algorithms.
Section 8 is devoted to experimental results.
Finally, Section 9 summarizes the paper.
Abstract W e first define the concept of circuit consistency for interval networks.
W e then provide an example showing that even for atomic networks circuit consistency is not complete.
Then we describe how to combine circuit consistency and path consistency in existing search algorithms.
Instead of applying pathconsistency at each node of the search tree, as do existing algorithms, the idea of our method is to apply path consistency only a t nodes of level ( n - l ) n / 2 , and circuit consistency in the remaining nodes of the search tree (n is the number of variables of the input network).
Circuit consistency filtering is potentially less effective than path consistency filtering; however circuit consistency is computationally one factor less expensive.
W e provide experiments showing the performances of the search in the two cases (a) when circuit consistency and path consistency are combined and (b) when only path consistency is used.
Area: Time and constraints.
Keywords: Interval algebra, Temporal constraint satisfaction, circuit consistency, path consistency, backtracking search.
1  Introduction  Reasoning in the interval algebra defined by Allen [Allen 831 is known to be NP-hard [Vilain et al.
861.
One solution is to restrict the expressiveness in such a way to obtain a subclass behaving "well" while still representing a large class of interesting problems; this solution makes a tradeoff between tractability and expressiveness.
Three such subclasses are known, which are the convex subclass (C), the pointizable subclass ( P ) and the ORD-Horn subclass (31);they are related by C c P c 3c.
All of them are subalgebras of the whole interval algebra (they are closed under composition, intersection and transposition), making networks expressed in either of them closed under path consistency, which solves the consistency problem in these cases.
Many existing systems based on Allen's algebra restricts the expressiveness to either of the above three subclasses; even to either of C and P .
There are however real-life problems for which neither of the subclasses gets use: diagnosis problems, scheduling problems and planning problems.
For instance, it  2  57 0-8186-7528/96 $5.00 0 1996 IEEE  Qualitative interval networks  Some background on qualitative interval networks is needed.
In [Allen 831, Allen defined what is known in the literature as the interval algebra (IA).
Temporal information is expressed in IA as relations on pairs of intervals; these relations will be referred to in the sequel as interval relations.
An atomic interval relation stands for one of the thirteen alternative, exclusive configurations a pair of intervals can stand in:  before (<), meets (m), overlaps ( o ) , starts (s), during (d), finishes (f); their respective converses after (>), met-by (mi), overlapped-by (oi), started-by (si), contains (di), finished-by (fi); equals (=), which is its proper converse.
For instance, interval I is during interval J is expressed as (I d J ) .
In turn, an interval relation is a disjunction of atomic interval relations; this is used to allow a pair of intervals to stand in one of many configurations.
The set representation of an interval relation ( I r l J ) V V ( I r , J ) ( n 5 13) is I { q , .
.
.
, r n } J .
For instance, erval I is before, overlaps or contains interval J is expressed by the disjunction ( I < J ) V ( I o J ) V ( I d i J ) ,the set representation of which is I { < , 0 , d i } J .
A qualitative interval network, P, consists of:  .." RI  /  I  i  n  e i  n  RI  1. a finite number of variables, say 11, .
.
.
, I, , ranging over the set { ( a , b ) E IR2 : a < b } of intervals, and  e  e n  1  Figure 1: Illustration of the concept of circuit consisR1 @ R2) tency: in each case, the condition ( R g holds.
2. interval relations on pairs of the variables, the constraints o f the network.
Given an n-variable interval network P, its graphical representation is defined as usual: the vertices are the variables of the network, and if a constraint Ii Rij Ij is specified on the pair ( I i ,I j ) of variables then the arc ( I i ,I . )
is created and labeled by R q .
On the other hand, the matrix representation consists of an n x nmatrix M p defined as follows:  Example 1 Consider the 6-variable interval network defined as follows: R23 = R.56 = O i l R15 = R35 = m, Rij = 0 , for all other  pair (i, j),i < j .
The variables are X I ,X 2 , .
.
.
, x6,' Rij stands for the > label on edge ( X i , X j ) ; the label on edge (Xi,Xj),i j , is not given explacately: at is equal to the converse (or transpose) of Rji: The network is carcuit consistent.
Indeed, it respects the definition of circuit consistency with respect to the ordering X I ,X z , .
.
.
, X6 of its variables.
However, the triangle ( X I ,X 3 , Xs),and hence the whole network, is not path inconsistent.
As a side remark, verifying whether an atomic interval network' as circuit consistent with respect to the ordering X I , .
.
.
, X , of variables is equivalent to veriXi),containfying whether all triangles, ( X i ,Xsucc(i), ing two consecutive edges are path consastent.
Vi,j = 1 .
.
.
n , if a constraint IiRijIj is specified on the pair (Ii , I j ) of variables then M p [ i ,j ] = Rij, otherwise M p [ i ,j] = Allen13 (where Allen13 is the universal interval relation: the set of all thirteen atomic interval relations).
A solution, or consistent instantiation, to P consists of an assignment (I1 = ( a l ,b l ) , .
.
.
, I , = (an,6,)) of values to the variables satisfying all the constraints in the network; i.e.
such that for all i , j = 1 .
.. n , if a constraint Ii R;jIj is specified on the pair (Ii , I j ) of variables then the interval relation ( a i , b i ) R ; j ( a j ,b j ) holds.
P is consistent if it contains a solution; it is minimal if any solution of any two-variable subnetwork extends to a global solution [Montanari 74, Mackworth 771; it is globally consistent if any solution of any subnetwork extends to a global solution [Freuder 821.
Global consistency is also called strong n-consistency.
3  e  Example 1clearly shows that circuit consistency is not complete for the consistency problem of interval networks: an interval network may be inconsistent even if it is circuit consistent.
The concept of circuit consistency  4  Bennaceur, in [Bennaceur 941, defined the concept of circuit consistency for discrete networks.
We define the concept for interval networks.
Achieving circuit consistency  Figure 2 presents an algorithm achieving circuit consistency for an n-variable interval network.
The algorithm makes use of the following notations, for i E { 1, * * .
, n } :  Definition 1 Let P be an n-variable interval network.
P is circuit consistent if there exists an ordering, say 11,. .
.
, I n , of the variables such that for all  pred(i) =  i - 1 if i > 1, n if i = 1.
'As it will be defined later, an interval network is atomic if for all i, j = 1 .
.
.n, the label R13 on edge ( X i ,X , ) is an atomic interval relation.
where ( j mod n ) stands for ( j modulo n ) , and 8 f o r composition of interval relations.
58  5  1.
Input : An n-variable interval network P .
2.
Output : The network P made circuit consistent with respect to the ordering I I , .
.
.
, I, of its variables.
Method : The algorithm makes use of a data structure Queue.
Initially, Queue contains those pairs (i, succ(i)) such that the constraint Rqsucc(q) is not the universal relation.
Then the algorithm proceeds by removing pairs ( i ,succ(i)) from Queue until Queue becomes empty.
For each pair ( i ,succ(i)) that it removes, the following points are performed:  6  Temp := R i ( s u c c ( j ) ) ;  Ri ( s u c c ( j := Ri ( s u c c ( j) )nRij 8R j ( s u c c ( j) ) ; Ri(succ(j))  c Temp{  R ( s u c c ( j ) ) i := t r a n s p o s e ( R i ( s u c c ( j ) ) ) ;  add the pair ( s u c c ( j ) succ(succ(j))) , to Queue;  1 j := succ(j);  1 3.
The whole algorithm : While (Queue is not empty){ remove a pair ( i ,succ(i)) from Queue;  1.
C contains all thirteen atomic relations, and is closed under path-consistency (i.e.
pathconsistency applied to a network expressed in C leads to a network expressed in C);  j := succ(i);  While ( j # pred[i]){  2. path-consistency detects inconsistency for networks expressed in C.  Temp := & ( s u c c ( j ) ) ;  n Rij 8 R j ( s u c c ( j ) ) ;  R i ( s u c c ( j ) ) := R i ( s u c c ( j ) )  If  &(succ(j))  R(,,,,(j  )i  Backtraking search: existing algorit hms  Given an interval network P , we define a refinement of P to be any network on the same set of variables in which every constraint is included in or equal to the corresponding constraint in P ; i.e.
for all constraint IR'J of the refinement, the corresponding constraint I R J of P is such that R' E R. A refinement is atomic (resp.
convex, pointizable, ORD-Horn) when all its constraints are atomic (resp.
convex, pointizable, ORD-Horn); i.e.
they are of the form I R J where R is an atomic (resp.
convex, pointizable, ORD-Horn) relation.
It is known that when a network contains only atomic labels on its edges the path-consistency method [Montanari 74, Mackworth 771 answers the consistency problem.
Vald6s-PCrez [ValdCs-PQez 871 used this result to design a backtracking search algorithm in the style of backjumping [Gaschnig 781 for the consistency problem of interval networks.
Another backtracking search algorithm for the consistency problem of general interval networks is the one of Ladkin and Reinefeld [Ladkin et al.
92, van Beek 921 which is based on a subclass C of the interval algebra verifying the following points:  j := succ(i); While ( j # pred[i]){  If  Complexity analysis  The data structure Queue used in the algorithm of Figure 2 contains at most n pairs ( i ,succ(i)) at a time.
A pair can be put into Queue at most thirteen times.
Moreover, for each removing of a pair (i, suec(i)) from Queue O(n) operations (compositions, intersections and transpositions) are performed (see the inner loop of the algorithm in Figure 2).
It follows that the computational complexity of the algorithm is O ( n 2 ) .
C may be the set of atomic relations or any of the convex, the pontizable or the ORD-Horn subclasses:  c Temp{  1. each of these three subclasses is a subalgebra of the whole interval algebra: it is closed under transposition, intersection and composition;  := transpose (Ri(,uc,(j ) ) ) ;  add the pair ( s u c c ( j ) succ(succ(j))) , to  2. the consistency problem of a network expressed  Queue;  in either of the subclasses is solved by the pathconsistency algorithm;  3. the ORD-Horn subclass is the unique greatest  j := succ(j);  subclass among the tractable subclasses that contain all thirteen atomic relations [Nebel et al.
941.
1  21f Rt(succ(J))C Temp then R*(succ(J)) has been success) ) t constrain refully modified, Implying that R ( s u C C ( 3may lations R ( s u c c ( j ) )tok modification; for this reason, the pair ( s u c c ( j ) ,s u c c ( s u c c ( j ) ) ) is added to Queue.
1 Figure 2: The circuit consistency algorithm.
59  Let n be the number of variables and 11,. .
.
, In the variables of an interval network.
The algorithm of Ladkin and Reinefeld defines an instantiation ordering, say  (11 1 2 ) , ( 1 1 , 1 3 ) , .
.
.
, (11,I n ) , .
.
.
1 J  (1~,~~+l),...,(~~,In),...,(I~-l,~n)'  of the edges and constructs in a depth-first manner the labeled tree described in Figure 3 until a consistent refinement is found or all the tree is constructed without finding such a refinement.
We then check whether the current node in the search tree is of level ( n - 1) x n / 2 .
If this is the case then the corresponding edge is the last in the instantiation ordering, and the algorithm calls the path-consistency procedure.
Otherwise, there are more than one edge yet not instantiated, and the algorithm calls the circuit consistency procedure.
Hence, all we need, in addition to the modification above, is to modify step 2d in Figure 3 in the following manner.
1. if P' is not the empty network: 1.
1. create the root of the tree, and label it by PC(P),'where P is the original network;  ii.
let l a b e l ( I ,J ) be the label on edge ( I , J ) in the network P';  ... decompose label(1,J) into  /*  111.
* the root is of level 1; *  if a node  nl  J ) be the 1th edge in the instantiation orderlet (1, ing;  is of level 1 then all node  * an immedite successor of n1 */  712  is of level 1  U  ct  which is  + 1;  of elements of C;  r=l  iv.
if  2. while there are nodes yet not marked:  (t < ( n - 1) x n / 2 ) then for all c,, i = 1 .
.
.
m{  (a) consider a node s yet not marked;  create an immediate successor for n, and  (b) let 1 be the level of s and P' its label;  label it by CC(P[ZabeZ(I, J )  1  (c) mark s; (d) i j t  #  (n- 1)x n/2 and  e= 1  +-  ct]);  .
.
.m{  create an immediate successor for n, and label it by PC(P[label(I, J) t cl]);  }  8  m  U  else for all c,, i = 1  P' is not the empty n e t ~ o r k : ~  i. let ( I , J ) be the t t h edge in the instantiation ordering; ii.
let label(1, J ) be the label on edge ( 1 , J ) in the network P'; iii.
decomposelabel(1, J ) into a union label(1, J ) =  Experiments  In this section, we provide experimental tests on the performances of Ladkin and Reinefeld's search algorithm in the following two cases: (1) the algorithm in which only path consistency is used during the search, and (2) the algorithm in which circuit consistency and path consistency are combined.
We compared the two algorithms on randomly generated problems.
We took into account the following three parameters:  c, of elements of C ;  .
iv.
for all c,, i = 1 .
.
m create an immediate successor for n, and label it by P C ( P ' [ Z a b e l ( l , J ) t ~ $ 1 ) ; ~  Figure 3: Ladkin and Reinefeld's algorithm  7  a union label(I,J) =  m  Combining circuit consistency and path consistency in search algorithms  1. the size of the problems, i.e.
the number of variables;  2. the density, i.e.
the fraction of the number of non universal constraints to n x ( n - 1)/2, where n is the number of variables;  Ladkin and Reinefeld's algorithm is modified in the following manner.
We first apply circuit consistency to the whole network; i.e.
we replace step 1 in Figure 3 by the following:  3. the tightness, i.e.
the fraction of forbidden atomic relations in the non universal constraints to 13.
1. create the root of the tree, and label it by CC(P ),5 where P is the original network;  We randomly generated a first list of problems according to the following values of the parameters:  3 P C ( P ) is the network obtained by applying path consistency to P .
41f 1 = ( n - 1) x n/2 and the label P of node s is not the empty network then P is a consistent refinement of the original network.
5 P ' [ l a b e l ( l , J ) e c , ] is the network obtained by substituting c2 to the label on edge (I,J ) of P'.
5 C C ( P )is the network obtained by applying circuit consistency to network P .
1.
8 5 size  5 15; 2.
0.7 5 density 5 0.9; and 3.
9/13 5 tightness 5 12/13.
Then a second list according to the following values of the parameters:  60  1.
8  < size 5 15;  not reported here, the algorithm with P C alone answers in a reasonable amount of time while the algorithm with CC and PC combined takes much more time, in some cases giving no answer.
This explains that, at least for the generated problems, the filtering power of PC is more important than the one of CC.
We believe however that the study of combining CC and PC during the search, not necessarily in the way presented in the paper, should be pursued.
An alternative may be the following:  2. density = 0.05; and 3. tightness = 1/13.
The comparison is based on the number of calls to the composition of two relations.
Composition is the main time consuming during the search.
We also computed the number of nodes of the search space effectively spanned.
The respective results are reported in the two tables below, where CC and PC stand for circuit consistency and path consistency, respectively.
nb of variables  PC alone nb of nodes I nb of calfs  I I  1. consider two integer values a and ,O such that 1 5 a < ,f3 5 n , where n is the number of variables of the input network;  CC and PC combined nb of nodes I nb of calls  2. then during the search if the level 1 of the current edge is such that ([ mod @) a apply CC otherwise apply PC;  <  3. finally, to make the algorithm complete, apply PC when instantiating the last edge.
9 nb of variables 9  PC alone  nb of nodes  I  -.
I  I  nb of calls  I  C C and PC combined nb of nodes I nb of calls  I  555  I  36  I  578  12  37 I 46 56 67  13  79  I 817 1083 1447 1885  14  92  2386  91  1873 2373  15  1 n5  xn.5  1 n.5  2947  10  11  I 45 55 66 78  Summary and future work  We extended the definition of circuit Consistency to qualitative interval networks.
We then showed how to modify Ladkin and Reinefeld's search algorithm in such a way to combine circuit consistency (CC) and path consistency (PC) during the search, instead of using only PC.
CC is less filtering than PC; however, it is one factor less expensive.
We presented experimental results comparing the performances of (1) Ladkin and Reinefeld's algorithm [Ladkin et al.
921 in which only PC is used during the search, and (2) the algorithm in which CC and PC are combined.
The experiments presented show that, at least for the problems randomly generated, combining CC and PC gets more use only in some cases.
However, as we discussed it in last section, other ways of combining CC and PC exist, that may beat, eventually for classes of real-life problems, the algorithm with PC alone.
Finally the work presented in this paper extends in a natural way to search algorithms in quantitative temporal networks [Dechter et al.
911.
I 815 1103 1459  The first case corresponds to dense and tight problems, which are difficult to satisfy (that is to say, the probability for such a problem to be inconsistent is almost 1 ) .
The results clearly show that for these problems, combining circuit consistency and path consistency gets more use than path consistency alone.
For this first case the number of nodes of the search space effectively spanned is equal to 0.
This is due to the fact that the problems are trivially inconsistent, and that inconsistency is detected by the first path consistency or the first circuit consistency, depending on whether the search uses PC alone or combines CC and PC (before calling the procedure backtrack).
The second case corresponds to problems of very weak tightness and very weak density; that is to say to underconstrained problems.
These problems are trivially consistent.
The first path consistency or the first circuit consistency, depending on whether the search uses PC alone or combines CC and PC, succeeds; then a solution is found with backtrack free (the table shows clearly that the number ofvisited nodes is n x (n-1)/2, where n is the number of variables).
As the second table shows, the two methods present similar performances for this second class of problems.
Discussion : Except for the two cases reported above, using PC alone, as suggested by Ladkin and Reinefeld [Ladkin et al.
921, gets more use than combining the two filtering methods.
Indeed, for the other problems we generated in our experiments, which are  References [Allen 831 Allen, J.F., Maintaintng Knowledge About Temporal Intervals, Communications of the ACM 26 (1 1) (1983) 832 - 843.
[Bennaceur 941 Bennaceur, H. , Partial Consistency for Constraint Satisfaction Problems, in: Proceedings ECAI-94, Amsterdam, (1994) 120 - 124.
[Dechter et al.
911 Dechter, R., Meiri, I. and Pearl, J., Temporal Constraint Networks, Artificial Intelligence 49 (1991) 61 - 95.
[Freuder 821 Freuder, E.C., A Suficient Condition for Backtrack-free Search, Journal of the ACM 29 (1982) 24 - 32.
[Gaschnig 781 Gaschnig, J., Experimental case studies of backtrack us.
Waltz-type us.
new algorithms for satasficing asszgnment problems, in: Proceedings of the Second Biennial Conference of the  61  Canadian Society for Computational Studies of Intelligence, Toronto, Ont., (1978) 268 - 277.
[Isli et al.
951 Isli, A. and Bennaceur, H., Networks of qualitative interval relations: combining circuit consistency and path consistency in the search for a solution, PrC-publication, L.I.P.N., UniversitC Paris 13, France (to appear).
I  [Ladkin et al.
92 Ladkin, P. and Reinefeld, A., EfjCective so vtion of qualitative constraint problems, Artificial Intelligence 57 (1992) 105 - 124.
[Mackworth 771 Mackworth, A.K., Consistency in Networks of Relations, Artificial Intelligence 8 (1977) 99 - 118.
[Montanari 741 Montanari, U., Networks of Constraints: Fundamental Properties and Applications to Picture Processing, Information Sciences 7 (1974) 95 - 132.
[Nebel et al.
941 Nebel, B. and Burckert, Reasoning about Temporal Relations: A Maximal Tractuble Subclass of Allen's Interval Algebra, in: Proceedings AAAI-94, Seattle, WA, (1994) 356 - 361.
[ValdCs-PCrez 871 ValdBs-PBrez, R.E., The satisfiability of temporal constraint networks, in: Proceedings AAAI-87, Seattle, Washington, (1987) 256 - 260.
[van Beek 921 van Beek, P., Reasoning about Qualitative Temporal Information, Artificial Intelligence 58 (1992) 297 - 326.
[Vilain et al.
861 Vilain, M. and Kauts, H., Constraint Propagation Algorithms for Temporal Reasoning, in: Proceedings AAAI-82, Philadelphia, PA, (1986) 377 - 382.
62