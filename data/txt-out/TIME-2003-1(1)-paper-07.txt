Hybrid Logics on Linear Structures: Expressivity and Complexity Massimo Franceschet Department of Sciences, University of Chieti-Pescara, Italy ILLC, University of Amsterdam, The Netherlands E-mail: francesc@science.uva.nl Maarten de Rijke ILLC, University of Amsterdam, The Netherlands E-mail: mdr@science.uva.nl Bernd-Holger Schlingloff Fraunhofer FIRST and Humboldt University, Berlin E-mail: hs@informatik.hu-berlin.de Category: Full paper; Track: 4 (Theory); Topics: Hybrid logics and nominals Abstract We investigate expressivity and complexity of hybrid logics on linear structures.
Hybrid logics are an enrichment of modal logics with certain first-order features which are algorithmically well behaved.
Therefore, they are well suited for the specification of certain properties of computational systems.
We show that hybrid logics are more expressive than usual modal and temporal logics on linear structures, and exhibit a hierarchy of hybrid languages.
We determine the complexities of the satisfiability problem for these languages and define an existential fragment of hybrid logic for which satisfiability is still NP-complete.
We then define several variants of the linear time model checking problem for hybrid logics and give efficient model checking algorithms.
1  Introduction  Modal and temporal logics are algorithmically well-behaved and mathematically natural fragments of classical logics [6].
However, from the point of view of reasoning about graphs, something crucial is missing in the usual propositional modal and temporal logics: they lack mechanisms for naming states or sets of states, and for dynamically creating new names.
There is a good reason for the lack of such naming mechanisms in traditional modal and temporal logics: they are only able to express properties that satisfy the tree model property, i.e., properties that are satisfiable iff they are satisfiable in a tree-like model [6].
The ability to name states in a model violates the tree model property.
Now, one can view the tree model property as a good feature for a logic, since it usually implies nice computational behavior, and as a bad feature, since it indicates a lack in expressivity.
Are there natural extensions of modal and temporal logics with the naming facilities required by various modeling tasks (and thus violating the tree model property) that are still well-behaved from a computational point of view?
Hybrid logics provide a positive answer to the previous question.
They allow reference to states in a modal framework, and, hence, mix features from first-order logic with features from modal logic, whence the name hybrid logic [7].
On top of ordinary propositional variables, hybrid languages have a type of atomic formulas called nominals.
Syntactically, nominals behave like ordinary propositional variables, but they are names, true at exactly one state in any model.
Hybrid languages may contain the at operator @i which gives 'random' access to the state named by i: @i ph holds iff ph holds at the state named by i.
They may also include the downarrow binder |x.
which assigns the variable name x to the state of evaluation.
The operator @ combines naturally with |: | 'stores' the current state, and @ 'retrieves' the information stored.
The existential binder [?]x.
binds the variable name x to a state in the model.
In this paper we investigate the expressivity and complexity of hybrid logics over linear frames (that is, irreflexive, transitive and trichotomous frames), and we compare our findings with the known results on general frames (that is, frames with no restriction).
We show that, on linear frames, basic hybrid logic (i.e., the logic extending propositional logic with nominals, @ operator, future F and past P temporal operators) is no more complex than propositional logic: its satisfiability problem is indeed NP-complete.
The same complexity bounds hold over (N, <), the linear frame of the natural numbers with the usual ordering relation.
The same logic over general structures is known to be EXPTIME-complete [1].
Whenever the hybrid binder | is added, the resulting hybrid logic is as expressive as first-order logic on linear structures, a result that fails in the case of general structures.
As a consequence, its satisfiability problem is nonelementarily decidable.
The same result holds over (N, <).
Moreover, the same logic is undecidable on general structures [3].
As soon as we remove P and @ operators, the resulting logic (hence, the hybrid logic with nominals, | and F only) has an NP-complete satisfiability problem over linear structures, whence over general structures it is still undecidable [3].
We furthermore isolate a large fragment of the nonelementary hybrid logic with hybrid operators @ and |, and temporal operators F and P (and their duals G and H) whose satisfiability problem is NP-complete, hence not harder than propositional logic.
This fragment prohibits the hybrid binder | in the scope of universal temporal operators G and H. As a corollary, we show NP-membership of a temporal logic equipped with a limited version of Until, Since and Next-time temporal operators (temporal logic with either Until or Next-time is PSPACE-hard).
We finally investigate the linear time model checking problem for hybrid logics and give some examples of properties in which the use of nominals is crucial.
2  Hybrid logics  In this section we introduce hybrid logics and give some examples of significant hybrid formulas.
Definition 2.1 Let PROP = {p1 , p2 , .
.
.}
be a countable set of propositional variables, NOM = {i1 , i2 , .
.
.}
a countable set of nominals, and WVAR = {x1 , x2 , .
.
.}
a countable set of state variables.
We assume that PROP, NOM and WVAR are pairwise disjoint.
We call WSYM = NOM [?]
WVAR the set of state symbols, ALET = PROP [?]
NOM the set of atomic letters, and ATOM = PROP [?]
NOM [?]
WVAR the set of atoms.
The well-formed formulas of the hybrid language HL(@, |, [?
], F, P, U, S) (over the signature hPROP, NOM, WVARi) are given by the rule ph := > | a | !ph | ph [?]
ph0 | Fph | Pph | phUph0 | phSph0 | @s ph | |xj .ph | [?
]xj .ph, where a [?]
ATOM, xj [?]
WVAR and s [?]
WSYM.
U and S are the Until and Since operators, respectively.
As usual, Gph is short for !F!ph and Hph for !P!ph.
Moreover, we define Eph as Pph [?]
ph [?]
Fph and Aph as !E!ph.
On linear frames, E and A are the existential and universal modality, respectively.
2  The notions of free and bound state variable (with respect to the binding operator |) are obvious generalizations from first-order logic.
Other syntactic notions (such as substitution, and of a state symbol t being substitutable for x in ph) are defined like the corresponding notions in first-order logic.
We write ph[t/s] for the formula obtained by replacing all free instances of the state symbol t by the state symbol s. A sentence is a formula without free state variables.
A formula is pure if it contains no propositional variables, and nominal-free if it contains no nominals.
Definition 2.2 A hybrid model M for the full hybrid language is a triple M = hM, R, V i with M is a non-empty set, R a binary relation on M , and V : ALET - Pow (M ) such that for all nominals i [?]
NOM, V (i) is a singleton.
(We use calligraphic letters M for models, italic roman M for their domains.)
We call the elements of M states, R the accessibility relation and V the valuation.
An assignment g for M is a mapping g : WVAR - M .
Given an assignment g, we define x x x ( an x-variant of g) by gm (x) = m and gm (y) = g(y) for x 6= y. gm Let M = hM, R, V i be a model, m [?]
M , and g an assignment.
For any atom a, let [V, g](a) = {g(a)} if a is a state variable, and V (a) otherwise.
The forcing relation is defined as follows (we omit the clauses for the Booleans and for the past temporal operators): M, g, m deg a iff M, g, m deg Fph iff M, g, m deg psUph iff M, g, m deg @s ph M, g, m deg |x.ph M, g, m deg [?
]x.ph  iff iff iff  m [?]
[V, g](a), (a [?]
ATOM) [?
]m0 (Rmm0 [?]
M, g, m0 deg ph) [?
]m0 (Rmm0 [?]
M, g, m0 deg ph[?]
[?
]m00 (Rmm00 [?]
Rm00 m0 - M, g, m00 deg ps)) M, g, m0 deg ph, where [V, g](s) = {m0 } (s [?]
WSYM) x M, gm ,m deg ph 0 x [?
]m (M, gm 0 , m deg ph)  A formula ph is satisfiable if there is a model M, an assignment g on M, and a state m [?]
M such that M, g, m deg ph.
A formula ph is valid if !ph is not satisfiable.
The at operator @s shifts evaluation to the state named by s. The downarrow binder |x.
binds the state variable x to the current state, and the existential binder [?]x.
binds the state variable x to some state in the model; | and [?]
do not shift evaluation away from the current state.
A model M = hM, R, V i is called linear if the relation R is irreflexive (i.e., [?
]x(!Rxx)), transitive (i.e., [?
]xyz(Rxy [?]
Ryz - Rxz)) and trichotomous (i.e., [?
]xy(Rxy [?]
x = y [?]
Ryx)).
The language of hybrid logic has a great expressive power, especially compared to its frugal syntax and perspicuous semantics.
We give some examples of its expressive power.
On linear models, A|x.F!PPx defines discreteness, which cannot be defined in the temporal logic of future F and past P. The Kamp's temporal operator Until can be defined in terms of {@, |, F} as follows: aUb = |x.F|y.
@x (F(y [?]
b) [?]
G(Fy - a)).
An alternative definition using past P instead of @ is the following: aUb = |x.F(b [?]
H(Px - a)).
Similarly for the Since temporal operator.
The dual of the Until is usually called Release and denoted by R: aRb = !(!aU!b).
The dual of the Since is usually called Trigger and denoted by T: aTb = !(!aS!b).
Both the Release and Trigger operators can be concisely expressed in terms of {|, F, P}.
For instance, aRb = |x.G(b [?]
P(Px [?]
a)).
3  [?
],@,F  [?
],@,P Q kQ  3 '  Q  '  Q'  [?
],@,P  3/4 - |,F,P 3/4 - [?
],@,F  |,@,F,P @ @ 6I  @  I @ 6@ @  |,@,F  |,@,F  6  6  @,S,U u !
!
!
@  @,F,P  @ I @  @  @,S,U  @ I @  !
u !
!
!
@,U  @ I @  @  @,F,P  !
u !
@ I @ @  @,F  @,U  !
u !
!
@,F  Figure 1: The hybrid hierarchy on general frames (left side) and on linear frames (right side) Finally, Stavi's Until and Since can also be embedded in hybrid logic.
For instance, the Stavi's Until is captured as follows: aU0 b  3  =  |x.FH(Px - a) [?]
!aR(a [?]
aU>) [?]
|x.F(!a [?]
b [?]
H(Px [?]
P(Px [?]
!a) - b)).
Expressivity and complexity on linear frames  In this section we investigate the expressive power of hybrid logics on linear structures.
Moreover, we study the computational complexity of the satisfiability and model checking problems for hybrid logics on linear frames.
3.1  Expressivity  Figure 3.1 summarizes how the expressive powers of the various hybrid languages are related, both on linear (right side) and general structures (left side).
To increase readability, we omit the HL prefix and write, e.g., [?
],@,F instead of HL([?
], @, F).
Arrows point from less expressive to more expressive languages.
We only prove the following expressivity result: Theorem 3.1 HL(|, F, P), HL([?
], @, F), and HL([?
], @, P) are all as expressive as monadic first-order logic over linear structures.
Proof.
We proceed as follows.
We first show that HL(|, F, P), HL([?
], @, F), and HL([?
], @, P) have all the same expressive power.
Then, we show that HL(|, F, P) is as expressive as firstorder logic.
Recall that on linear frames, E acts as the existential modality, that is, Eph is true at m iff there exists some world m0 in the model such that ph is true at m0 .
We prove the following embedding loop: HL(|, F, P) = HL([?
], @, F) = HL([?
], @, P) = HL(|, F, P).
We show HL(|, F, P) = HL([?
], @, F).
We encode the past temporal operator P as follows: Pph = [?
]x(x [?]
[?]y.
@y (Fx [?]
ph)).
We encode the hybrid binder | as follows: |x.ph = [?]x.
(x [?]
ph).
We show HL([?
], @, F) = HL([?
], @, P).
We encode the future temporal operator F as follows: Fph = [?
]x(x [?]
[?]y.
@y (Px [?]
ph)).
We finally show HL([?
], @, P) = HL(|, F, P).
We 4  encode the hybrid binder [?]
as follows: [?
]x.ph = |y.E|x.
@y ph, and we remove the @ operator as follows: @i ph = E(i [?]
ph).
We now show that HL(|, F, P) is as expressive as monadic first-order logic.
This completes the proof of the theorem.
To be more precise, the first-order language under consideration contains equality, a binary predicate R, a unary predicate Pj for each pj [?]
PROP, and whose constants are the elements of NOM.
We first show that HL(|, F, P) is a fragment of this firstorder logic.
To see this, recall that the standard translation is an embedding of modal logic into monadic first-order logic [6]; it can easily be extended to hybrid logics.
Clearly, a hybrid model can be regarded as a first-order model for this language and vice versa.
The translation ST from the hybrid language HL([?
], |, @, F, P) into first-order correspondence logic is defined by mutual recursion between two functions ST x and ST y (we only give the clauses for ST x ; the ones for ST y are completely analogous; the Boolean cases are left out): ST x (pj ) ST x (ij ) ST x (xj ) ST x (Fph) ST x (Pph) ST x (@t ph) ST x (|xj .ph) ST x ([?
]xj .ph)  = = = = = = = =  Pj (x), pj [?]
PROP (x = ij ), ij [?]
NOM (x = xj ), xj [?]
WVAR [?
]y (Rxy [?]
ST y (ph)) [?
]y (Ryx [?]
ST y (ph)) (ST x (ph))[x/t] [?
]xj .
(x = xj [?]
ST x (ph)) [?
]xj .ST x (ph)  Finally we encode our first-order logic into HL(|, F, P) as follows.
Recall that Eph is defined as Pph [?]
ph [?]
Fph.
t (x = y) t (Rxy) t (P (x)) t (a [?]
b) t (!a) t ([?
]x.a)  = = = = = =  E(x [?]
y) E(x [?]
Fy) E(x [?]
p) t (a) [?]
t (b) !t (a) |y.E|x.E(y [?]
t (a)) a  The above result is more general: it holds on any class of frames such that the existential modality E can be defined in HL(|, F, P).
An interesting example is the class of transitive trees.
On transitive trees, Eph = ph [?]
Pph [?]
PFph.
However, the above result does not hold on the class of any frames: on general frames, HL(|, @, F, P) is as expressive as the bounded fragment of first-order logic, a strict subfragment of first-order logic [3].
3.2  Complexity of the satisfiability problem  In [2], the authors notice that on linear frames, we can get rid of nominals and @ as soon as we have at disposal (strict) past and future temporal operators.
Indeed, we can simulate nominals by singleton propositions, that is propositions true at exactly one state: i is a singleton proposition iff E(i [?]
H!i [?]
G!i) holds.
Moreover, @i ph can be expressed as E(i [?]
ph) or A(i - ph).
It follows that there is a translation of hybrid formulas in HL(@, F, P) into temporal formulas in TL(F, P) preserving equi-satisfiability.
Moreover, they show that there is a polynomial translation with the same features.
Hence, the satisfiability problem for HL(@, F, P) can be reduced to the same problem for TL(F, P), which is known to be decidable in nondeterministic polynomial time [13].
NP-hardness for HL(@, F, P) holds since it extends Propositional Calculus.
Theorem 3.2 The satisfiability problem for HL(@, F, P) on linear frames is NP-complete.
5  The same complexity bounds for HL(@, F, P) hold over (N, <), the linear frame of the natural numbers with the usual ordering relation.
The proof is the same and TL(F, P) over natural numbers is NP-complete, a recent result proved in [12].
However, HL(@, F, P) on general structures has higher complexity: its satisfiability problem is known to be EXPTIMEcomplete [1].
In the proof, only one nominal is used.
If we replace future F and past P temporal operators by Until U and Since S, respectively, the satisfiability problem on natural numbers is harder.
Theorem 3.3 The satisfiability problem for HL(@, U, S) on natural numbers is PSPACEcomplete.
Proof.
PSPACE-hardness holds since TL(U) on natural numbers is already PSPACE-hard [15].
Moreover, nominals and @ operator may be removed from HL(@, U, S), as shown above, by taking advantage of past P and future F operators, which can be defined in terms of Until U and Since S, respectively.
It follows that the linear time satisfiability problem for HL(@, U, S) can be embedded into the same problem for TL(U, S), which is decidable in PSPACE [15].
a We do not know whether the same result works on linear frames.
In [14] the author proves that, on linear structures, the temporal logic of Until is PSPACE-complete, and he conjectures the same result for the temporal logic with Until and Since.
Hence, on linear frames, HL(@, U, S) is at least PSPACE-hard.
The situation on general structures is the following: both HL(@, U) and HL(@, U, S) are complete for EXPTIME, and the proof uses only one nominal [1] We now consider the addition of the hybrid binder |.
We already showed that, on linear frames, HL(|, @, F, P) is as expressive as first-order logic in the correspondence language with free monadic predicates.
Universal (and existential) monadic second order logic over linear frames is decidable [11].
Furthermore, full monadic second-order logic over natural numbers is nonelementarily decidable [8].
The following theorem follows.
Theorem 3.4 The satisfiability problem for HL(|, @, F, P) on linear frames and on natural numbers is nonelementarily decidable.
The situation on the class of any frame is even worse: already HL(|, F) is undecidable, even without nominals and propositions [3].
The latter neatly contrasts with the situation on linear frames: HL(|, F) is decidable in NP.
Theorem 3.5 The satisfiability problem for HL(|, F) on linear structures is NP-complete.
Proof.
We can get rid of | from HL(|, F) as follows: given a formula |x.ph, any instance of x appearing in ph in the scope of an F operator evaluates to false, since a linear structure has no loop and there are no past or @ operators that can jump back to it.
It hence may be replaced by [?
], that is, by !>, without changing the meaning of the formula.
Moreover, any instance of x appearing in ph not in the scope of an F operator evaluates to true, since it refers to the current point of evaluation.
It may be replaced by > without changing the meaning of the formula.
Finally the | binder may be removed.
The resulting is an equivalent formula in HL(F), which is decidable in NP by Theorem 3.2.
NP-hardness holds since HL(|, F) extends Propositional Calculus.
a It turns out that, on linear structures, | is a kind of bully operator: it shows its strength only in presence of @ and P. The reason is clear: since linear structures are acyclic, the only way to access a variable stored by | is by using either the @ or the P operator.
Hence, the power of | is tamed without them.
6  Our aim in the following is to isolate existential fragments of HL([?
], @, F, P) and HL(|, @, F, P) with nice computational behaviour.
The existential hybrid logic EHL([?
], @, F, G, P, H) is obtained from HL([?
], @, F, G, P, H) by (1) allowing formulas in negation normal form only (which means that negation in applied over atomic symbols only) (2) disallowing [?]
in the scope of universal temporal operators G and H. The language EHL(|, @, F, G, P, H) is defined similarly.
Notice that existential hybrid logics are not closed under negation and hence the satisfiability and validity problems for them are not equivalent.
We are able to prove the following: Theorem 3.6 The satisfiability problem for both EHL([?
], @, F, G, P, H) and EHL(|, @, F, G, P, H) on linear frames is NP-complete.
Proof.
The lower bound is clear.
We prove the upper bound for EHL([?
], @, F, G, P, H).
Since | can be defined in terms of [?
], the upper bound holds for EHL(|, @, F, G, P, H) too.
We polynomially reduce the satisfiability problem for EHL([?
], @, F, G, P, H) to the same problem for HL(@, F, G, P, H), which is in NP by virtue of Theorem 3.2.
The idea is the following: let ph be a formula in HL([?
], @, F, G, P, H).
Since existential binders in ph are not in the scope of universal temporal operators G and H, we can move them in front of the formula and hence rewrite ph in prenex normal form.
Now it is clear that any world variable x in ph can be replaced by a new nominal ix and the corresponding existential quantifier may be dropped.
The resulting formula is in HL(@, F, G, P, H) and it is satisfiable if and only the original formula is satisfiable.
Let's work out the details.
Let ph be a formula in HL([?
], @, F, G, P, H) and let x1 , .
.
.
, xn be the existentially quantified variables in ph.
We assume that x1 , .
.
.
, xn are pairwise different and that free variables of ph are not in {x1 , .
.
.
, xn }.
We can move the existential binders of ph in front of the formula by applying the following equivalences, which can be proved by using the standard translation of hybrid logic into first order logic.
a [?]
[?
]x.b a [?]
[?
]x.b F[?
]x.a P[?
]x.a @y [?
]x.a  [?]
[?]
[?]
[?]
[?]
[?]x.
(a [?]
b) [?]x.
(a [?]
b) [?
]x.Fa [?
]x.Pa [?]x.
@y a  Hence ph is equivalent to a formula ph1 of the form [?
]x1 .
.
.
.
[?
]xn .a.
For each xj , let ixj be a nominal not occurring in ph.
Let ph2 be the formula obtained from ph1 by replacing every occurrence of xj by ixj and by dropping all the existential binders in front of the formula.
Note that ph2 is a formula in HL(@, F, G, P, H).
We have the following: Claim 1 ph1 is satisfiable if and only if ph2 is satisfiable.
Since satisfiability for formulas in HL(@, F, G, P, H) can be checked in nondeterministic polynomial time (Theorem 3.2), this claim completes the proof.
We finally prove the claim.
For the left to right direction.
Let M = hM, R, V i be a hybrid model, g be an assignment, and m be a world in M such that M, g, m deg ph1 .
Since ph1 has the form [?
]x1 .
.
.
.
[?
]xn .a, there is a tuple m1 , .
.
.
, mn [?]
M n such that M, g 0 , m deg a, where g 0 = g[x1 /m1 , .
.
.
, xn /mn ].
It follows that M0 , g, m deg ph2 , where M0 = hM, R, V 0 i, and V 0 differs from V only on the evaluation of the new nominals ixj , for which V 0 (ixj ) = {mj }.
For the right to left direction.
Let M = hM, R, V i be a hybrid model, g be an assignment, and m be a world in M such that M, g, m deg ph2 .
Hence there is a tuple m1 , .
.
.
, mn [?]
M n , with V (ixj ) = {mj }, such that M, g 0 , m deg a, where g 0 = g[x1 /m1 , .
.
.
, xn /mn ].
It follows that M, g, m deg [?
]x1 .
.
.
.
[?
]xn .a, that is, M, g, m deg ph1 .
a  7  A nice corollary of Theorem 3.6 is the following.
We know that temporal logic with future and past operators admits an NP-complete satisfiability problem, and we remain in NP if we add nominals and the @ operator.
However, as soon as we add either Until or Since temporal operators, we jump up into PSPACE.
Nevertheless, if we manage these operators with care, we don't leave NP.
Corollary 3.7 Let LiteLTL be the fragment of HL(@, F, G, P, H, U, S) such that 1. !
is applied over atomic symbols only; 2.
U and S are not allowed in the scope of G and H; 3. formulas aUb and aSb are such that U and S are not allowed in a.
Then, the satisfiability problem for LiteLTL on linear frames is NP-complete.
Proof.
Recall the U and S can be defined in terms of {|, @, F, P} as follows: aUb aSb  = =  |x.F|y.
@x (F(y [?]
b) [?]
G(Fy - a)) |x.P|y.
@x (P(y [?]
b) [?]
H(Py - a))  Hence in aUb, only a is in the scope of an universal temporal operator.
It follows that LiteLTL is a fragment of EHL(|, @, F, G, P, H), whose satisfiability problem is in NP by Theorem 3.6. a In the above fragment you can, for instance, write properties like "p will hold (held) exactly n times in the future (past)", which are beyond the expressive power of HL(@, F, P).
For instance, the LiteLTL-formula that follows claims that p will hold exactly 2 times in the future: !pU(p [?]
!pU(p [?]
G!p)) A limited form of Next-time and Previous-time operator is also allowed in LiteLTL (these operators make sense only on discrete linear frames, like natural numbers).
We define the Next-time operator Xph as [?
]Uph and the Previous-time operator Yph as [?]Sph.
We are allowed to nest X, Y and all the other temporal operators in the scope of X and Y.
Moreover, X and Y are allowed in the scope of existential temporal operators F and P and in the scope of temporal operators U and S as soon as they appear only in the existential part of them (that is, in b, whenever the formula is aUb or aSb).
All the rest is prohibited.
For example, we can write the property "p will hold until q will hold continuously for 3 times" as pU(q [?]
Xq [?]
XXq).
Release and Trigger operators, as well as Stavi's Until and Since, are also allowed in LiteLTL, as soon as we manage them with care.
These operators can be nested only in the scope of existential unary temporal operators and in the scope of the existential part of Kamp's Since and Until.
Moreover, any binary temporal operator is not allowed in the scope of them.
It is worth remarking that, on linear frames, the temporal logic with Until is PSPACEhard [14].
The same result holds on natural numbers [15].
Moreover, on natural numbers, the temporal logic with future and Next-time is PSPACE-hard too [15].
A closer analysis of the latter two results shows that both the fragments of TL(F, X) and TL(U) in which the temporal operators are not nested are in NP [10].
However, already TL(U)-formulas with temporal height 2 are enough to encode QBF, and hence the resulting fragment is PSPACE-hard.
Similarly, a bounded temporal nesting in TL(F, X) is enough to encode QBF [10].
It follows that the linear temporal logic LiteLTL lies in NP but "very close" to PSPACE.
8  The reader should wonder about the practical usefulness of decreasing a complexity bound from PSPACE to NP.
Isn't NP still intractable?
Yes, it is.
However, problems in NP may be polynomially reduced to SAT, the popular NP-complete problem, for which many heuristic solvers have been implemented.
Problems in PSPACE, on the contrary, cannot be reduced to SAT, unless NP = PSPACE.
Techniques for embedding the model checking (and satisfiability) problem for linear time logics into SAT are described and implemented in [5, 9].
These techniques have been recently extended to cope with past temporal operators [4].
3.3  The linear time model checking problem  Model checking is a generic term for a class of algorithms which determine whether a given formula holds in a given model or class of models.
Often a Kripke structure denotes some computational system, and paths through the system denote computations.
Hence, in linear time model checking formulas are evaluated not on the Kripke structure itself, but on the set of paths through it.
The hybrid Kripke structure M = hM, R, V i is total if every state in M has at least one R-successor.
In this section we will consider only total and finite Kripke structures.
A path from s0 in M is an infinite state sequence p = s0 , s1 , .
.
.
such that Rsi si+1 for every i >= 0.
We denote by pi the i-th state si of p. Any path in M can be naturally associated to a linear structure Mp = hN, <, V 0 i such that N is the set of natural numbers, < is the usual ordering relation on the natural numbers and, for every i >= 0 and p [?]
ALET, i [?]
V 0 (p) iff pi [?]
V (p).
Notice that Mp is not necessarily a hybrid structure, since, because of the unfolding process, the same nominal may label different states of Mp .
The meaning of formulas of the form @i a, where i is a nominal, is hence ambiguous.
There are several possibilities to deal with this situation.
Our choice here is to consider nominals as additional propositions which must be true at exactly one state of the branching structure M but may be true at several states of the linear structure Mp obtained by unfolding the path p of M. The meaning of the formula @i a is then "a holds at some state labelled with i".
That is, Mp , m deg @i a iff Mp , m deg E(i [?]
a).
We are now ready to define the linear time model checking problem for hybrid logics.
We distinguish between the existential and the universal version of the model checking problem.
The existential linear time model checking problem for hybrid logics is to determine whether a given hybrid formula is true in some path of the model: M, m |=[?]
ph iff Mp , 0 deg ph for some path p starting at m in M. Moreover, M |=[?]
ph iff M, m |=[?]
ph for some m [?]
M. The universal linear time model checking problem for hybrid logics is to determine whether a given hybrid formula is true in every path of the model: M, m |=[?]
ph iff Mp , 0 deg ph for every path p starting at m in M. Moreover, M |=[?]
ph iff M, m |=[?]
ph for every m [?]
M. Notice that the universal model checking problem is the dual of the existential one: M, m |=[?]
ph iff it is not the case that M, m |=[?]
!ph.
The existential (respectively, universal) linear time model checking problem for TL(F, P) has been recently proved to be NP-complete (respectively, coNP-complete) [12].
The following follows: Theorem 3.8 The existential (respectively, universal) linear time model checking problem for HL(@, F, P) is NP-complete (respectively, coNP-complete).
Moreover, it is well-known that both the existential and the universal linear time model checking problems for TL(F, P, U, S) are PSPACE-complete [15].
Hence, we have the following: Theorem 3.9 Both the existential and universal linear time model checking problem for HL(@, F, P, U, S) is PSPACE-complete.
9  We conclude this section by giving some model checking examples involving nominals.
Let the nominal Start designate the unique initial state in a system modelled by M. Then the check M, Start |=[?]
FStart is true iff "each computation of the system starting at the initial state will eventually return to the initial state".
This implies that the initial state will be visited infinitely often in every computation of the system.
Since Start is a nominal, it is true at exactly one state in M (the initial state), but it may be true at several states in the computation paths in M. If Start were a proposition, instead of a nominal, then the above check would be true iff "each computation of the system starting at a state labelled with Start will eventually reach a (possibly different) state labelled with Start".
The check M, Start |=[?]
G!Start is true iff "each computation of the system starting at the initial state will never return to the initial state".
Finally the check M, Start |=[?]
(!Start)U(Start [?]
G!Start) is true iff "there is a computation of the system starting at the initial state that will return to the initial state exactly once".
4  Conclusion  In this paper, we have analyzed the expressivity and complexity of several variants of hybrid logic on linear structures.
There are a number of open questions for further work.
Firstly, there is the question of second order extensions of these languages, e.g., by fixpoint operators or propositional quantifiers.
Secondly, it would be interesting to find a generic format for hybrid specifications, similar as it is TLA (Lamport's temporal logic of actions) for linear temporal logic.
Thirdly, we want to apply hybrid logic in the specification of an industrial application (an electronic funds transfer / point of sale banking system).
A challenge is to find a way to combine the specification of various spatial and temporal properties such that the resulting formulas are still tractable.
An interesting project in this context is to derive an intuitive high-level specification language which can be mapped into the hybrid framework and allows to formulate correctness properties without detailled knowledge of the underlying logic.
References [1] C. Areces, P. Blackburn, and M. Marx.
A road-map on complexity for hybrid logics.
In J. Flum and M. Rodriguez-Artalejo, editors, Computer Science Logic, volume 1683 of LNCS, pages 307-321.
Springer, 1999.
[2] C. Areces, P. Blackburn, and M. Marx.
The computational complexity of hybrid temporal logics.
Logic Journal of the IGPL, 8(5):653-679, 2000.
[3] C. Areces, P. Blackburn, and M. Marx.
Hybrid logics: Characterization, interpolation, and complexity.
Journal of Symbolic Logic, 66(3):977-1010, 2001.
[4] M. Benedetti and A. Cimatti.
Bounded model checking for past LTL.
In Proceedings of the International Conference on Tools and Algorithms for the Construction and Analysis of Systems, 2003.
[5] A. Biere, A. Cimatti, E. M. Clarke, M. Fujita, and Y. Zhu.
Symbolic model checking using SAT procedures instead of BDDs.
In Proceedings of Design Automation Conference, volume 1579 of Lectures Notes in Computer Science, pages 193-207, 1999.
10  [6] P. Blackburn, M. de Rijke, and Y. Venema.
Modal Logic.
Cambridge University Press, 2001.
[7] P. Blackburn and J. Seligman.
What are hybrid languages?
In M. Kracht, M. de Rijke, H. Wansing, and M. Zakharyaschev, editors, Advances in Modal Logic, Volume 1, pages 41-62.
CSLI Publications, 1998.
[8] J. R. Buchi.
On a decision method in restricted second-order arithmetic.
In Proceedings of the International Congress on Logic, Methodology, and Philosophy of Science, pages 1-11.
Stanford University Press, 1962.
[9] A. Cimatti, M. Pistore, M. Roveri, and R. Sebastiani.
Improving the enconding of LTL model checking into SAT.
In Proceedings of the Workshop on Verification Model Checking and Abstract Interpretation (VMCAI 2002), volume 2294 of Lectures Notes in Computer Science, 2002.
[10] S. Demri and Ph.
Schnoebelen.
The complexity of propositional linear temporal logics in simple cases.
Information and Computation, 174(1):84-103, 2002.
[11] Y. Gurevich.
Elementary properties of ordered abelian groups.
Algebra and Logic, 3(1):5-39, 1964.
Russian.
[12] N. Markey.
Past is for free: on the complexity of verifying linear temporal properties with past.
In Proceedings of the International Workshop on Expressiveness in Concurrency (EXPRESS'2002), volume 68.2 of Electronic Notes in Theoretical Computer Science.
Elsevier Science, 2002.
[13] H. Ono and A. Nakamura.
On the size of refutation Kripke models for some linear modal and tense logics.
Studia Logica, 39:325-333, 1980.
[14] M. Reynolds.
The complexity of the temporal logic with until over general linear time.
Journal of Computer and System Science, to appear.
[15] A. P. Sistla and E. M. Clarke.
The complexity of propositional linear temporal logics.
Journal of the ACM, 32(3):733-749, 1985.
11