2009 16th International Symposium on Temporal Representation and Reasoning  Dense Time Reasoning via Mosaics Mark Reynolds School of Computer Science and Software Engineering The University of Western Australia Perth, Australia Email: mark@csse.uwa.edu.au  reasoning procedures any further.
It is not even clear from the decision procedure in [4] (via Rabin's non-elementarily complex decision procedure for the second-order monadic logic of two successors) how computationally complex it might be to decide validities in RTL.
This is in marked contrast to the situation with PLTL which has been shown to have a PSPACE-complete decision problem in [11].
A variety of practical reasoning methods for PLTL have been developed.
In recent work by the author [12], we show that as far as determining validity is concerned, RTL is just as easy to reason with as PLTL.
In particular, the complexity of the decision problem is PSPACE-complete.
The proof in that paper uses new techniques in temporal logic.
In particular we further develop the idea of linear time mosaics as seen in [13].
Mosaics were used to prove decidability of certain theories of relation algebras in [14] and have been used since quite generally in algebraic logic and modal logic.
These mosaics are small pieces of a model, in our case, a small piece of a real-flowed structure.
We decide whether a finite set of small pieces is sufficient to be used to build a real-numbers model of a given formula.
This is also related to the existence of a winning strategy for one player in a two-player game played with mosaics.
The search for a winning strategy can be arranged into a search through a tree of mosaics which we can proceed through in a depth-first manner.
By establishing limits on the depth of the tree (a polynomial in terms of the length of the formula) and on the branching factor (exponential) we can ensure that we have a PSPACE algorithm as we only need to remember a small fixed amount of information about all the previous siblings of a given node.
The proof also vaguely suggests a tableau based method for determining RTL validity but we leave that for future work.
Abstract--In this paper we consider the problem of temporal reasoning over a real numbers model of time.
After a quick survey of related logics such as those based on intervals, or metric information or rational numbers, we concentrate on using the Until and Since temporal connectives introduced in [1].
We will call this logic RTL.
Although RTL has been axiomatized and is known to be decidable it has only recently been established that a PSPACE decision procedure exists.
Thus, it is just as easy to reason over real-numbers time as over the traditional natural numbers model of time.
The body of the paper outlines the basics of the novel temporal "mosaic" method used to show this complexity.
Keywords-temporal numbers time;  logic;  reasoning;  complexity;  real-  I. I NTRODUCTION There are a variety of temporal logics appropriate for a variety of reasoning tasks.
Propositional reasoning on a natural numbers model of time has been well studied via the logic now commonly called PLTL which was introduced in [2].
However, it has long been acknowledged that dense or specifically real-numbers time models may be better for many applications, ranging from philosophical, natural language and AI modelling of human reasoning to computing and engineering applications of concurrency, refinement, open systems, analogue devices and metric information.
See for example [3] or [4].
For these sorts of applications, other logics have been developed such as intervals [5], metric temporal logics [6], rationals time [7] and finite variability [8], [3].
However, the oldest, most natural and useful such temporal logic is RTL, the propositional temporal logic over real-numbers time using the Until and Since connectives introduced in [1].
We know from [1] that this logic is sufficiently expressive for many applications: technically it is expressively complete and so at least as expressive as any other usual temporal logic which could be defined over real-numbers time and as expressive as the first-order monadic logic of the real numbers.
We have, from [9] and [10], complete axiom systems to allow derivation of the validities of RTL.
We know from [4] that RTL is decidable, i.e.
that an algorithm exists for deciding whether a given RTL formula is a validity or not.
Unfortunately, it has seemed difficult to develop the 978-0-7695-3727-6/09 $25.00 (c) 2009 IEEE DOI 10.1109/TIME.2009.16  II.
T HE LOGIC Fix a countable set L of atoms.
Here, frames (T, <), or flows of time, will be irreflexive linear orders.
Structures T = (T, <, h) will have a frame (T, <) and a valuation h for the atoms i.e.
for each atom p [?]
L, h(p) [?]
T .
Of particular importance will be real structures T = (R, <, h) which 3  have the real numbers flow (with their usual irreflexive linear ordering).
The language L(U, S) is generated by the 2-place connectives U and S along with classical !
and [?].
That is, we define the set of formulas recursively to contain the atoms and for formulas a and b we include !a, a [?]
b, U (a, b) and S(a, b).
Formulas are evaluated at points in structures T = (T, < , h).
We write T, x |= a when a is true at the point x [?]
T .
This is defined recursively as follows.
Suppose that we have defined the truth of formulas a and b at all points of T. Then for all points x: T, x |= p iff x [?]
h(p), for p atomic; T, x |= !a iff T, x 6|= a; T, x |= a [?]
b iff both T, x |= a and T, x |= b; T, x |= U (a, b) iff there is y > x in T such that T, y |= a and for all z [?]
T such that x < z < y we have T, z |= b; and T, x |= S(a, b) iff there is y < x in T such that T, y |= a and for all z [?]
T such that y < z < x we have T, z |= b.
In most of the literature on temporal logics for discrete time, the "until" connective is written in an infix manner: bU a rather than U (a, b).
This corresponds to the natural language reading "I will be here until I become hungry" rather than our alternative "until I am hungry, I will be here".
We choose to use the prefix notation for until (and since) because it agrees with important previous work on the language for dense time such as [1], [4] and [15] and because the infix until connective seen with discrete time is usually a slightly different connective, the non-strict until connective which we mention below.
image non-strict "since".
Comparisons between strict and non-strict connectives are discussed more fully in [13].
B.
Reasoning with RTL A formula ph is R-satisfiable if it has a real model: i.e.
there is a real structure S = (R, <, h) and x [?]
R such that S, x |= ph.
A formula is R-valid iff it is true at all points of all real structures.
Of course, a formula is R-valid iff its negation is not R-satisfiable.
We will refer to the logic of L(U,S) over real structures as RTL.
Let RTL-SAT be the problem of deciding whether a given formula of L(U, S) is R-satisfiable or not.
The main result of [12] is: THEOREM 1: RTL-SAT is PSPACE-complete.
In order to help get a feel for the sorts of formulas which are validities in RTL it is worth considering a few formulas in the language.
U (>, [?])
is a formula which only holds at a point with a discrete successor point so G!U (>, [?])
is a validity of RTL.
F p - F F p is a formula which can be used as an axiom for density and is also a validity of RTL.
(G+ p [?]
F !p) - U (!p [?]
K + (!p), p) was used as an axiom for Dedekind completeness (in [10]) and is a validity.
Recall that a linear order is Dedekind complete if and only if each non-empty subset which has an upper bound has a least upper bound.
The formula says that if p is true constantly for a while but not forever then there is an upper bound on the interval in which it remains true.
This formula is not valid in the temporal logic with until and since over the rational numbers flow of time.
One of the most interesting validities of RTL is Hodkinson's axiom "Sep" (see [10]).
It is K + p [?]
!K + (p [?]
U (p, !p)) - K + (K + p [?]
K - p).
This can be used in an axiomatic completeness proof to enforce the separability of the linear order: DEFINITION 2: A linear order is separable iff it has a countable suborder which is spread densely throughout the order: i.e.
between every two elements of the order lies an element of the suborder.
The fact that the rationals are dense in them shows that the reals are separable.
There are dense, Dedekind complete linear orders with end points which are not separable (eg, see [10]).
The negation of Sep will be satisfiable over them but not over the reals.
As we have noted in the introduction, there are complete axiom systems for RTL in [9] and in [10]: the former using a special rule of inference and the latter just using orthodox rules.
Rabin's decision procedure for the second-order monadic logic of two successors [16] is used in [4] to show that that RTL is decidable.
One of the two decision procedures inthat paper just gives us a non-elementary upper bound on the complexity of RTL-SAT.
A. Abbreviations There are many common and generally useful other connectives which can be defined as abbreviations in the language.
These include the classical a [?]
b = !
(!a [?]
!b); > = p [?]
!p (where p is some particular atom from L); [?]
= !>; and a - b = (!a) [?]
b.
Then there are the common temporal ones: F a = U (a, >), "alpha will be true (sometime in the future)" ; Ga = !F (!a), "alpha will always hold (in the future)"; and their mirror images P and H. Particularly for dense time applications we also have: G+ a = U (>, a), "alpha will be constantly true for a while after now"; and K + a = !G+ !a, "alpha will be true arbitrarily soon".
They have mirror images G- and K - .
The non-strict "until" connective [11], used in PLTL and other temporal logics over the natural numbers (i.e.
over sequences of states) is just "a until b" given as b [?]
(a [?]
U (b, a)) in terms of our strict "until".
There is a mirror 4  S is maximally propositionally consistent (MPC) iff S is maximal in being a subset of Clph which is PC.
We will define a mosaic to be a triple (A, B, C) of sets of formulas.
The intuition is that this corresponds to two points from a structure: A is the set of formulas (from Clph) true at the earlier point, C is the set true at the later point and B is the set of formulas which hold at all points strictly in between.
Look ahead to definition 15 to see how a mosaic can be found in a real structure.
The coherency conditions are given as part of the following definition.
It will be easy to see that they are necessary for a mosaic to represent a small part of a real structure.
However, they are only simple syntactic criteria and are therefore not subtle enough to be also sufficient for a mosaic to represent a piece of real structure.
Thus, as we will see later, an important task in this paper is to identify which mosaics are actually realizable.
DEFINITION 5: Suppose ph is from L(U, S).
A ph-mosaic is a triple (A, B, C) of subsets of Clph such that: C0.1 A and C are maximally propositionally consistent, and C0.2 for all !
!b [?]
Clph we have !
!b [?]
B iff b [?]
B and the following four coherency conditions hold: C1.
if !U (a, b) [?]
A and b [?]
B then we have both: C1.1.
!a [?]
C and either !b [?]
C or !U (a, b) [?]
C; and C1.2.
!a [?]
B and !U (a, b) [?]
B. C2.
if U (a, b) [?]
A and !a [?]
B then we have both: C2.1 either a [?]
C or both b [?]
C and U (a, b) [?]
C; and C2.2.
b [?]
B and U (a, b) [?]
B. C3.
if !S(a, b) [?]
C and b [?]
B then we have both: C3.1 !a [?]
A and either !b [?]
A or !S(a, b) [?]
A; and C3.2 !a [?]
B and !S(a, b) [?]
B. C4.
if S(a, b) [?]
C and !a [?]
B then we have both: C4.1 either a [?]
A or both b [?]
A and S(a, b) [?]
A; and C4.2 b [?]
B and S(a, b) [?]
B.
The reader can check that these coherence conditions are reasonable (i.e.
sound) in terms of the intended meaning of a mosaic.
For example, considering C2.2, if U (a, b) holds at one point x and !a holds at all points between x and y > x, then it is clear from the semantics of U that there must be some z >= y with a true there and b (and so also U (a, b)) holding everywhere between x and y and beyond until z.
DEFINITION 6: If m = (A, B, C) is a mosaic then start(m) = A is its start, cover(m) = B is its cover and end(m) = C is its end.
If we start to build a model using mosaics then, as we have noted, we may realize that the inclusion of one mosaic necessitates the inclusion of others: defects need curing.
If we claim to have in a certain set all the mosaics needed to  There seems to have been little further development of any reasoning techniques for RTL.
Standard techniques for temporal reasoning including automata, tableaux, finite model properties and resolution do not seem to give any easy answers.
For example, automata operate with discrete steps.
The main general problem, though, is that all the usual ways of using these techniques are based on reasoning about what is true at one point at a time.
Deciding RTL seems to need the ability to reason about (at least) two points and the points in between them.
This is exactly the way that the new mosaic technique for temporal logic has been seen to work in [13] where it was applied to the temporal logic with U over the class of all linear orders.
Thus we launch into using the new mosaic technique for the more complicated and more useful specific case of the real numbers flow of time.
With general ways of developing tableaux from mosaics suggested in [17], it might then be possible to portray the procedure in a more standard way: but that is future work.
III.
M OSAICS FOR U AND S We will decide the satisfiability of formulas by considering sets of simple labelled structures which represent small pieces of real structures.
The idea is based on the mosaics seen in [14] and used in many other subsequent proofs.
Each mosaic is a small piece of a model, i.e.
a small set of objects (points), relations between them and a set of formulas for each point indicating which formulas are true there in the whole model.
There will be coherence conditions on the mosaic which are necessary for it to be part of a larger model.
We want to show the equivalence of the existence of a model to the existence of a certain set of mosaics: enough mosaics to build a whole model.
So the whole set of mosaics also has to obey some conditions.
These are called saturation conditions.
For example, a particular small piece of a model might require a certain other piece to exist somewhere else in the model.
We talk of the first mosaic having a defect which is cured by the latter mosaic.
Our mosaics will only be concerned with a finite set of formulas: DEFINITION 3: For each formula ph, define the closure of ph to be Clph = {ps, !ps | ps <= ph} where kh <= ps means that kh is a subformula of ps.
We can think of Clph as being closed under negation: treat !
!a as if it was a.
Some of the sets of formulas which we consider will be intended to be a set of formulas which all hold at one point in a model.
Thus they should be at least consistent in terms of classical propositional logic: DEFINITION 4: Suppose ph [?]
L(U, S) and S [?]
Clph.
Say S is propositionally consistent (PC) iff there is no substitution instance of a tautology of classical propositional logic of the form !
(a1 [?]
...
[?]
an ) with each ai [?]
S. Say 5  1. for all U (a, b) [?]
A we have 1.1. b [?]
B and either (b [?]
C and U (a, b) [?]
C) or a [?]
C, 1.2. or there is some i with 1 <= i < n such that a [?]
Ci , b [?]
Bj (all j <= i) and b [?]
Cj (all j < i); 2. the mirror image of 1.; and 3. for each b [?]
Clph such that !b 6[?]
B there is some i such that 1 <= i < n and b [?]
Ci .
If 1.2 above holds in the case that U (a, b) [?]
A is a type 1 defect in (A, B, C) then we say that a cure for the defect is witnessed (in the decomposition) by the end of (Ai , Bi , Ci ) (or equivalently by the start of (Ai+1 , Bi+1 , Ci+1 )).
Similarly for the mirror image for S(a, b) [?]
C. If b [?]
Ci is a type 3 defect in (A, B, C) then we also say that a cure for this defect is witnessed (in the decomposition) by the end of (Ai , Bi , Ci ).
If a cure for any defect is witnessed then we say that the defect is cured.
LEMMA 14: If m1 , ..., mn is a full decomposition of m then every defect in m is cured in the decomposition.
build a model, i.e.
we have a saturated set of mosaics, then the other mosaics should be in our set too.
For example,-- this is 1.2 below--if we have U (a, b) holding at x < y and neither a nor b true at y then it is clear that there is a point z with x < z < y, a true at z and b true everywhere between x and z.
If there is such a point z and we claim to have a saturated set of mosaics then we should have the mosaics corresponding to the pairs (x, z) and (z, y) as well as (x, y).
Below we will see that we cure defects en masse via a whole sequence of other mosaics rather than just having a pair to cure one defect at a time as in this example.
DEFINITION 7: A defect in a mosaic (A, B, C) is either 1. a formula U (a, b) [?]
A with either 1.1 b 6[?]
B, 1.2 (a 6[?]
C and b 6[?]
C), or 1.3 (a 6[?]
C and U (a, b) 6[?]
C); 2. a formula S(a, b) [?]
C with either 2.1 b 6[?]
B, 2.2 (a 6[?]
A and b 6[?]
A), or 2.3 (a 6[?]
A and S(a, b) 6[?]
A); or 3. a formula b [?]
Clph with !b 6[?]
B.
We refer to defects of type 1 to 3 (as listed here).
Note that the same formula may be both a type 1 or 2 defect and a type 3 defect in the same mosaic.
In that case we count it as two separate defects.
A little careful reasoning with several forms of formulas gives us the following: LEMMA 8: If m is a mosaic and b [?]
Clph \ cover(m) then !b is a type 3 defect in m. We will need to string mosaics together to build linear orders.
This can only be done under certain conditions.
Here we introduce the idea of composition of mosaics.
DEFINITION 9: We say that ph-mosaics (A0 , B 0 , C 0 ) and (A00 , B 00 , C 00 ) compose iff C 0 = A00 .
In that case, their composition is (A0 , B 0 [?]
C 0 [?]
B 00 , C 00 ).
It is straightforward to prove that this is a mosaic and that composition of mosaics is associative.
LEMMA 10: If mosaics m and m0 compose then their composition is a mosaic.
LEMMA 11: Composition of mosaics is associative.
Thus we can talk of sequences of mosaics composing and then find their composition.
We define the composition of a sequence of length one to be just the mosaic itself.
We leave the composition of an empty sequence undefined.
DEFINITION 12: A decomposition for a mosaic (A, B, C) is any finite sequence of mosaics (A1 , B1 , C1 ), (A2 , B2 , C2 ), ..., (An , Bn , Cn ) which composes to (A, B, C).
It will be useful to introduce an idea of fullness of decompositions.
This is intended to be a decomposition which provides witnesses to the cure of every defect in the decomposed mosaic.
DEFINITION 13: The decomposition above is full iff the following three conditions all hold:  IV.
S ATISFIABILITY AND RELATIVIZATION In this section we define a notion of satisfiability for mosaics and relate the satisfiability of formulas (which is our ultimate interest) to that of mosaics.
Because mosaics represent linear orders with end points, it is inconvenient for us to continue to work directly with R and because we want to make use of some simple tricks with convergence of sequences in the metric at several places in the proof, we will move to work in the unit interval [0, 1] instead.
If x < y from R then let ]x, y[ denote the open interval {z [?]
R|x < z < y} and [x, y] denote the closed interval {z [?]
R|x <= z <= y}.
Similarly for half open intervals.
One can get a mosaic from any two points in a structure.
DEFINITION 15: If T = (T, <, h) is a structure and ph a formula then for each x < y from T we define mosphT (x, y) = (A, B, C) where: A = {a [?]
Clph|T, x |= a}, B = {b [?]
Clph| for all z [?]
T , if x < z < y then T, z |= b}, and C = {g [?]
Clph|T, y |= g}.
It is straightforward to show that this is a mosaic.
LEMMA 16: mosphT (x, y) is a mosaic.
If T and ph are clear from context then we just write mos(x, y) for mosphT (x, y).
DEFINITION 17: Suppose T [?]
R. Let < also denote the restriction of < to any such T .
We say that a ph-mosaic m is T -satisfiable iff there is some structure T = (T, <, h) such that m = mosphT (x, y) for some x < y from T .
DEFINITION 18: We say that a ph-mosaic is fully [0, 1]satisfiable iff it is mosphT (0, 1) for some structure T = ([0, 1], <, h).
6  Furthermore, if there is I [?]
{1, ..., n}, and structures Si based on [0, 1] such that each mi = mosSi (xi , xi+1 ), then we can assume that for each i [?]
I, Si and T agree on the truth of all formulas in Cl(ps) at all points in [xi , xi+1 ].
Proof: Given the xi and mi we can, via lemma 21, suppose that mi = mosSi (xi , xi+1 ) for some structures Si = ([0, 1], <, hi ) which are already given to us when i [?]
I.
Note that we may use lemma 20 to deduce that each mi for i 6[?]
I and 2 <= i <= n - 1 is satisfiable in the interior ]0, 1[.
Say that each Si = ([0, 1], <, hi ).
Now let T = ([0, 1], < , h) where t [?]
h(p) iff there is i such that xi <= t < xi+1 or t = 1 and i = n and t [?]
hi (p).
We can use a straightforward induction on the construction of a to show that for all i, for all a [?]
Cl(ps), for all t [?]
[xi , xi+1 ], T, t |= a iff Si , t |= a.
The more interesting cases of U and S are similar to the case of U in lemma 20.
Next, we say a little more about satisfiable mosaics and amongst other things, that the set of all such mosaics is closed under composition.
These results will be needed in the main lemma later in the proof but they may also help the reader in developing an intuitive idea of the mosaic concept.
LEMMA 19: Suppose that ps [?]
L(U, S) and that m = (A, B, C) is [0, 1]-satisfiable.
Then |B| is less than the length of ps.
Proof: To see this, note that ps will have at most L = |ps| subformulas.
If B contains at most one of ph or !ph for each of these <= L subformulas ph then B contains at most L formulas.
If B contains both ph and !ph then it is clear that m can not be mos(x, y) for any x < y from [0, 1] and so can not be satisfiable: just consider how ph and !ph can both hold at (x + y)/2.
LEMMA 20: Suppose that we have ps [?]
L(U, S) and that m and n are [0, 1]-satisfiable ps-mosaics which compose.
Then their composition is also [0, 1]-satisfiable.
Furthermore there is a model of both m and n with the mosaics adjacent.
See [12] for the proof.
LEMMA 21: Suppose that we have ps [?]
L(U, S), a structure S, 0 <= x < y <= 1 and m is the [0, 1]-satisfiable ps-mosaic mosS (x, y).
Suppose also that 0 <= u < v <= 1 such that: 0 = u iff x = 0 and v = 1 iff y = 1.
Then there is a structure T such that m = mosT (u, v).
Proof: This is straightforward using any one-to-one, onto, order-preserving map u : [0, 1] - [0, 1] such that u(u) = x and u(v) = y.
Define T = ([0, 1], <, h) from S = ([0, 1], <, g) by t [?]
h(p) iff u(t) [?]
g(p).
Use an induction on the construction of a to show that for all a [?]
Cl(ph), for all t [?]
[0, 1], T, t |= a iff S, u(t) |= a.
Then mosT (u, v) = mosS (x, y).
DEFINITION 22: Suppose that we have ps [?]
L(U, S), and a [0, 1]-satisfiable ps-mosaic m. Then we say that m is initially satisfiable iff there is a structure S and 0 < y <= 1 such that m = mosS (0, y).
We say that m is finally satisfiable iff there is a structure S and 0 <= x < 1 such that m = mosS (x, 1).
The next lemma is useful as it allows us to build a structure in a piecemeal way from parts of structures which each satisfy a mosaic from a composing sequence of mosaics.
Furthermore, the mosaics are still satisfied in the constructed structure.
LEMMA 23: Suppose that we have ps [?]
L(U, S), n >= 1, a sequence 0 = x0 < x1 < ... < xn = 1 and a sequence m1 , m2 , ..., mn of [0, 1]-satisfiable ps-mosaics such that: 1. m1 is initially satisfiable; 2. mn is finally satisfiable; and 3. the mosaics compose, i.e.
for each i = 1, ..., n - 1, end(mi ) = start(mi+1 ).
Then there is a structure T such that for each i = 0, 1, ..., n - 1, mosT (xi , xi+1 ) = mi+1 .
We will now relate the satisfiability of a formula ph to that of certain mosaics.
Obviously, a formula will be satisfiable over the reals iff it is satisfiable over the ]0, 1[ flow.
Furthermore, this happens iff a relativized version of the formula is satisfiable somewhere in the interior of a model over [0, 1].
To define this relativization we need to use a new atom to indicate points in the interior.
Hence the next few definitions.
DEFINITION 24: Given ph and an atom q which does not appear in ph, we define a map * = *phq on formulas in Clph recursively: 1.
*p = p [?]
q, 2.
*!a = !
(*a) [?]
q, 3.
*(a [?]
b) = *(a) [?]
*(b) [?]
q, 4.
*U (a, b) = U (*a, *b) [?]
q, and 5.
*S(a, b) = S(*a, *b) [?]
q.
So *phq (ph) will be a formula using only q and atoms from ph.
LEMMA 25: *phq (ph) is at most 3 times as long as ph.
LEMMA 26: If a <= ph then *a <= *ph.
With the relativization machinery we can then define a relativized mosaic to be one which could correspond to the whole of [0, 1] structure in which q is true of exactly the interior ]0, 1[ and the interior is a model of ph.
DEFINITION 27: We say that a *phq (ph)-mosaic (A, B, C) is (ph, q)-relativized iff 1.
!q is in A and no S(a, b) is in A; 2. q [?]
B and !
*phq (ph) 6[?]
B; and 3.
!q [?]
C and no U (a, b) is in C. Here we confirm that ph is satisfiable over the reals exactly when we can find such a relativized mosaic.
LEMMA 28: Suppose that ph is a formula of L(U, S) and q is an atom not appearing in ph.
Then ph is R-satisfiable iff there is some fully [0, 1]-satisfiable (ph, q)-relativized *phq (ph)mosaic.
Proof: Let * = *phq and let z :]0, 1[- R be any order preserving bijection.
7  Suppose that ph is R-satisfiable.
Say that S = (R, <, g), s0 [?]
R and S, s0 |= ph.
Let T = ([0, 1], <, h) where: 1. for atom p 6= q, h(p) = {t [?
]]0, 1[|z(t) [?]
g(p)}; and 2. h(q) =]0, 1[.
An easy induction on the construction of formulas in Cl * ph shows that T, z -1 (s0 ) |= *ph and so mos*ph T (0, 1) is the right mosaic.
Suppose mosaic (A, B, C) = mos(0, 1) from structure T = ([0, 1], <, h) is a (ph, q)-relativized *(ph)-mosaic.
Thus q [?]
B and !q [?]
A [?]
C. Define S = (R, <, g) via s [?]
g(p) iff z -1 (s) [?]
h(p) for any atom p (including p = q).
As !
* ph 6[?]
B there is some z such that 0 < z < 1 and T, z |= *ph.
It is easy to show that S, z(z) |= ph.
Our satisfiability procedure will be to guess a relativized mosaic (A, B, C) and then check that (A, B, C) is fully [0, 1]-satisfiable.
Thus we now turn to the question of deciding whether a relativized mosaic is satisfiable.
closely at an account of a winning strategy represented in a tree.
LEMMA 30: If m is satisfiable then E has a winning strategy in the game for m. Proof: In fact, we show that if E ever has to fully decompose a satisfiable mosaic then she can play so that A has only satisfiable mosaics to chose from, from then onwards.
By keeping this up E will go on to win.
Suppose x < y are from T = (T, <, h).
Assume that E is to fully decompose the ph-mosaic m = mos(x, y) because it is there at the start of a game or because A has just chosen it.
To continue her winning strategy, E now throws away the other mosaics (if there are any) and considers the types of defects We can always find full decompositions of satisfiable mosaics: the witnesses curing defects are always there.
See the next lemma.
LEMMA 31: Suppose ph [?]
L(U, S) and T = ([0, 1], < , h).
If m = mos(x, y) for some x < y from [0, 1] then there is some sequence x = x0 < x1 < ... < xn-1 < xn = y such that hmos(x0 , x1 ), ..., mos(xn-1 , xn )i is a full decomposition of m. Furthermore, the xi can be chosen so that no xj+1 - xj is greater than half of y - x.
Proof: We will choose a finite set of points from ]x, y[ at which we will decompose mos(x, y).
For each defect d in mos(x, y) = (A, B, C) choose some ud or zd witnessing its cure between x and y as follows.
If d = U (a, b) [?]
A is a type 1 defect then it is clear that there must be ud [?
]]x, y[ with T, ud |= a and for all v [?
]]x, ud [, T, v |= b.
Similarly find ud [?
]]x, y[ witnessing a cure for type 2 defects.
If d [?]
Clph is a type 3 defect in mos(x, y) then it is clear that there is zd [?
]]x, y[ with T, zd |= d. Collect all the ud s and zd s so defined into a finite set and add the midpoint (x + y)/2 of x and y.
Order these points between x and y as x = x0 < x1 < x2 < ... < xn < xn+1 = y.
Note that some points might be in this list for two or more reasons.
It is clear that because of our choice of witnesses, the sequence of mos(xj-1 , xj ) is a full decomposition.
Unfortunately, here we can not show that if E has a winning strategy in the game for a relativised mosaic then the mosaic is satisfiable.
In the similar mosaic-based decidability proof in [13], where we were looking at temporal mosaics over general linear time, it was possible to show a converse result.
By playing many games at once we can use E's strategic plays to gradually build up the details of a linear model of the mosaic.
In fact the model was built as a subset of the rational numbers flow of time.
If we try the same idea with the reals then it is sometimes not possible to work out what is true at an irrational point of time, i.e.
at a gap in the rationals flow of time.
We run into trouble with Dedekind completeness.
In fact, there are  V. T HE MOSAIC GAME In this section we introduce a game for two players.
The game will be used to summarise the organisation of a structured collection of mosaics so that we can effectively find cures for any defects in any mosaic in the collection.
This will correspond to the general mosaic-theoretic idea of a saturated set of mosaics but in this particular proof a set of mosaics does not contain enough structure to allow a PSPACE algorithm to systematically check through it.
DEFINITION 29: For each ph in L(U, S) and each phmosaic m, there is a two-player game called the m-game.
The players, A and E say, have alternate moves.
E has the first move.
E must place a finite sequence of ph-mosaics on the table which, taken in order, form a full decomposition of m. Then, and subsequently, there will be a sequence of mosaics on the table and A's move is to choose one of them.
E must clear the table and present a full decomposition of the chosen mosaic.
Then it is A's turn again.
If E fails to be able to make a legal move then she loses.
If the game continues for o moves then E wins.
A strategy for a player is just a map which specifies possible next moves for the player at each round: given the sequence of moves up until the player's turn in some finite round, the map defines a set of possible moves.
We say that a player plays according to a strategy if the player always selects a move from the set specified at each turn in the play of the game.
We say that the strategy is winning iff the player wins every possible game in which he or she plays according to the strategy.
We will show that the satisfiability of mosaics is closely related to the existence of a winning strategy for E. This is important as it provides a very natural foundation for many possible approaches to reasoning with linear temporal logics.
In [12] we go on to prove our PSPACE result by looking 8  mosaic games which E can certainly win without the mosaic being satisfiable in the reals.
R EFERENCES [1] H. Kamp, "Tense logic and the theory of linear order," Ph.D. dissertation, University of California, Los Angeles, 1968.
VI.
TACTICS FOR THE R EALS The proof in [12] moves away from this simple mosaic game and starts to work with some complicated structures of mosaics.
Although the idea is not fully developed in that paper, these structures actually correspond to certain tactics in the simple mosaic game.
By a tactic we simply mean a temporary rule specifying how E should play as long as A chooses certain mosaics from the table.
There are three tactics introduced.
The mirror image tactics lead and trail allow mosaics which can be fully decomposed in terms of themselves along with some other mosaics.
In a game setting this is a legitimate way for the game to be won: the player who has to keep providing full decompositions can keep supplying a full decomposition hmi [?]
s for m if the other player keeps choosing m to be decomposed.
The tactic trail corresponds to an operation in [18] for building a new linear order from a simpler one by laying o copies of it one after the other towards the future.
The tactic lead corresponds to laying the copies towards the past.
DEFINITION 32: Suppose ph [?]
L(U, S), m is a ph-mosaic and s is a non-empty sequence of ph-mosaics.
Then, we say that m is fully decomposed by the tactic lead(s) iff hmi [?]
s is a full decomposition of m. We say that m is fully decomposed by the tactic trail(s) iff s [?]
hmi is a full decomposition of m. The other tactic is more complex.
It is called the shuffle tactic and corresponds to having a relatively dense mixture of copies of a finite set of mosaics satisfied within an interval.
We do not have space to define it here.
The proof shows roughly that a mosaic m is satisfiable iff E has a winning strategy in the mosaic game for m only using trail, lead and shuffle tactics.
[2] A. Pnueli, "The temporal logic of programs," in Proceedings of the Eighteenth Symposium on Foundations of Computer Science, 1977, pp.
46-57, providence, RI.
[3] Y. Kesten, Z.
Manna, and A. Pnueli, "Temporal verification of simulation and refinement," in A decade of concurrency: reflections and perspectives: REX school/symposium, Noordwijkerhout, the Netherlands, June 1-4, 1993.
Springer- Verlag, 1994, pp.
273-346.
[4] J. P. Burgess and Y. Gurevich, "The decision problem for linear temporal logic," Notre Dame J.
Formal Logic, vol.
26, no.
2, pp.
115-128, 1985.
[5] J. Halpern and Y. Shoham, "A propositional modal logic of time intervals," in Proceedings, Symposium on Logic in Computer Science.
IEEE, Boston, 1986.
[6] R. Alur and T. A. Henzinger, "Real-time logics: Complexity and expressiveness," Inf.
Comput., vol.
104, no.
1, pp.
35-77, 1993.
[7] D. M. Gabbay, I. M. Hodkinson, and M. A. Reynolds, "Temporal expressive completeness in the presence of gaps," in Logic Colloquium '90, Proceedings ASL European Meeting 1990, Helsinki, ser.
Lecture Notes in Logic, J. Oikkonen and J. Vaananen, Eds.
Springer-Verlag, 1993, no.
2, pp.
89-121.
[8] A. Rabinovich, "On the decidability of continuous time specification formalisms," Journal of Logic and Computation, vol.
8, pp.
669-678, 1998.
[9] D. M. Gabbay and I. M. Hodkinson, "An axiomatisation of the temporal logic with until and since over the real numbers," Journal of Logic and Computation, vol.
1, no.
2, pp.
229 - 260, 1990.
[10] M. Reynolds, "An axiomatization for Until and Since over the reals without the IRR rule," Studia Logica, vol.
51, pp.
165-193, May 1992.
VII.
PSPACE The mosaic ideas above give us an EXPTIME decision prcedure for RTL.
We need to check iteratively that mosaics have full decompositions, and that the mosaics in those do also, and so on, and so on.
These decompositions can be recorded and checked in tree-shaped structures.
In [12], this process is modified into a PSPACE procedure by showing, in a rather long and complicated proof, that we can assume a depth and width restriction on thi stree data structure.
See [12] for details.
The tree shaped decompositions also seem to be amenable to a tableau-style approach but that is left as future work.
[11] A. Sistla and E. Clarke, "Complexity of propositional linear temporal logics," J. ACM, vol.
32, pp.
733-749, 1985.
[12] M. Reynolds, "The complexity of the temporal logic over the reals," accepted for publication subject to minor corrections, 2009 version available at http://www.csse.uwa.edu.au/~mark/research/Online/CORT.htm.
[13] ----, "The complexity of the temporal logic with "until" over general linear time," J. Comput.
Syst.
Sci., vol.
66, no.
2, pp.
393-426, 2003.
[14] I. Nemeti, "Decidable versions of first order logic and cylindric-relativized set algebras," in Logic Colloquium '92, L. Csirmaz, D. Gabbay, and M. de Rijke, Eds.
CSLI Publications, 1995, pp.
171-241.
ACKNOWLEDGMENT The author would like to thank the Australian Research Council support of the research and the organisers of TIME 2009 for the invitation to speak.
[15] D. Gabbay, I. Hodkinson, and M. Reynolds, Temporal Logic: Mathematical Foundations and Computational Aspects, Volume 1.
Oxford University Press, 1994.
9  [16] M. O. Rabin, "Decidability of second order theories and automata on infinite trees," American Mathematical Society Transactions, vol.
141, pp.
1-35, 1969.
[17] M. Marx, S. Mikulas, and M. Reynolds, "The mosaic method for temporal logics," in Automated Reasoning with Analytic Tableaux and Related Methods, Proceedings of International Conference, TABLEAUX 2000, Saint Andrews, Scotland, July 2000, ser.
LNAI 1847, R. Dyckhoff, Ed.
Springer, 2000, pp.
324-340.
[18] H. Lauchli and J. Leonard, "On the elementary theory of linear order," Fundamenta Mathematicae, vol.
59, pp.
109- 116, 1966.
10