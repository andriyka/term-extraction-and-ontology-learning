Logic Programming with Temporal Constraints * E. Schwalb  L. Vila  Information and Computer Science Dept.
University of California, Irvine  Abstract  Unfortunately, Datalog,s is not applicable to AI because it does not support indefinite temporal information, namely disjunctive relations between temporal occurrences.
In this work we combine logic programming and temporal constraint processang techniques.
We propose TCLP, which augments logic programs with temporal constraints.
Known algorithms for processing disjunctions in Temporal Constraint Networks are applied.
We identify a decidable fragment called, Simple TCLP, which can be viewed as extending Datalog with limited functions to accommodate intervals of occurrence and temporal constraants between them.
Some of the restrictions introduced b y Simple TCLP are ouercome by a syntactic structure which provades with the benefits of reification.
The latter allows quantification on temporal occurrences and relataon symbols.
We propose TCLP, which supports a new constraint class based on Temporal Constraint Satisfaction Problems.
The performance benefits can be obtained whenever the temporal constraints are disjunctive.
In that case, constraint propagation results in prunning the search space and reduces the number of dead-ends encountered.
Our proposal differs from traditional extensions of logic with temporal data in that we introduce, in addition to the usual temporal sort, a new sort called tokens.
The latter was shown to allow obtaining the benefits of reification while avoiding the technical complications of reification [6].
1 Introduction Representing time is central to both the databases and AI communities.
In both the information includes temporal attributes which indicate at what time the assertions are true.
In AI, the goal of temporal languages is to describe and reason about a changing world.
Most of current research is focused on either general theories of time or restricted computational models which involve temporal constraints.
Many temporal theories were proposed, among which [12, 1, 16, 11, 5, 2, 19, lo].
As these languages are based on first order logic, they are sufficiently expressive for representing general knowledge however answering queries is in general undecidable.
This motivated identifying many decidable subclasses and analizing their complexity [lo].
Independently, the computational model of Temporal Constraint Satisfaction Problems, abbreviated TCSP, was investigated by [7, 17, 9, 14, 131.
Although it is supported by efficient algorithms, it cannot process combinations of temporal and non-temporal sentences.
In the database community, the classical approach is representing relations explicitly, that is, by listing their tuples.
Clearly, relations which have infinite sets of tuples cannot be represented explicitly.
As an implicit representation of finite relations, it is common to use function free logic programs called Datalog.
To provide with a finite implicit representation of infinite relations, Datalog,s was proposed [3], which is an ex-  We identify a decidable fragment called Simple TCLP which allows non-constraint predicates to specify at most a single argument of the token sort.
Based on results obtained for Datalog,s, we show that the least Herbrand model of Simple TCLP programs admits a finite representation on which queries can be answered efficiently.
To overcome the syntactic restriction posed by Simple TCLP, we propose a syntactic structure which provides with the benefits of reification as it allows quantification over temporal occurrences and relation symbols.
We propose to model the world as a relational database.
This requires two additional sorts: relation, attribute sorts.
Each relations describe classes of objects, events and actions.
Instances of these classes are tuples in these relation.
Tuples may specify null (or unknown) values and are associated with either time points or time intervals.
Simple TCLP programs are used as an implicit representation of this possibly infinite relational database.
The paper is organized as follows: Section 2 presents the basic language.
Section 3 presents the conputational benefits of introducing temporal constriants.
Section 4 presents a decidable fragment which admits a finite representation.
Section 5 presents the  tension of datalog with a restricted class of functions.
syntactic structure that provides with the benefits of reification.
*We would like to thank Rina Dechter for fruitful discussions.
51 0-8186-7528/96 $5.00 0 1996 IEEE  Table 1: (b) The 13 qualitative Interval-Interval relations.
point-interval relations (X is a point and Y is an interval).
(a) The  5 qualitative  Relation  Relation  2  Symbol  x  beSxe  x  starts Y  x  huing  x  finiahes  x  attcrY  Y  Y Y  b  Inverse bi  Example  I  x  e  qual  Y m  rrd  X wedaps Y  0  n  d  m  lung  f  fi  x  starts  Example  b  Xnn9.s-i  x  Y Y  SI  X finishes Y  fi  f  of a single disjunct from each constraint.
A more effective technique performs temporal constraint propagation which reduces the number of disjuncts [15].
We consider metric constraint of the form X j -Xi E I1U.
.
.UIk where 11, .
.
, I , is a set of disjoint intervals.
The corresponding logic program for this constraint consists of the rules: e  (Cij +-  xj -  xi E I I ) , .
.
.
, (Cij  +x j  -  xi E I k )  For this class of constraints, algorithm LPC, briefly described below, is capable of removing redundant disjunctions [15].
We propose Temporal Constraint Logic Programs, TCLP, that are Logic Programs augmented by the following set of temporal constraints:  0  x  di  We use the following set of distinguished temporal sorts S = { P , I , P T , IT, D } : P is a set of time points, 1 is a set of time intervals, P T is a set of point time tokens and I T interval time tokens and D is the temporal domain assumed to be the set of natural numbers.
We use two distinguished function symbols: point : P T ++ P and interval : P I ++ I .
The set of constraint predicates is composed of the metric Point relations ( P x P ) , qualitative Point-InterwaZ relations ( P x I ) and the qualitative Interval relations ( I x I ) .
0  before Y  d  The Language  Inverse  Symbol  x  Temporal Constraint Networks  3.1  A Temporal Constraint Satisfaction Problem (TCSP) .
.
.
, X,, having raconsists of a set of variables XI, tional domains, each representing a time point.
Each constraint C is a set of intervals  disjunction of metric point relations (namely Xi Xj E [a,V) 114, 131 disjunction of point interval relations (table 1 a) ~ 3 1  A unary constraint Ci restricts the domain of the variable Xi to the given set of intervals  disjunction of interval relations relations (namely the Interval Algebra in table l b ) [l]  The semantics is defined as follows: For the satisfaction relation of the temporal constraints we use the usual evaluation rules given in [l, 14, 131.
For the non-constraint atoms we use the standard evaluation rules of logic programs.
The program characterized is by its unique least Herbrand model.
A binary constraint Cij over Xi,Xj restricts the permissible values for the distance X j - Xi;it represents the disjunction  Cij  !Ef  (a1  5 Xj-Xi 5 b l ) U .
.
.U(a, 5 Xj-Xi 5 b,).
All intervals are assumed to be open and pairwise disjoint.
3  Performance Benefits  A tuple X = ( 2 1 , .
.
.
, 2 , ) is called a soludion if the assignment XI = $1, .
.
.
, X, = zn satisfies all the constraints.
The network is consistent iff at least one solution exists.
The goal of combining logic programming and temporal constraints is to improve the performance of resolution algorithms by augmenting them with specialized constraint propagation algorithms.
In the presence of disjunctive constraints, existing search mechanism requires testing consistency of every possible selection  Definition 1 : [ composition & loose intersection ] Let T = { 1 1 , 1 2 , .
.
.
, I r } and S = { J l , J 2 , .
.
., J,} be  52  A Simple Fragment  4  Algorithm Loose Path-Consistency (LPC) 1. input: N  We investigate a restricted class, called Simple TCLP, in which there are no free-variables (i.e.
only token and data variables) and restricted such that functions repeat and atoms specify at most a single token argument.
N +- NI' is section applies results obtained by [3,4]to Simple Compute N' by assigning T:j = nvk(Ctk 18 5.
C k g ) , for a l l z which accept binary tempora1 'onstraints On 6.
Compute N " by loos,=ly intersecting T:; = C,,dT{j,for 7. until 3 i , j (Ti; = 4) ; inconsistency, or 4.1 Token Succession or V i , j 1T:;l = lC,jl; no interval removed.
The central notion that enables us to obtain our 8. if 3 i , j (Til = 4) then output "inconsistent."
results is the token succession.
Intuitively, instead of else output: N " .
indexing facts with time points which are linearly ordered we index facts bv tokens which need not have any temporal ordering.
Unary functions (used in The Loose Path-Consistency (Lpc) algoFigure Datalogns as SUCCeSSOr functions) are used here to obrithm.
tain successors of tokens.
These functions define the succession ordering of tokens which is orthogonal to their temporal ordering.
two constraints.
The comoosition of T and S. denoted by T @ S , admits only vdues r for which there exists Definition 2 : Given a set of unary functions t E T and s E S such that r = t +- s. The loose f i , .
.
.
, f k mapping token symbols to token symbols, intersection, T a S consists of the intervals { I ; , .
.
.
, I:} the domain K ( f 1 , .
, .
, fk) of token terms is as follows: such that V i I: = [La,U;] where [ L i ,Vi]are the lower and upper bounds of the intersection lan S. 2.
3.
4.
N" + N  ':  .
.
,6) and  t t o ,___, o E K(f1,.
w  The number of intervals in Cii is not increased by  k times  ttil,...,i k E K ( f 1 , .
.
.
, f k ) fj(ttil,...,i k ) = ttil,.+j+l ,...,il, E  I  For Simple TCLP the set of ground token terms is  lc(.fl,.
.
., f k ) .
4.2 Restrictions We make a number of restrictions and assumptions which originate in Datalogns.
A TCLP is said to be simple if it complies with the following restrictions:  Algorithm LPC is presented in Figure 1.
The network N' is a relaxation of N and therefore loosely intersecting it with N results in an equivalent network.
At every iteration if LPC (except the first and the last) at least one interval is removed.
This allows us to conclude that:  0  Theorem 1 : Algorithm LPC computes an equivalent network in polynomial time.
Example 2 : Consider the constraints:  - xo  X2 - X i X3 - Xo X3 - X i X3  - X2  E E E E E  [lo, 201 U [loo, 1101  Rules do not contain ground terms.
Such terms can be eliminated by introducing additional predicates.
0  Rule bodies are not empty.
0  X3 -Xo  E E E E  X3  -Xi  EUR  x 3 -x2  E  X2 - X o X z -XI  Equalities are eliminated by replacing variables in a class of equated variables with a single representative.
Rules are range restricted.
After elimination of equalities, a variable is limited if it appears in a literal in the body of the rule.
After 3 iterations, algorithm LPC terminates with the network:  -xo  The domains of non-token variables are finite.
0  [2O, 401 U [loo, 1301 [80,100] U [150, 1601 U [180,190] [30,40] U [130,150] [50,70] U [IlO, 1201 U [130,140] U [ISO, 1901  x 1  .
.
, fk)  In other words, tt;l,..,,;k is obtained by applying, for all j E [l,k ] , fj on tto ,.,.,0, ij times.
Example 1 : Let T = {[1,4],[10,15]} and S = {[3,11], [14,19]}.
Then T a S = {[3,4], [lo, 15]}, S a T = {[3,11,[14,15]} while S n T = ([3,41,110,111,[14,151 .
XI  qfl,.
0  [10,20] [30,50] [20,30] [150,160] [130,140] [IlO,l20]  53  Rules are normal.
A TCLP rule r is semi-normad if every atom in r contains at most 1 token variable, namely every predicate P(tt1,.
.
.,it,, d l , .
.
.
,d k ) is such that m = 1.
A semi-normal rule T is normal if every non-ground functional term in.r is of depth at most 1.
This restriction can be lifted by the syntactic structure described below.
is complete.
Functions must specify a single argument which is a token variable, but the number of variables of other sorts is not restricted.
Given a program P = (2U 0)where 2 is a set of rules and D is a set of ground facts, answering a query Q amounts to deciding consistency of the formula which consists of 2 U D U TQ.
In the following we assume that Q is grounded.
In this case, the answer to the query is 'Yes' iff the formula 2 U D U -& is unsatisfiable.
Define the following parameters:  4.3 Finite Representation The general notion of finite representation of infinite relations relies on the notion of homomorphac mapping H. A finite representation of a logic program P is a homomorphism from the least Herbrand M p onto a finite structure M;.
The existence of such an homomorphism guarantees that the finite structure is equivalent to the least Herbrand model.
0  k is the maximal arity of predicates in 2 and D ;  Theorem 2 : For every Szmple TCLP P there exzsts a homomorphasm mappang M p to a Jinate structure, namely ats least model M p as finitely representable.
e  d is the number of different data constants in D ;  0  c  We illustrate this feature by presenting instances from two seemingly similar classes of programs: One is a class of CLP programs which have no finite representation.
The other is a class of TCLP programs which admits a finite representation.
0  h is the depth of the single functional term in Q (if h = 0 there is no such term);  e  t, is the number of token predicates of arity i.  Theorem 3 : m-bounded bottom-up evaluation of a yes/no (closed) query as sound and complete f o r m = m m ( c ,h ) 25, s = t,d2-1 ,  Consider the following simple program, given in [4], for which there is no finite representation:  I+  e q 0,O).
e q T 1 , T + 1)  +-  +  eq(T,T)  5  The reason no finite representation exists is that no homomorphism exists.
Assume the contrary, then as shown in [4] the existence of a homomorphism implies the existence of a period 1 such that for every predicate P(T1,Tz) ++ P(T1 I,Tz) ++ P(T1,TZ I ) ++ P(T1 + l , T2 +1) .
Thus the truth value of eq(T,T ) and of eq(T + I , T ) must be the same for every grounding of T, which is a contradiction.
Fortunately, TCLP programs using the predicate E q ( t t l ,t t z ) admit finite representations because Eq(tt1,ttz) differs from eq(tt1,ttZ):  Eq(tt,,tt,)  +-  c,"=,  Modeling a Changing World  Often it seems that modeling the world poses difficulties caused by limited expressiveness of the language used.
This issue was addressed implicitly in [1111when discussing representation of incomplete descriptions of events.
Here, Simple TCLP appear to be too restricted.
We show that Simple TCLP are sufficiently expressive for AI applications.
We propose a syntactic structure that allows to obtain the benefits of reification.
First, we describe some general problems through an example and thereafter we provide with a solution.
Consider the statement "John and Fred were roommates, but now, John owes Fred money, hates him and threatens t o kill him.
John unloaded his gun 10 minutes ago, but later he loaded it and now the gun is pointing at Fred".
Consider the queries:  +  +  is the maximum depth of a ground token term in D (if c = 0 there is no such term);  (begin(tt,)- begin(tt,) E [O,O]), (end(tt,)- end(ttJ)E [O, 01).
The truth value of Eq(tta,tt,+l) may be false because there is no restriction in the language that requires that begin(tti) = begin(?t,+l)or end(tt,) = end(tt,+r).
Thus, no contradiction is derived.
1.
"What is the relationship between John and Fred now ?".
The answer is "John owes money, hates and threatens Fred".
The following TCLP program, given in [4], uses a full fledged binary token function and thus does not admit a finite representation:  2.
"What is the status of the gun now 7".The answer is "the gun is loaded and pointing at Fred."
p(tt0).
P ( $ ( t t , t i > ) P(tt).
3.
"When did the gun get loaded ?".
The answer is "John loaded the gun between 10 minutes ago and now.
+  4.4 Decidability In general, it is not clear whether the existence of a finite representation implies decidability.
For Simple TCLP, as for Datalog,s, due to their periodic nature, bottom up evaluation with a finite depth bound  A possible way to represent (in first order logic) the above temporal information is to use the following predicates: Loaded(Gun,t ) , PointedAt(X,Y ,t ) , 'In section 8 of that paper.
54  Owe(X,Y ,t ) , Hate(X, Y ,t ) and Threaten(X,Y ,t ) where t is a temporal qualification'.
Clearly, if we are to represent the queries described above in first order logic, we need a different set of predicates.
This is because in first order logic it is not possible to quantify over predicate symbols, as seems to be required for representing the above three queries.
5.1  specify that John is a male and list his salary for the year 1980 we could use the relations:  I  I  P e r snn.
ID  Began  NO 1/1/80  Temporal Data Model  End 12/31/80  SalaryPointer Name Sex John Male PI -  John's 1980 Salary  We define the token and database structures of we use to represent the world.
In the next section we show that these structure can be described by Simple TCLPs.
I I D I Begin I End  11 SalaryPointer I Sadary  Definition 3 : [ tokens ] A data value is a pair (a, U), where a is a symbol describing an attribute and v is a symbol describing a constant which is the value assigned to this attribute.
There are two types of time tokens: instant and durative.
An instant time token is a triplet (ntt,t , V ) where ntt is a symbol specifying its name, t is a rational constant specifying the time point associated with tt and V is the set of data values.
A duratave time token tt is a quadruple (ntt,tl,t2,V ) where ntt is a symbol specifying its name, tl and t 2 are rational constants specifying the the beginning and end time points of the interval associated with tt and V is the set of data values.
5.2  Example 3 : To specify that 'the gun was loaded at 9:00 and unloaded at 9:lO we use two instant tame tokens whose set V specifies a single data value:  Relation, Member and Attribute Predicates  Using the methodology described above, the world can be modeled by a relational database defined over a finite set of relation and attribute symbols.
To describe this database using Simple TCLP we need only three predicates: "Relation","Member"and "Attribute", and three basic types of variables: relation, attribute and token names.
The predicate "Relation" has two arguments, Relation(r, s ) where r is a relation name and s is a variable which specifies a set of attribute names3; this predicate evaluates to true iff the scheme of the relation r subsumes s. The predicate "Member" has two arguments, Member(t,r ) where r is a relation name and t is a token name; this predicate evaluates to true iff the tuple t is a member of the relation r .
The predicate "Attribute" has three argumcnts Attribute(t, a , U) where t is a token name, a is an attribute name and v is a constant which is the value of a ; this predicate evaluates to true ifEUR the attribute a of tuple t evaluates to U.  I  N 1 , 9:00, { Loaded, true)} N 2 , 9:10, { Loaded, false)  1  We model the world using a possibly infinite set of Time Tokens organized as a possibly infinite relational database.
A class, described by a relation, is a collection of objects, events or actions which have the same set of attributes.
A similar approach was proposed in [ll].
Definition 4 : [ databases ] A tuple is an instant or a durative time token whose set of data values V is finite.
A token relation is a possibly infinite) set of time tokens and has three istinguished attributes called ID, Begin and End, that specify unique token names and the beginning and end time points of tokens respectively.
If a tuple specifies an instant time token the values assigned to the attributes Begin and End are equal.
A token database is a finite set of relations.
6  The predicates Relation, Member and Attribute specify at most a single token argument and thus can be used in Simple TCLP programs.
Example 4 : We might have a relation 'person' describing people, with the attributes 'name', 'sex', 'eye-color', 'hear-color' and 'salary'.
In this relation, each tuple describes a person by specifying his/her name and the values of some of the attributes.
To  5.3 Sample Queries We discuss the three queries presented above.
The first query requires to compute the set of relations that 3We abuse the notation: the domain of this variable (of a new sort) is the set of all the possible subsets of attributes.
'or a state, as in situation calculus.
55  [7] A. Gerevini, L. Schubert, and S. SCHAEFFER.
hold now between John and Fred:  I  {r,  Temporal reasoning in timegraph 1-11.
SIGART bulletin, 4(3):T1-T4, 1993.
3tt, Member(tt,,r,) A Atti*ibute(tt,, Personl, John) A Atti=ibute(tt,,Person2, Fred) A Dur*ing(now,tt,) }  J .
Jaffar and M. J .
Maher.
Constraint logic programming: A survey.
Journal of Logic Programming, (to appear), 1996.
= { Owes, Hates, Threatens }.
H. Kautz and P. Ladkin.
Integrating metric and qualitative temporal reasoning.
In Proc.
AAAI'SI, pages 241-246, 1991.
The answer to the second query is given by the set {(uz,uc)  I  3tt, Member(tt,,Gun) A Attribute(tt,, a,, v+) A During(now,tt,)}  M. Koubarakis.
Foundations of Temporal Constraint Databases.
PhD thesis, National Technical University of Athens, Athens, Greece, 1994.
= { (Loded,true), (Pointed,Fred) }  R .
Kowalski and M. Sergot.
A logic-based calculus of events.
New Generation Computing, 3, 1986.  namely we quantify over attribute (or fluent) names.
D. McDermott.
A temporal logic for reasoning about processes and plans.
Cognitive Science, 6:101-155, 1982.
Finally, the answer to the third query is given by the set {tt I Member(tt, Load)}.
6  I. Meiri.
Combining qualitative and quantitative constraints in temporal reasoning.
In Proc.
AAAI'SI, 1991.
Conclusion  General Logic Programs were augmented with a class of temporal constraints supported by Temporal Constraint Networks.
Performence benefits are obtained in the presence of disjunctions using known constraint propagation algorithms.
A decidable fragment which admits a finite representation was identified.
Some of the restrictions introduced by the decidable fragment are overcome by a syntactic structure which provides with the benefits of reification while avoiding the technical complications of reification.
In particular, the proposed syntactic structure allows quantification on temporal occurrences and relation symbols.
R.Dechter, I.Meiri, and J.Pear1.
Temporal constraint networks.
In Proc.
KR'89, pages 83-93, 1989.
E. Schwalb and R. Dechter.
Processing disjunctions in temporal constraint networks.
Artificial Intelligence, (to appear) 1997.
Y. Shoham.
Reasoning about Change: Time and Causation from the Standpoint of Artificial Intelligence.
The MIT Press, 1988.
P. van Beek.
Reasoning about qualitative temporal information.
Artificial Intelligence, 58:297326, 1992.
References J .
Allen.
Maintaining knowledge about temporal intervals.
Communications of the ACM, 261832843, 1983.
P. van Hentenrick.
Constraint Satisfaction in Logic Programming.
MIT Press, 1989.
L. Vila and H. Reichgelt.
The token reification approach to temporal reasoning.
Artificial Intelligence, (to appear) 1996.
F. Bacchus, J. Tenenberg, and J .
Koomen.
A non-reified temporal logic.
In Proc.
KR'89, pages 2-10, 1989.
J .
Chomicki.
Depth-bounded bottom-up evaluation of logic programs.
Journal of Logic Programming, 18:68-81, 1995.
J .
Chomicki.
Finite representation of infinite query answers.
A C M Transactaon on Database Systems, (to appear), 1996.
A. Galton.
A critical examination of Allen's theory of action and time.
Artificial Intelligence, 42:159-188, 1990.
A. Galton.
Reified temporal theories and how to unreify them.
In Proc.
IJCAI'SI, pages 11771182, 1991.
56