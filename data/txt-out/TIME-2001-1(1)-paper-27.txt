Navigating through Multiple Temporal Granularity Objects Elisa Bertino'  Elena Ferraril  Giovanna Guerrini2  'DSI - Universith degli Studi di Milano - Italy {bertino,ferrarie,merloisa}@dsi.unimi.it Abstract  2DISI - Universith di Genova - Italy guerrini @disi.unige.it  by its components.
This access modality can be combined with the query-based (e.g., SQL-like) access.
Thus, conditions in a query can be imposed on the nested properties, denoted by path expressions, of the queried objects.Most of the temporal object-oriented query languages do not consider navigational acces to data .
Temporal path expressions [ 1,7] are obtained as an extension of classical path expressions of object-oriented languages, in that for each property access a time can be specified, in addition to the property name.
In this paper, the notion of temporal path expression is extended to a multigranularity context.
Thus, for each property access a set of granules has to be specified in order to access the property.
A specific set of granules can be denoted either explicitly or implicitly.
To explicitly denote a set of granules we refer to the notion of temporal element.
To symbolically denote a set of granules we use temporal expression, which extends the notion of temporal expression presented in [l], which has been in turn inspired by the one proposed by Gadia and Nair in [7].
The paper is organized as follows.
In Section 2 the temporal multi-granularity reference object model is presented.
Section 3 presents how multi-granularity temporal values can be combined and compared, and the syntax and semantics of temporal expressions.
Section 4 presents temporal path expressions.
Finally, Section 5 concludes the paper.
Managing and relating temporal information at different time units is an important issue in many applications and research areas, among them temporal object-oriented databases.
Due to the semantic richness of the objectoriented data model, the introduction of multiple temporal granularities in such a model poses several interesting issues.
In particulal; object-oriented query languages provide a navigational approach to data access, performed via path expressions.
In this paper we present an extension to path expressions to a multi-granularity context.
The syntax and semantics of the proposedpath expressions areformally defined.
1 Introduction Managing and relating temporal information at different time units is an important issue in many applications and research areas, among them temporal databases.
Some interesting issues arise in extending a database model to store and query data with multiple temporal granularities [3].
In particular, the introduction of multiple temporal granularities in an object-oriented data model poses several interesting issues, due to the semantic richness of such a model.
Most of the temporal object-oriented data models proposed so far do not deal with temporal granularities.
The only ones dealing with temporal granularities [5, 12,13,15] support multiple temporal .granularities as extensions to the set of types of the temporal model.
However, the specification and management of different granularities, e.g., how to convert from a granularity to another, is completely left to the user.
* Object-oriented database systems provide, in addition to traditional query languages, a navigational approach to data access.
Given an oid, the system directly accesses the corresponding object and navigates through objects referred to  2 Preliminaries: The Reference Temporal Object Model In this section we introduce the temporal object model we refer to throughout the paper [9, 113.
We adopt the classical notion of temporal granularity [3].
Given a time domain (lN,<)2 and an index set I S , a granularity G is a mapping from ZS to 21N such that ( i ) if i < j and G(i) and G(j) are non-empty, then each element of G ( i ) is less than all elements of G(j) and (ii) if 'N is the set of natural numbers and represents the set of time instants, and 5 is the order on N.  'An exception is represented by a previous work of ours [lo] dealing with expressions involving data with multiple granularities.
0-7695-1 107401 %10.000 2001 IEEE  Isabella Merlo'  147  i < IC < j and G ( i )and G ( j )are non-empty, then G ( k )is  with respect to the finer than relation~hip.~ Thus, we now formalize the notion of conversion of a temporal interval and a temporal element from a granularityto another.
non-empty.
Intuitively, a granularity defines a countable set of granules, each granule G ( i )is identified by an integer.
The set of granularities is denoted by 6.
The usual collections days, months, and weeks are granularities.
For each non-empty granule, we use a "textual representation", termed as label.
For example,days are in the form mmlddlyyyy.
By contrast, when we refer to a generic granularityG and an index i, 1 denotes the label corresponding to the ith granule of G. When we refer to usual labels, such as the ones for days, il denotes the index corresponding to the granule denoted by label 1.
A granularity G is said to befiner than a granularity H [3], denoted G 3 H, if for each index i, there exists an index j such that G ( i ) H ( j ) .
3 For example, days 5 months.
The finer than relationship will be used to evaluate path expressions involving several granularities.
We extend now the notion of temporal interval [8] and temporal element [6] to a multi-granularitymodel.
Definition 3 (Conversionof a Temporal Interval).
Let H E G be a granularity and i, j E ZS be two indexes such that i 5 j .
G ( [i,j]H , denotes the conversionof the temporal interval [i,:iIHto granularity G. G ( [ i , j I H )= [h, kIG such that Ud1K3 H ( P ) 2 Uh<p<k G(P) and a h ' , k'IG such that U K P < jH ( P ) 2 U h Y p < k ' GYP) 2 UhSp<k G(P).
0  p  Definition 1 (Temporal Interval).
Let G E 6 be a granularity and i, j E ZS be two indexes such that i 5 j .
Then [i,jlG= {G(IC)I i 5 k 5 j , k E ZS} is called temporal interval, with respect to granularity G. 0 Definition 2 (TemporalElement).
Let G E G be a granularity, then every subset of the set of granules associated to G, { G (i) I i E I S } ,is called temporal element with respect 0 to granularityG.
For instance, {months(i) 1 i E ZS and io1/1999 5 i 5 i12/1~9~} is a temporal element representing the set of the months of year 1999.
Every temporal element can be represented as a finite union of intervals.
That is, let [ i l , j 1 l G , .. .
, [in,j,IG be temporal intervals.
represents the tempoThen, [i1,jlIGU .
.
.
U [i,,j,]G ral element which includes all the granules included in i07/1999]months U each ir~terval.~For instance, [io1/1999, [i10/1999, i12/lg99]months represents a temporal element.
In what follows temporal elements will be frequently denoted through the symbol T G where G is the granularity - of the temporal element.
The set of all temporal elements with respect to a granularity G is denoted by 'TECEM G ; in addition, 'TECEM = UGEGT E C E M G .
In [ 6 ] ,where temporal elements are subsets of the time domain, it is proved that the set of all temporal elements is closed under union, intersection, difference, and complementation and thus forms a boolean algebra.
Such-a result similarly applies to 'TECEMG.
However, we often need to apply these operations to temporal elements at different granularities.
In this case the sets are first converted to a common granularity: the greatest lower bound (91b) of their granularities 3The symbol "<" denotes the anti-reflexwe finer than relationship.
4A granule itself is obviously a temporal element.
148  If G = H, obviously G ( [ i , j l G ) = [i,jlG.
The conversion can be applied if either G 4 H (downward conversion) or H 4 G (upward conversion).
For instance, days( [i1995, ~ ~ o o o ] =~ ~ ~ ~ ~ ) [i01/01/1995,i31~12~2000]days is a downward conversion, whereas Yeamol/ol/l995, i31/12/20001days) = [i1995, i2000]yearsis an upward conversion.
The conversion of a temporal element TH is computed by repeatedly applying the conversion to each temporal interval composing the temporal element.
In what follows, given a set of granularities { G I , .
.
.
,G,}, gZb(G1,.
.
.
,G,) denotes the granularity which is the greatest lower bound of G 1, .
.
.
,G, in 6 with respect to the finer than relationship.
Similarly, Zub(G1 , .
.
.
,G,) denotes the lowest upper bound.
We introduce now some notations.
Given an interval [i,jlG, min([i,jlG) denotes the lower bound i, whereas maz([i,jIG) denotes the upper bound j .
In addition, we define a projection operation II(T G , n), that takes as input a temporal element Y and a natural number n. ll orders the elements in TGin increasing order, with respect to their upper bound, and returns the n-th interval in the ordering.
If I TG 1;s n,6 lI(TG,n) is undefined.
We can now introduce the notion of temporal types related to different granularities.
We refer the interested reader to [2,9,11] for a detailed description of the reference model.
In our model object types can be defined through classes.
'We consider a classical notion of class [4] where, in order to store temporal information, the type of a property can be a temporal one.
Figure 1 presents an example of a temporal object database schema involving multiple granularities.
We assume that a set 7~of types is given.
Such set includes class and literal types.7 For each type r E TRand granularity G E G, a corresponding temporal type, temporalG(r), is defined.'
For instance, tempoTal,o,ths(Person) is an example of a temporal 5Note that two granulanbes in E are not guaranteed to have a glb in E. Here and in the remainder of this paper the approach is that two granulantles can be "used together" only if they adrmt a glb in 4.
6Given a genenc set S, I S I denotes the cardinality of S. 7Example of types belonging to 'TRare short,Person,and so on.
*Note that temporal types cannot be nested.
class Course {...; attribute temporalyears (short) room; relationship temporalyears (Professor) Tprof inverse Professor::teaches; relationship temporalsemeste,, (Researcher) T-assist inverse Researcher::assists; relationship temporalyears (set<Student>) P-stud inverse Student::attends;} class I-Course extends Course {ref relationship temporalyearS(Researcher)T-assist inverse Researcher::assists; ref relationship temporalday,(set<Student>)P-stud inverse Student::attends count-students; attribute temporalweek,(string) lab;} class E-Course extends Course {ref relationship temporalmonths(Researcher) T-assist inverse Researcher::assists main; attribute temporalmonth,(string) lab;} class T-Course extends Course {ref attribute temporalmonth,(short) room all;} class Person {...}; class UnivEmployee extends Person {attribute short emp#; attribute temporalmonths(short) salary; attribute temporalye,,, (short) room;}; class Student extends Person {...; relationship temporalyea,,(Professor) supervisor inverse Profess0r::supervises;) class Professor extends UnivEmployee {attribute temporalyears(string) businesshours; relationship temporalyears (Course) teaches inverse Course::T-prof; relationship temporalyears (set<Student>) supervises inverse Student::supervisor;} class Researcher extends UnivEmployee {ref attribute temporalmonth,(short) room main; attribute temporalweeks (string) supervised-lab; relationship temporalmonth,(set<Course>) assists inverse Course::T-assist;}  Figure 1.
Example of database schema type provided that Person E TRand months E G. The set of types provided by our model, which includes temporal, literal, and object types, is denoted as 7.
Given a non-temporal type T and a time instant t, [[ T JJ t denotes the extent of type T at time t. If T is a literal type [[ T ] simply denotes the set of values of that type, whereas if T is a class [[ T JJ returns the set of objects belonging to type T at time t. Indeed, no literal value can be explicitly created or deleted, whereas objects belonging to classes are dynamically created and deleted, thus the extent of a class depends on time.
The set of values of a non-temporal type with respect to a time instant is generalized to a granularity G as follows.
1T ] denotes the extension of type T with respect to the ithgranuleofG,thatis, [ [ T I F = [ T ] t.9 Theidea  behind this is that if an object o belonging to class c exists only during a portion of a granule, it does not belong to the extent of c related to such a granule.
The set of legal values of a temporal type temporaZG (T)is defined as follows:  I[ temporaZG(r)1 = { f I f : zs + [[ T ] is a partial func.
s.t.
Vi E ZS if f ( i ) #Ithen f ( i )E I[ T JJ y } .
Example1 Let Course be a class such that: D =  uiEzs  [[Course]yearS = {dl,d2, d3, .
.. , dn}, then examples of functions, denoted as set of pairs, in UtempOralyears(Course)JJ are VI = ((il9927 d1)7 (i1993, 0 ~34)); vz = {(iiwz, di), (ii993, di), (ii994, di)).
ntEG(i)  9We frequently use  [T  When the function representing a temporal value is constant for a set of contiguous granules, that  to denote the legal values of a type with  respect to a granule.
149  values, we refer the interested reader to [9, 101 for further details.
is, an interval, we denote temporal values as set of pairs (temporal interval, value).
For instance, { ([i1992, i1gg4]years, dl)} is a compact notation for value v2 of Example 1.
We denote with V the set of legal values for types in 7.
Let 21 be a value of type temporaZG(r), we denote with v(i) the value of v in ith granule of G. We assume that, for each granularity H such that H 5 G, and for each i,j E IS such that H ( j ) 5 G ( i ) , the value of v in granule j of H is the one in the ith granule of G. This assumption is known in the temporal reasoning community [14] as downward hereditary property.
We simply denote such value as v*(j).
For instance, let vl E [[ temporalyearS(Department) ] be the temporal value presentedin Example 1, then v ~ o n t h s ( i 0 1 ~ 1 9 9=2 )dl.
One can argue that downward hereditary property is not always appropriate.
We believe that this property is realistic in most cases.
In fact, storing the value of an attribute with respect to a granularity is somehow deciding the temporal precision associated with the information.
If the attribute then for each granularity finer than granularity is months, such as days9 this information is imprecise.
However, since a value has been associated with each month, this information is as close as possible to the value of each  Temporal expressions evaluated on an object return the temporal element in which a boolean condition is satisfied on the object.
They are somehow the temporal counterpart of boolean expressions.
Indeed, they the query: is a certain condition Temporal expressions are built by combining simple expressions which denote values in U.
Their syntax in BNF form is reported in Figure 2.
Terminal symbol nat represents a natural number, granularity represents a granularity in 6, value represents an element of U, count denotes the usual aggregate function, at t name, re1 n a m e represent an attribute, relationship name, respectively.
hY*  3 Temporal Expressions In this section we first briefly discuss how temporal values related to different temporal granularities can be combined, then we present the syntax and semantics of temporal expressions.
Temporal expressions are the mean by which the set of granules, that is, the temporal element, with respect to which a query is evaluated, are implicitly specified.
Combining temporal values expressed with respect to different granularities raises several interesting issues [101.
The intuitive meaning of an operator op applied to two temporal values, v1 and vz,is the "point to point", that is, "granule to granule" in OUT context, evaluation of the operation denoted by op.
For each comparison operator op we introduce a temporal variation (OPT),whose intuitive meaning is to answer the following question: "when the relationship denoted by op holds?'
These operators are used in temporal expressions.
In case the two values are expressed with respect to different granularities two cases can be devised.
If one granularity is finer than the other, the "coarser" value is converted to the finer granularity.
If the previous condition is not verified, but the two granularities are in some way comparable, that is, a granularity K finer than both of them exists, the two values are converted to K. If none of the previous conditions is verified an undefined value is returned, that corresponds to an error detection.
For lack of space we give only some examples of expressions involving temporal  Example3 The following are examples oftemporal expressions which can be evaluated with respect to an object of class Course of the database schema of Figure I: r o o m = ~ 1 ( 1 7a n d T - a s s i s t .room=T  207,  f i r s t ( c o u n t ( P - s t u d ) > ~ 2 5o r T g r o f .
s a l a r y > ~ 7 0 ) , years(T-assist  .s a l a r y > ~ 5 5 k ) .
0  3.2 Semantics The semantics of temporal expressions is built on top of the semantics of simple expressions (cf.
Figure 2).
A simple expression, evaluated on an object, denotes a value.
It can be a value itself, the navigation through a path, the count operator applied to an expression, and an operation applied to two expressions.
For instance, T-prof .
salary, is a simple expression which evaluated on an object of class Course returns a value storing the history of the salaries of the professors who have ever taught that course.
In case of paths, which represent the navigation through objects, the evaluation of a path expression p l .p2.
.
.
.
.p, is the value of property p n starting to navigate from the given object through properties p l , .
.
.
,p,-1.
Each property p,,  150  (temp-expr) ::= (simple-expr) (temp-comp-op) (simple-expr) I (temp-expr) (bool-op) (temp-expr) I (single-op) ((temp-expr)) 1 (slice-op) ((temp-expr), n a t ) I granularity((temp-expr)) (simple-expr) ::=value I (path) I count ((simpl-expr))1 (simpl-expr) (op) (simpl-expr) (path) ::= attname  I  (temp-comp-op)::= > T  relname I (path) .attname I (path).
relname  I  <T  I > = T I <=T I = T I !
=T I E T I ET  (op) ::=+I-  I * 111 uI nI \  (bool-op) ::=and I or  (slice-op) ::= s l i c e l i n s t - s l i c e  (single-op) ::=notIf i r s t l l a s t l f irst-instant1 l a s t - i n s t a n t  Figure 2.
Syntax of the language for expressing temporal expressions  i E [l,n] can be expressed with respect to a different granularity.
Consider indeed a path p l .p2.
.
.
.
.pn such that p l is a property of the class of the object on which the expression is evaluated whose domain is t e m p o r a l c , ( T I ) and p,, for i E [2, n], is a property of class T, whose domain is t e m p o r a l c , (T,).
The value denoted by this expression is a temporal value of granularity gZb(G 1 , .
.
.
, G,) whose value in each granule is obtained by evaluating the value of the path at that granule.
If gZb(G1, .
.
.
,G,) in G does not exist, then the value of such expression is not defined.
For instance, the path supervisor.
teaches.
Pstud, evaluated on an object of class Student of Figure 1 whose supervisor has ever taught an introductory course, denotes a temporal value of type t e m p o r d d a y s ( s e t < Student >).
In addition, in agreement with OQL, we impose the restriction that path navigation across multivalued properties is not allowed.
In what follows, given an object 0,v(o) denotes the value of its properties.
If p is a property of 0,then v(o).p denotes the value of p for 0.The semantics of simple expressions is formally defined as follows.
Intuitively, the resulting value of a temporal expression is the temporal element in which all the conditions expressed by each expression composing it are verified.
Example 4 The evaluation of the first temporal expression of Example 3, room =T 107 and T-assist .room =T 2 0 7, on an object of class I -Course,returns a set of temporal intervals of granularity months, obtained as the intersection of the intervals in which the two conditions are satisfied.
0  Definition 4 (Semantics of Simple Expressions).
Let 01 be a set of objects, V be the set of values, and Exps,mple be the set of well-formed simple expressions (cf.
Figure 2).
Then the semantics of simple expressions is defined through function: Eszmple : Expszmple + (01+ V), such that, given an expression e E ExpSzmple and an object o E 01: i f e = V , V E V , thenEsZmpie [v]o= V ; 0  if e = p l .p2.
.
.
.
.p,, with p l , p2, .
.
.
,p , properties, E s z m p l e I[ P I .pa.
.
.
.
.P, 10 = {(i, (Eszmple Up2.
.
.
* .P, ~ ( o ) .
p F ( i ) ) ~ ( iI ) ) = gZb(G1,.
.
.
,G,), i E ZS} if the type of property p l for o is temporalGI (c1) E 77 and the type of propertyp, in c,-1 is t e m p o r a l c , (e,) E 77,j E [2,n]};  n  if e = count(e'), e' E EszmpieU count(e) 10 =I EURsample 0  4  EXpstmple, then  1.1  0  I;  if e = e l op e2, then Eszmple[ e 1 op (Esszmple I[ei 10)OP (&sample U e2 II 0).
e2  The semantics of a temporal expression is formalized by means of function &temp : E x p t e m p + (01+ TECCEM) defined in Figure 3.
In Figure 3 symbols e, e 1, and e2 denote temporal expressions, o denotes an object, n denotes a natural number, and G denotes a granularity.
In case of temporal expressions involving the negation operator not,the semantics is defined using the set operation complement.
The universe with respect to which the complement is computed is the set of granules in which expression e is defined on object 0.
Note that the only meaningful use of the conversion operator G (cf.
Definition 3) in temporal expressions is for upward conversion, that is, to convert to a coarser granularity, to obtain a granule-valued expression, that is, an expression whose evaluation returns a single granule.
According to the notion of conversion of temporal interval and temporal element we adopt, the semantics of upward conversion we consider, converts expressions that denote a .
superset of the set of instants associated to a set of granules of the coarser granularity.
Actually, upward conversion could be extended to arbitrary intervals, with different alternative semantics.
For lack of space we do not deal with alternative semantics, we refer the interested reader to [9] .
Temporal Path Expressions  Usually, internal nodes of a path expression must produce a single object to which subsequent accesses are applied.
In a multi-granularity context, to ensure that property,  o = 0  151  '  ( E t e m p U e D 0)'  n(Et,,, n(Et [i,iIG  [i,iIG  Et,,,  U o d e , n)l o =  [[e]o,i)  [[ e 1 0,m )  if op= not ifop=first if op= l a s t and m =I Etemp [[ e 1o I ; i f o p = f i r s t - i n s t a n t a n d i = min(II(Etemp[ e ] o , l ) ) i f o p = l a s t - i n s t a n t , i = maz(II(Et,,, [elo,m)),and i f m =I E t e m p U1 .
I  I I ( E t e m p [ e ] o , n ) ifop=slice [i, iIG if op = i n s t a n t s l i c e and i is the ith granule in E t e m p [Ie 1 o  Ete,,[IG(e)Do  = G(EtemPUeDo)  Figure 3.
Semantics of temporal expressions whichever the granularities of the accessed property and of the granule are, we rely on the use of coercionfunctions.
Coercion functions allow one to convert values from a given granularity into values of a coarser granularity in a meaningful way.
Thus, a coercion function C is a partial function such that C : temporal^(^) ] -+ [tempordG(r)] , where H 5 G. In [111 coercion functions were associated with property definitions allowing one to specialize property domains in a type with a granularity finer than the one in the property domain to be redefined.
Example5 In Figure 1, the type temporaZyearu(short) of attribute r o o m of class C o u r s e is specialized in class T - C o u r s e sub-class- of C o u r s e in temporalmo,ths(short).
Since months 5 years, coercion function a l l is associated with it in order to correctly perform object accesses.
Coercion function a11, - for each granule in the coarser granularity, returns the value .
which always appears in the-included granules of the finer one if this value exists, the null value otherwise.
0 Coercion functions have been inspired by semantic assumptions [3], a way of deriving implicit information from explicitly stored (relational) data.
In 'our approach we adopt somehow the use of semantic assumption to temporal object-orienteddatabases.
.
In what follows, we first discuss why we need coercion 'functions and then how they are used.
Consider an access to a property p of an object o at a granule 1$.
Let the property domain be temporalH(7).
If G 5 H , we c& access the value of property p at granule 1p, and this access uniquely denotes a value.
We denote such access as v(o).pG(i).If, by contrast, I?
4 G, property p may assume different values in the granule identified by 1:.
For instance, consider the class E - C o u r s e of Figure 1.
If we access property lab of an E - C o u r s e object specifying a year, since that property may vary every month, the property may take different values over the year, corresponding to the fact that the laboratory has been changed during that year.
In this case we  make use of coercion functions to obtain a single value starting from ithose taken by property p in the granule 1.: Thus, here we alllow one to attach such functions to property accesses, and not only to property definitions.
If a coercion function IS specified for a property access this function is used to evaluate the expression, even if a different coercion function has been specified in the schema for the accessed property.
If, by contrast, no coercion function is specified for a property access, the one associated with the property is employed.
Wherever they are specified, coercion functions are employed to convert a temporal value to a coarser granularity.
In [ l l ] we have devised different kinds of coercion functions.
Here, we only refer to selective and user-defined coercion functions.
Let ( i l , .
.
.
,ik} be the set of indexes such that H ( i p )2 G ( j )andletv E [temporalH(r)] suchthat v(ip) = u p , p E [l,k].
Then, intuitively, in case of selective coercion functions, one of the possible values among {VI, .
.
.
, vk} is chosen for a generic granule j .
Function .
m a i n of Example 5 is a selective coercion function.
In case of user-defined coercion functions, the method to convert from one granularity to the other is completely specified by the user.
4.1 Syntax  -  The syntax of temporal path expressions is presented in Figure 4.
Terminal symbol var denotes a variable, granU 1e denotes a granule label, and t e m p -e 1e m e n t denotes a temporal element.
In addition, the rules of the nonterminal symbols ( t e m p - e x p r ) and (path) can be found inFigure 4.
Example6 Consider the schema of Figure 1 and let X be a variable of type C o u r s e .
lst:-sem-1999 denotes the  X.T_assist  assistant of the course during the first semester of 1999; X .
T-profJf i r s t - i n s t a n t (count ( P - s t u d ) > ~ 5).
2  152  (pathexpr) ::E (simplepathexpr) I (termpathexpr) (simple-pathexpr) ::= var I var.
(path) I (simple-pathexpr) J. granule I (simplepathexpr) J.
(coerc-func) granule (simple-pathaxpr) 1 (temp-expr) I (simple-path-expr) ~""""f"" (tempmxpr)  I  (coerc-func) ::= (selective-coerc-func) I (user-def x0erc-f unc) (selective-coerc-func) : : = f i r s t I l a s t 1 Proj (index) I main I a l l (user-def-coercfunc) ::= methinv (tenpath-expr) ::= (simplegathexpr) 4 temp-element I (simplegath-expr) J.~'""""""''  t emp-element  I  Figure 4.
Syntax of the language for expressing temporal path expressions businesshours -1 (count(supervises)> ~ 5 ) denotes the business hours, in time intervals in which hehhe supervised more than five students, of the professor who was teaching the course in the first instant in which it was attended by more than 25 students.
0  4.2  Semantics  The semantics of a path expression can only be specified starting from an object-assignmentand depends on the temporal specifications it contains.
Consider first simple path expressions,for which a granule ZF is specified (either implicitly or explicitly), that is, path expressions of the form e.p J, z F with a coercion funcLet o be an object to tion optionally specified (e.p JC which e evaluates, and let the granularity of property p for object o be H .
Moreover, given a temporal property p and a granule identified by ZF, p ( i ) denotes the value of p in the Let K 5 G, p K ( i ) denotes the value of propgranule erty p with respect to granularity K, such value is equal to p ( j ) where K ( i ) C G ( j ) .
The value denoted by the path expressionwith respect to an object o is:  IC).
property p to granularity K and the value of the property in the K-granule containing G(i)is accessed.
Example 7 Let oi, oe, ot be objects of classes I-Course, E-Course, T-Course of Figure 1, respectively.
denotes the value o,.T-assist J 1st-sem-1999 stored in that granule; oi.T-assist 1st-sem-1999 denotes the value stored in the year-granule 1999; o,.T-assist -1 1st-sem-1999 denotes the value obtained by applying coercion function main to the values stored in the months-granules of the first semester of 1999; o,.T-assist 1st-sem-1999 denotes the value obtained by applying coercion function first to the values stored for the relationship in the months-granules correspondingto the first semester of 1999.
0 Consider now the terminal path expression e.p 4 T G , where YG is a temporal element (either explicitly or implicitly denoted).
The value associated with this expression is the restriction of the temporal value v(o).p to the time instants in YG.
Different interpretations of this path expression are however possible if the value and the temporal element are expressed at different granularities.
Let o be the object to which e evaluates and the granularity of property p for o be H. Different cases can be distinguished  IF.
v ( o ) .
p ( i )if, G = H (the eventually specified coercion functionis irrelevant); v(o).pG (i), if G < H (the eventually specified coercion function is irrelevant);  e  C ( Y ( O.p) ) ( i )if H 4 G, where C is the coercion function specified for the access, if any, and the one associated with property p in the class to which o belongs othenvise;'O  G = H: the expression denotes a temporal value of granularity G which is the restriction of v ( o ) .
pto T G (cf.
Definition 5);  e  G 4 H: the expression denotes a temporal value of granularity G which is v(o).p seen as a value of granularity G and restricted to TG;  C ( ~ ( o ) .
p ) ~if( H j ) and G are not comparable under 5 but they have a least upper bound K , G ( i ) K ( j ) , and C is the coercion function determined as in the case above.
In this case, C is used to coerce values of  H 4 G: two alternative interpretations are possible:  - no coercion function is specified for the access: the expression denotes a temporal value of granularity H obtained by restricting v(o).p to the H granules in TG;  +  1degIf H G and no coercion function is specified for the access, nor attached to property p in the class to which o belongs, the value of the expression is undefined.
153  - a coercion function C is specified for the access:  0  the expression denotes a temporal value of granularity G obtaining by restricting C(v(o).p)to  rG;  0 0  G and H are not comparable: two alternative interpretations are possible:  - no coercion function is specified for the access:  r  - a coercion function C  is specified for the access: the expression denotes a temporal value of granularity G obtaining by restricting the coercion C(v(o).p)of v(o).p at granularity K = lub(G, H ) , to TG.
IF  Example8 Consider again Figure 1 and let 0, be the identifier of a Researcher object for which c o u n t ( a s s i s t s ) >T 2 denotes a set of intervals at granularity months.
5  o,.room -1 ( c o u n t ( a s s i s t s ) >T 2) denotes a temporal value of type temporal,,,ths(short) obtained by restricting the value of the room attribute to those months in which the researcher was the assistant of more than two courses;  Concluding Remarks  In this paper we have investigatednavigation through objects whose property values are expressed with respect to several granularities.
This can be considered as the core of a language which extends OQL path expressions [4] to query data expressed with respect to different granularities.
The proposed navigation has been implemented on top of Objectstore Pse as part of a prototype we have developed.
Such prototype implements T -ODMG, the temporal extension to ODMG supporting multiple temporal granularity data we have proposed [9].
Several different semantics could be devised in evaluating the presented expressions.
We leave for future work the introduction in the language of syntactic constructs according to which different semantics could be supported.
Finally, our future works include the definition of a full temporal query language and optimization.
o,.room -1 [01/01/99,18/01/99] denotes a temporal value of type temporalday,(short) obtained by restricting the value of the room attribute to those days belonging to specified temporal interval; 0  if H 4 G, W ~ GE [temporalH(T)] such that w p ( i ) = w(i) if 3 G ( j ) E TG s.t.
H ( i ) G ( j ) , 0 undefined otherwise.
We are now ready to define the semantics of a path expression.
Let Exppath be the set of well-formed path expressions (cf.
Figure 4), 8 : Var + 01" be an objectassignment, and 0 be the set of all object-assignments.
The semantics,of a path expression e under object-assignment19 is defined,through the following semantic function Epath : Exppath + (0 -+ V ) which is formally specified in Figure 5.
In Figure 5 we use function y to denote the granularity of a temporal value, that is, if w E [[ temporalG(.r) ] , y(w) = G. In addition, X denotes a variable, p denotes an object property, denotes a granule label, te denotes a temporal expression, C denotes a coercion function, and YG denotes a temporal element.
the expression denotes a temporal value of granularity J = glb(G, H ) which is the restriction of v(o).p (seen as a value of granularity.
J) to the J-granules in ;  -  if G 5 H, W ~ GE [temporalG(T)] such that w l r c ( i ) = w(j) if G ( i ) E TG and G ( i ) g H ( j ) , undefined otherwise;  o,.room Jfirst [1999,2000]denotes a temporal value of type temporal,,,,, ( s t r i n g ) obtained by restricting the value of the room attribute corced to the years granularity by means of the f i r s t function, to years 1999 and 2000; o,.supervisedlab -1 ( c o u n t ( a s s i s t s ) >T 2) denotes a temporal value of type temporal days ( s t r i n g ) obtained by restricting the value of the supervised-lab attribute to those days belonging to months in which the researcher was the assistant of 0 more than two courses.
References [ l ] E. Bertino, E. Ferrari, and G. Guerrini.
Navigational Access in a Temporal Object Model.
ZEEE TKDE, 10(4), 1998.
[2] E. Etertino, E. Ferrari,.
G. Guerrini, and I. Merlo.
An ODMG Compliant Temporal Object Model Supporting Multiple Granularity Management.
Technical Report DISI-TR00-08, DISI, Universitl di Genova, 2000.
The restriction of a temporal value to a temporal element is formalized by the following definition.
Definition5 (Temporal Value Restriction).
Let U E [temporala(.r) I] be a temporal value and let Y E 'T&C&MGbe a temporal element.
The restriction of U to TG,denoted as w l p , is defined as follows:  [3] C. Eiettini, S. Jajodia, and X.S.
Wang.
Eme Grandan'ties in Databases, Data Mining, and Temporal Reasoning.
Springer-Verlag, 2000.
"Var is a set of object denoting variables.
154  undefined  otherwise  Figure 5.
Semantics of temporal path expressions [4] R. Cattel, D. Barry,M.
Berler, J. Eastman, D. Jordan, C. Russel, 0.
Schadow, T. Stanienda, and E Velez.
The Object Database Standard: ODMG 3.0.
Morgan-Kaufmann, 1999.
[I21 M. T. Ozsu, R. Peters, D. Szafron, B. Irani, A. Lipka, and A. Munoz.
TIGUKAT: A Uniform Behavioral Objectbase Management System.
V W B Journal, 4(3), 1995.
[5] C. Combi, G. Cucchi, and F. Pinciroli.
Applying Object-  [I31 E. Rose and A. Segev.
TOODM  - A Temporal ObjectOriented Data Model with Temporal Constraints.
In Proc.
Oriented Technologies in Modeling and Querying Temporally Oriented Clinical Databases Dealing with Temporal Granularity and Indeterminacy.
IEEE Transactions on In-  Tenth Int'l ConJ:on the Entity-RelationshipApproach, 1991.
[14] Y. Shoham.
Temporal Logics in AI: Semantical and Ontological Considerations.
Artificial Intelligence, 33( l), 1987.  formation Technology in Biomedicine, 1(2), 1997.
[6] S.K.
Gadia.
A homogeneous relationalmodel and query languages for temporal databases.
ACM TODS, 13(4), 1988.
[15] G. Wuu and U. Dayal.
A Uniform Model for Temporal and Versioned Object-Oriented Databases.
In A. Tansel, J. Clifford, S. Gadia, S. Jajodia, A. Segev, and R. Snodgrass, editors, Temporal Databases: Theory, Design, and Implementation.
Benjamin/Cummings, 1993.
[7] S.K.
Gadia and S.S. Nair.
Temporal Databases: A Prelude to Parametric Data.
In A. Tansel, J. Clifford, S. Gadia, S. Jajodia, A. Segev, and R. Snodgrass, editors, Temporal Databases: Theory, Design, and Implementation.
Benjamin/Cummings, 1993.
[SI C.S.
Jensen and C.E.
Dyreson.
The Consensus Glossary of Temporal Database Concepts.
In Temporal Databases: Research and Practice, number 1399 in LNCS, 1998.
[9] I. Merlo.
Extending the ODMG Object Model with Temporal and Active Capabilities.
PhD thesis, Universitk di Genova, February 2001.
[lo] I. Merlo, E. Bertino, E. Ferrari, S. Gadia, and G. Guenini.
Querying Multiple Temporal Granularity Data.
In S. Goodwin and A. Trudel, editors, IEEE Proc.
TIME 2000.
[ 1 11 I. Merlo, E. Bertino, E. Ferrari, and G. Guemni.
A Temporal  Object-Oriented Data Model with Multiple Granularities.
In C .
Dixon and M. Fischer, editors, IEEE Proc.
TIME 1999.
155