Visual Query Operators for Temporal Databases S6nia Fernandes*, Ulrich Schiel** and Tiziana Catarci" *Departamento de Engenharia ElCtrica, **Departamento de Sistemas e Computac;b Universidade Federal da Paraiba, C.P.
10106 Campina Grande - PB, Brasil, e-mail: sonia@dsc.ufpb.br "Dipartimento di Informatica e Sistemistica, Universith degli Studi di Roma "La Sapienza" Via Salaria, 113 - 00198 Roma, Italy, e-mail: catarci@dis.uniromal.it  Abstract  concerning user-centered query interfaces for temporal databases in spite of numerous papers that were published considering the temporal factor relevant in several modern database aplications (see [34] for the last temporal database bibliography update).
As efforts were made to find new visual query mechanisms for accessing conventional databases, this should be done for temporal databases.
Adequate conceptual schemata are needed and new visual mechanisms must be found in order to manipulate the temporal aspects.
Such temporal aspects must be integrated with other components of traditional semantic modeling.
The visual operators should be as powerful as the textual languages, and much easier to use in order to meet the needs of the various classes of users.
This paper presents a visual query language for historical databases (TVQOs, Temporal Visual Query Operators), based on a temporal extension of the Graph Model [3], [5], [7].
The language is presently being implemented on top of an object-oriented database.
The Graph Model has been originally proposed in [3] as a graph-based formalism for representing and querying databases.
This formalism is suitable to give a precise semantics to complex visual representations and is general enough to formalize, in principle, a database expressed in any of the most common data models.
A Graph Model DataBase (GMDB) is a triple eg, c, m>,where g is a Typed Graph, c is a set of Constraints, and m is an Interpretation.
The schema of a database, i.e.
its intensional part, is represented by the Typed Graph and the set of Constraints.
The instances of a database, i.e.
its extensional part, are represented by the notion of Interpretation.
The querying primitives of the formalism, although constituted solely by two elementary graphical actions, namely the selection of a node and the drawing of an edge, are at least as expressive as the relational algebra.
In this paper the Graph Model has been extended to model the temporal aspects of classes and relationships, and the original set of query operators has been enriched by adding two specific temporal operators: Snapshot and Slice for temporal selection and temporal projection [ 191.
This extension allows the user to specify even complex  Many recent proposals in the literature present easyto-use query languages, based on visual representations of the database and direct manipulation mechanisms.
Such proposals essentially deals with conventional query operations, whereas little effort is devoted to investigate friendly environments f o r querying temporal databases.
Nevertheless, temporal aspects are generally considered extremely relevant in several database applications.
Thus, the various users should be provided with powerful and simple query systems also exhibiting temporal features.
While attempting to meet this need, we propose a visual query system f o r temporal databses.
It adopts a diagrammatic representation of the database schema (including temporal classes and relationships}, on which conventional as well as temporal visual query operators can be applied.
In this paper we concentrate on the temporal operators, showing both examples of usage and formalization.
1.
Introduction As a consequence of the user-centered approach to the development of information systems, several research activities on easy-to-use visual query languages have been carried out in the past years (see [6] for a survey on visual query systems).
Conventional query languages, such as SQL, are hardly aproachable by naive users, for both their intrinsic syntatical complexity and the lack of a global view of the data of interest and their interrelationships.
Indeed, it is difficult to capture complex structural information through relational tables [24], where the objects have to be decomposed into many parts and reassembled through sophisticated join operations.
Similar problems also occur with textual query languages for temporal databases.
Proposals exist based on SQL extensions, such as TSQL[22], HSQL[23], TSQL2[29], and object-oriented languages, such as OQL/T[30] where special clauses and predicates are added to the original language in order to manipulate the temporal aspects.
However, there is little research  0-8186-7937-9/97 $10.00 0 1997 IEEE  46  temporal queries in an easy-to-use and higly interactive visual environment.
The rest of this paper is organized as follows.
Section 2 presents an example of use of the visual environment, with particular emphasis on the temporal aspects.
Section 3 outlines some basic aspects of the formalization.
Finally, Section 4 deals with some related work and draws the conclusions.
A preliminary version of this work has been published in [27].
Snapshot Slice Query Query ex.
3  Data SelectiodTemporal Projection Data SelectiodMixed Projection Temporal SelectiodData Projection ex.
I Temporal SelectiodMixed Projection Mixed SelectiodData Projection ex.
2 Mixed Selectionemporal Projection Mixed SelectiodMixed Projection ex.
5  2.
Visually Expressing Temporal Queries Most of the visual query interfaces for databases specify the query using direct manipulation [26] of the visual components representing classes and relationships in the conceptual schema.
We follow the same approach and in this section we show some examples of query formulation through TVQOs.
ex.
4  ex.
6 ex.
7  In the following examples we ilustrate seven distinct cases in Table 1: 1.What were the salaries of employees at 10/01/95?
2.
What was the salary of 'John' when he changed his status?
3.Since when does 'John' own more than 5,000?
4.What is the history of the salaries of the database group?
5.What was the last salary of employees who started working f o r more than 1,000?And since when?
6.What is the history of the salaries of the employees during the period 01/01/9531/12/95?
7.Which is the period that 'John' worked at personal department during 1990-1995?
2.1.
Temporal Visual Query Operators A taxonomy for temporal queries is proposed in [19].
That document contains a survey of the most common teminology used in temporal databases as result of a several debates on temporal databases.
According to [ 191, a temporal query has two ortogonal components: temporal selection and temporal projection.
Temporal selection is a logical condition, based on a predicate that involves the time associated with the facts.
The temporal projection returns the time values associated to the data derived from temporal selection.
In [ 101 the possible combinations between temporal selectiodprojection over time and data were analysed, resulting into: data selectioddata projection, where conditions and results apply to data values only; temporal selectiodtemporal projection, where conditions and results apply to temporal values; and mixed selectiodmixed projection, where conditions and results apply to both data and temporal values.
In our approach, we use the snapshot operator for the extraction of an instantaneous fact (valid at a single time instant) and the slice operator for the extraction of a historical fact (with a longer lifetime).
In this case, the domain of temporal queries is constituted by historical databases according to valid time measure [28].
Combining the classification proposed in [lo] with our approach results in fourteen types of primitive queries, as can be seen from Table 1 .
According to [lo] we do not consider the combinations data selectioddata projection and temporal selectiodtemporal projection (the former represents a conventional query and the latter is impossible to represent in a temporal query since conditions and results do not apply to temporal values only).
It is worth noting that this classification  Note that examples 1, 2, 3 e 5 retrieve information concerning a single time instant, whereas the other examples refer to a time slice.
TVQOs may be applied to both temporal classes and temporal relationships.
For instance, Figure 2.1 shows a symbolical representation of the application of both operators to a temporal relationship EMPLOYEEhasSALARY (salary history).
Note that the snapshot operator returns the salary of only one time interval whereas the slice operator returns the salaries of one or more time intervals.
SmW Slice  Figure 2.1.
TVQOs on a Salary History  2.2.
Examples of Interaction The user starts interacting with a diagrammatic representation of a GMDB' containing information on ~  'Since both the Graph Model and the associated Graphical Primitives consist of elementary graphical elements, it is possible to use them as  47  In the temporal window, there are six process icons  employees and employement agencies (see Fig.
2.2, where, for the sake of simplicity, not all relationships are visualised).
[SI, as shown in Figure 2.3: slice operator; snapshot operator; temporal condition (when), data condition (where); data display and time display.
Beside these six specific icons for the construction of a temporal query, there is an icon for selecting classes andor relationships and one help icon.
Furthermore, there are two slide bars used in snapshot and slice queries respectively.
Inside this visual environment, the user can specify any temporal query within the domain of temporal queries presented in Table 1.
The category of our example is snapshot, temporal selectioddata projection.
So, the user specifies this query selecting the snapshot, temporal condition and data display icons.
For instance, Figure 2.3 shows the effects of the user's selection of the snapshot icon applied to the temporal relationship EMPLOYEE worksr PROJECT.
Unprlntdh C h  Qenmrsllutbn AggmgWon Gmuplng  TUnp0r.l claws  TempordRei.
Figure 2.2.
A Visual Schema The meaning of the different graphical symbols is explained in the attached legenda.
Moreover, notations such as works-for(l,l>, indicates that the relationship works-for between classes EMPLOYEE and ENTERPRISE (also denoted as EMPLOYEEworksforENTERPRISE) has minimum and maximum cardinalities equal to one.
The notation <I,n) owns represents the cardinality of the inverse relationship.
We show the interface "look and feel" by a simple example.
A typical screen displays three windows: a Schema Window that shows the visual schema to which the query operators are applied; a Temporal Window that shows more details when a user selects a temporal class/relationship in order to formulate a temporal query; and a Result Window that shows the result of the query.
Furthermore, a tool bar is provided that contains some pull-down menus for editing the schema drawing, plus a menu containing the Conventional Query and Temporal Query options.
In this paper, we only concentrate on temporal queries, Initially, the user chooses one database schema, then s h e selects some classes and relationships of interest, in order to create the sub-schema that contains all information s/he needs to formulate herhis query.
Assuming that the user is interested in knowing: "On what projects and with which salary, each employee worked on 10/01/95?
", slhe will select the nodes: EMPLOYEE, NAME, SALARY, PROJECT, PROJNAME, generating a new sub-schema, where the Temporal Query option is also selected.
As a consequence, the same diagram appears in the temporal window (Figure 2.3).
As a next step, the user selects the temporal relationship EMPLOYEEworks-onPROJECT in the temporal window, representing the projects related to the employees (if the user would like to select the employees related to the projects, the inverse relationship should be selected).
Figure 2.3.
Await Condition of the Snapshot In order to specify the temporal condition "on  10/01/95 ", the user must select the when icon.
As a consequence, a menu pop-up with the constant, now, temporal reference, period and all options appears @eriod and all options are disabled because they cannot be used in snapshot query such as the one in the example).
Temporal reference is a time reference to another data (e.g.
"What was the salary of 'John' when he changed his status?
'?, that is, the time during which the data condition ("when he changed his status") occurs (such temporal reference is also used in OQrSr[30] and in the visual query editor for the TEER model[20]).
The all option should be used for recovering all history of a class or a relationship.
In the example, the user selects the constant option.
Then, s h e selects the constant 10/01/95 after s h e has chosen the date (MMDDYY) granularity'.
The constant appears inside the slide bar that contains the Begin, End, and At operators as shown in Figure 2.4 (the figure only shows the fragment of Fig.
2.3 corresponding to the slide bar).
basic constituents of more complex existing visual representations (i.e., E-R diagrams, object networks, etc.)
and visual query languages.
so giving them a formal semantics independent of the underlying data model.
* What has been called dore in fact means duy granularity (YYMMDD).
Other granularities are year, mounth, hour, etc.
48  By acting on the time display icon, the user has the possibility of visualizing time intervals.
First, s h e may display time intervals or instants in different granularities, as both query result and operands of a temporal reference.
A temporal reference can be used in combination with both the snapshot and slice operators.
For instance, in order to construct the query "Which salaries did the employees earn when they changed their level f o r the first time ", the slice operator on the temporal relationship EMPLOYEE has LEVEL is used for requesting the time when the level changed, and the snapshot operator for retrieving the corresponding salary.
Since the result of a slice operation may contain several time intervals, the user can select one or more of them, and specify whether the selection concerns the starting point, the ending point or the duration of each interval.
In the example, the endpoint of the first interval associated to the level of employees has been chosen (Figure 2.6).
If the duration is selected, the system offers a menu 2-6.
Time of aggregate functions, min, max, Fig''' 'ntenral Display count, avg and sum, which applies to the set of temporal elements in the relationship or class.
Figure 2.4.
Slide Bar used in a Snapshot Query Let t be a time instant.
The Begin operator retrieves only the elements whose lifetime starts at t. With End the lifetime must finish at t, and with At the time t must be in between the lifetime of the element.
The user moves the constant to the At option.
In order to specify the data projection, the user must select the data display icon and select the nodes NAME, SAURY and PROJNAME.
At this point, the temporal query has been completely specified, and the system will process the query.
The user formulates slice queries similarly to snapshot ones.
The only difference is that, when specifying the temporal condition, a different slide bar needs to be used, shown in the upper part of Fig.
2.3 (this slide bar is not used within the all condition), containing the predefined temporal comparison operators between time intervals, called primitive temporal relationships, described by Allen[2].
We use Before, After, Precedes, Follows, Overlap (cross), Start, Finishes, During, Equivalent as temporal relationships.
Assuming that the query is: "Give the history of employees' projects before 1995", for completing the slice operation, the user selects the period option (since the query is a slice, the constant and now options are disabled).
Then, slhe selects the period "from 01/31/95 until 12/31/95", after s h e has chosen the date granularity, and moves the slide on the Before value on the bar, as shown in the first bar of Fig.
2.5.
Note that the grey part of the bar represents the specified time, and its spatial position with respect to the bar values evokes the temporal relationship among them (e.g., when selecting the Overlaps value, the slide partially overlaps the grey area).
The order of the temporal relationships in a slide bar is based on the neighbors temporal primitives concept', introduced by Freksa in [13] and further discussed in ~71.
3.
Formalization In this section we present a formal specification of both the data model and the TVQOs.
The formalism to be used is an extension of the work of Tiziana Catarci & al.
[3].
They proposed a graph-based formalism (the Graph Model) and a minimal set of model-independent visual primitives (the Graphical Primitives) for visually representing and querying databases.
3.1.
The Graph Model A Graph Model Database (GMDB) is a triple <g, c, m>,where g is a Typed Graph, c is a set of Constraints, and m is an Interpretation.
The schema of a database, i.e.
its intensional part, is represented in the Graph Model by the Typed Graph and the set of Constraints.
The instances of a database, i.e.
its extensional part, are represented by the notion of Interpretation.
The Typed Graph is a tuple dv,E, L.,fb A>, where: N = NE U N, is the set of nodes; N, is the set of socalled class-nodes, and N, is the set of the so-called role-nodes representing the relationships4.Moreover, N, is partitioned into N,,,, the set of printable nodes, Ncu, the set of unprintable nodes, and N,, the set of temporal  Figure 2.5.
Three movements of the Slide Bar  Two temporal relationships are n e i g h b m if a continuous change of the events transforms a relation into another without passing through an additional temporal relationship [ 171.  '
Note that the role-nodes are not visualized in the schema drawing, where edges appear to connect class-nodes.
49  If n E Nc,, then m(n) c (CO,@to)> I o E Ot), the interpretation of n at a instant t is denoted as m(nt) = { ot  nodes, corresponding to temporal classes.
Nr is the set of non-temporal partitioned into N,,, relationships, and Nrt the set of temporal relationships; E c N , x N, v N , x N, is the set of edges; L is the set of labels; fi is a total biunivocal function from N to L, associating a label to each node; f s is a total function which characterizes the selection state of the elements of the typed graph, mapping each node to a value in { unselected, selected, displayed};  I U E m(n)).
If n E Nr,, and { n f ,n2,..., nk) = A D { n } ,then m(n) is a set of tuples of the form <fl(nl): 01.
...... fl(nk):ok,fl(n)>, where fl(n1),....., fl(nk) and fl(n) E L and ol ,....., Ok E m(n1) x m(n2) x .....x mtnk).
If n E Nrr and { n l , 112, ..., nk] = A D { n } ,then m(n) is a set of tuples, each one having associated a time interval, i.e.
: m(n) E {x, O(x)), where x is the tuple cfl(nl):ol,....., fdnk):ok, f i t n b ; fib),....., f i h k ) and f l h ) E L; 01 ,....., ok E m(n1) x m(n2) x ..... x m(nk) and the interpretation of n at instant t is denoted as m(nJ = {xl I X E m(n)}.
The following notations will be used: AD(n1, nk} is the set of nodes adjacents to a given set of nodes {nl,....,nk) minus {nl,....,nk).
If n is a rolenode corresponding to a binary relationship then A D { n } = { n l ,n2] with n f , n2 E N,.
T = {tl, t2, ...} v {now} is the ordered set of time plus the special value now, where now is the continuously changing current time.
LS = {ls I 1s = {Zl, Zn]) is the set of lifespans of type temporal element (see also [14], [20], [31]), that is the set of disjoint time intervals, where each Ik is represented as <tkl, tk2>.
....,  ...,  0 = 0,U 0,U 0,is the set of all objects.
0,are the printable objects, 0,are the unprintable objects and 0, are the temporal objects.
Note that Op n 0, n 0,= 0.
U is a universe, that is a set of structured objects, defined as the smallest set containing 0,and all the possible labeled tuples (of any arity) <ll:ol ,....., lk:Ok, I>, where 11 ,....., lk are labels of class-nodes; 01 ,....., Ok are elements of 0 and 1 is the label of a role-node, i.e.
: 3n E N,.
I f f ( n )= 1.
Objects related by binary relationships are also denoted as 01 1 0 2 .
U, c U is the so-called temporal universe, that is the subset of U constituted by the temporal objects 0,and all the possible labeled tuples (of any arity) cl1: o f ...... , 1 k .
q .
[> where 11, ....., lk are labels of class-nodes; o f ,....., Ok are elements of Or and 1 is the label of a temporal role-node, i.e.
: 3n E Nr, If l ( n ) = 1.
@:U, LS is a total function that associates to each element x of U, a lifespan, denoted as O(x) = 1s.
For each Ik E O(x), we denote 1, = <beginlk(x), endlk(x)>, with x E Ul.
If t E Ik, then x, denotes the state of x at time t. An interpretation of a Typed Graph is a function m: N + 2' mapping each node n E N to a subset of U, as  follows: If n E Ncp, then m(n) c O,,; If n E Ncu, then m(n) c 0,;  The set of constraints C is specified by the designer using a suitable language'.
Those constraints which are mostly relevant for the purpose of this paper are the following: nl is-a n2 w nl, n2 E Nc A m(n1) E m(n2); {nl,...,n d part-of n w nl,...,nk , n E N , A m(n) E m(n1) x.....x m(nk); The constraints described above represent the hierarchies of generalization and aggregation respectively, as usually defined in semantic and conceptual data models [ 181.
As for the temporal relationship, we define the following constraint: For each n E Nrr and m(n) E { x , O(x)}, where x is the tuple <fi(nl):oi,..... fi(nk):ok, fit+; fltnl),....., fdnk) and f l ( n ) E L; 01 ,....., Ok E m(n1) x m(n2) x ..... x m(nk); the lifespan of n must be a subset of the intersection of the lifespans of the related objects, i.e.
: O(<fi(nl):ol,....., f l ( n k ) : o p ) 5; @(ol)n....... n @(Ok).
.
3.2.
The Temporal Visual Query Operators The formal specification of the TVQOs Snapshot and Slice is based on the idea of expressing any queryoriented user interaction with a database in terms of a simple set of fundamental Graphical Primitives (GPs) [3].
In [3] two primitives are presented: selection of a node and drawing of an edge, and it is demonstrated that all first order queries can be expressed by composing the two primitives.
In this paper we extend the GP set with the two TVQOs (for the sake of simplicity, we consider only binary relationships).
Let D = <g,c,m> be a GMDB.
At the beginning of the interaction, the user selects from the schema the classes and relationships that are of interest for hisher query.
This operation  ' for more details on the constraint language see [4].
50  corresponds to the GP selection of a node, through which the state of a node is switched from 'the value unselected to either the value selected, which means included in the schema of interest, or displayed, which means included in the query result (see [3] for more details).
Let D' = cg',ct,m'> be the GMDB resulting from the node selections.
The application of a TVQO on D'results in a new GMDB D'= <g',c',m'>.
slice icon, of a temporal predicate p(I) of the form before(I), aftertI), during(I),overlap(I), equivalent(I), follows(I), precedes(I), start(I),finishes(I), where I is an interval of In?.
More formally: Let n E Ncr and p(I) a temporal predicate, a slice over a temporal class-node n with p(Z) in D' is a function: q,(D', n, p(Z)) = W such that Dr = D', except that: N, '= N,' U ( s i ) (s and i are new class nodes); L r = L ' u ( l , = l op(I)II=fl(n));  TVQO Snapshot The TVQO snapshot corresponds to a sequence of three selections: of either a class-node or role-node, of the snapshot icon, of a temporal predicate p(t) of the form begin(t), end(t) or at(t), where t is either an instant of Tor a time reference to another data.
More formally: Let n E Nc, t E T, p(t) a temporal predicate, a snapshot over a temporal class-node n withp(t) in D' (D', n, p(t)) = D' such that D' = D, is a function: except that: N, '= N,' U Is) (s is a new class node); L'=L'u{l,=l op(t)Il=fj(n));  f?=f I V?W=lsl f?W= p ( 01; e'= c ' v ( ( n ,i)purt-ofs); m' is equal to m' except for mr(i) and m'(s) (mr(s)is immediately derivable from mr(i)and m'(n)): I f p(I) = before(I),mr(i ) = ( I k E O(o) I o E m'(n) A endIk(0) < begin(I)]; The other cases are analogously defined.
, p(I) a temporal Let n E Nrr AD(n)=(nl, n ~ ) and predicate, a slice over a temporal role-node n with p(Z) in D' is a function o,(D', n, p(Z)) = D' such that D' = D', except that: N, '= N,' v (s,i) (s and i are new class nodes); Nrtr=Nr',- ( n ) ;  f?=f1u( f ?
f s ) = b ) ;  c'=c'u(sis-an); m' is equal to m' except for mr(s): if p ( t ) = at(?
)mr(s)= m'(nt).
if p(t) = begin(?
)mr(s) = (orI 30,Ik (0 E m'(n) A Ik E O(o) A beginlk(o)= r A or = obeginId,,)}; The end(?)
operator is analogously defined as beginft).
Lr= L' v (1, = 1 0 p(I) I I =f l n ) } ;  f?
= f 1  Cf?fs)= 1, f?
(i)= P V ) 1; cr = c' v { {nl,4 ,i }part-of s); mr is equal to m' except for mr(i) and mr(s) (mr(s)is immediately derivable from mr(i),mr(nl)and m'(n2)): I f p ( I )= during(I),mr(i) = {Ik E O(<OI1 o p ) I 3 01, n, 02 (01 1 02 E m'(n) A (beginIk(ol 1 02) 2 begin(I)) A (endIk(011 0 2 ) 5 endfl))); The other cases are analogously defined.
Nrp t E T, p(t) a temporal predicate, a snapshot over a temporal role-node n with p(t) in D' is a function: (D', n, p(t)) = Ly such that D' = D , Let n  E  except that: Nr,, = N r i v ( s } ( S is a new role-node); Nrt'= Nr>- ( n ) ;  Besides the TVQOs, there is a further operator, called Time-display(Td).
It takes out temporal information generated by the slice operator.
Its application was presented in the last paragraph of the section 2.2.
Due to space limitations, we do not explain it in more details.
L'=L'u(l,=l op(t)Il=fi(n)];  f?
c'  =f1 I f f f s ) =lsl; = c ' u {AD{s) = AD(n));  m' is equal to m ' except for mr(s): If p(t) = at(?
),mr(s)= "(rat).
If p ( t ) = beginft),m'(s) = (01 1,02 I 3 01, n, 0 2 , I k (01 1 0 2 E m'(n) A E O(o1 1 0 2 ) A beginlk(ol 1 0 2 ) = t A 01 O2 = (Of 1 02) beginIk(o,1 The end(?)
operator is analogously defined as begin(t).
3.3.
Examples In this subsection, we show the formal counterpart of the examples presented in Section 2.
1) Temporal query with snapshot: "On what projects and with which salary, each employee worked on 10/01/95?"
TVQO Slice  The TVQO slice corresponds to a sequence of three selections: of either a class-node or role-node n, of the  51  during the query construction phase, the user needs to adopt a textual syntax in spite of the visual schema representation offered by the system.
GEST[16] is a visual interface for TSQL2.
It is based on the concept of event, and the basic temporal constructs in GEST are relations between events.
As such, it is not suitable to represent and query hystorical (discrete) databases, 2) Temporal query with s1ice:"Give the history of which need constructs such as class and relationship to employees' projects before 10/01/95 be modeled.
Whereas, GEST is suitable in applications The nodes EMPLOYEE and PROJECT are selected, such as monitoring or planning systems, where the data while the nodes NAME-PROJ and NAME are displayed.
change their states at fixed time intervals.
The visual Slice(before 10.01.95): language TVQL[171 shares with GEST the inadequacy Dr = Q (D',EMPLOYEEworks-onPROJECT, to represent and query historical databases.
TVQL is mainly used for video data, more specifically for before(f0.01.95)).
identifying temporal trends in video data.
However, the 3) Query combining slice with snapshot: "Which visual approach the authors adopt for query salaries did the employees earn when they changed their specification is similar to ours in using slide bars to level for the first time '' represent primitive temporal relationships.
Another The nodes EMPLOYEE and LEVEL are selected, approach is presented in [20].
It consists of a visual while the nodes NAME and SALARY are displayed.
query editor for the TEER data model, a temporal Slice(al1): extension of the Extended Entity-Relationship (EER) Dr= (D',EMPLOYEEhasLEVEL, all).
Model [12].
This work is similar to ours, the difference being in the visual query formulation.
Indeed, in [20] Time-Display: the user has to follow different procedures in order to t = Td (Dr, i, last-instant(frst-interval(1))) express semantically similar queries, while in our Snapshot(t): approach all temporal queries can be simply expressed Dr' = $e (Dr, EMPLOYEEhsSALARY, at(t )) by combining the snapshot and slice operators.
The nodes EMPLOYEE and PROJECT are selected, while the nodes NAME-PROJ and SAURY are displayed.
Snapshot (10.01.95): Dr = $e (D', EMPLOYEEworks-onPROJECT, at(f0.01.95 >) I'  ~  4.
Related Work  Conclusion  There is a considerable number of proposals for extending existing data models in order to take into account the temporal dimension.
Most of them are extensions of the relational model, as HRDM[9], TRM[22], HDBMS[23] and TSQL2[29].
Also, extensions of the Entity-Relationship Model have been developed: TEER[121, ERT[21] and TEMPORA[32].
In the object-oriented approaches, we have OSAh4*/T[30], OODAPLEX[35] and TOM[25].
Analogously, the corresponding query languages have been extended in order to manipulate temporal data.
There are SQL extensions, such as TSQL[22], HSQL[23], ERTSQL[2I], TSQL2l.291 and [15], QUEL extensions, such as TQUEL[28] and HTQUEL[14], an extension of the object language OQL[ I], called OQL/T[30], another object-oriented approach to a temporal query language is in [ I 13, while TBE[31] is an extension of QBE[36] to deal with historical databases.
To the best of our knowledge, the only proposals of visual interfaces for temporal databases are ERT/vql [33], GEST[ 161, TVQL[17] and [201.
ERT/vql is a visual language for the ERT model.
It contains an interesting feature: a result visualisation phase where advanced interactive visualisation techniques are applied over the query result.
However,  This paper is an attempt to put in a easy-to-use visual form the difficult task to formulate queries on temporal databases.
The different kinds of temporal queries (snapshot and slice) are shown in a homogeneous way, inside a global visual environment.
This approach facilitates the user in expressing the query, since s h e has not to learn any complex syntax and can incrementally formulate the query, also receiving immediate graphical feedback.
The system is actually under implementation, and the next step will be to carry out usability tests in real settings.
Moreover, future work will aim to extend the language expressive power.
In particular, we plan to: a) allow the explicit specification of quantifiers.
Currently, the existential quantifier is assumed implicitly, while universal selection must be done by using set operations; b) permit the visual specification of recursive queries.
References Alashqur A.M et al., "OQL: A Query Language for Manipulating Object Oriented Databases", Proc.
of the 15th VLDB, Amsterdam, 433-441.
August, 1989.
[2] Allen, J.F., "Maintaining Knowledge about Temporal Intervals", Comm.
ofACM, 26(1), 832-843, 1983.
[l]  52  Catarci T., Santucci G., Angelaccio M., "Fundamental Graphical Primitives for Visual Query Languages",  Information Systems, 18(2), 75-98, 1993.
Catarci T., Santucci G., Cardiff J., "Knowledge-based  [22]  Schema Integration in a Heterogeneous Environment",  Proc.
of the 2nd NGITS Conj, Naharia, Israel, 1995.
Catuci T., Chang S.K., Costabile M.F., Levialdi S., Santucci G., "A Graph-based Framework for Multiparadigmatic Visual Access to Databases", IEEE  [23] [24]  TKDE, 8(3), 455-475, 1996.
Catarci T., Costabile M.F, Levialdi S., Batini C., "Visual Query Systems: Analysis and Comparison", Journal of Visual Languages and Computing, to appear, March  [25]  1997.  oriented Specifications", IFIP TC8/WG8.I Working Conference,Canada, 323-342, 1991.
Navathe S.B., Ahmed R., 'Temporal extensions to the Relational Model and SQL", Temporal Databases, Tanzel A. et al.
(Ed.
), Series BenjamidCummings, Redwood City, CA, 92-109, 1993.
Sarda N.L., "Extensions to SQL for Historical Databases", IEEE TKDE, 2(2), 220-230, 1990.
Sawier P. et al, "Object-Oriented Database Systems: A Framework for User Interface Development", IDS Glasgow 1992, Cooper R.
(Ed.
), Series Workshop in Computing, Springer-Verlag, London, 25-38, 1993.
Schiel U., "An Open Environment for Objects with Time and Versioning", Proc.
EastEurOOpe, Bratislava, 1 16-  Catarci T., Santucci G., Cardiff J., "Graphical Interaction with Heterogeneous Databases", VLDB Journal, to appear, 1997.
Chang S.K, "Principles of Pictorial Information Systems Design", Prentice-Hall, Englewood Cliffs, NJ, 1989.
Clifford J., Crocker A., "The Historical Relational Data Model (HDRM) and Algebra Based on Lifespans", Proc.
Int.
Con$ on Data Engineering, Los Angeles, CA, 528-  125, 1991.
[26] Shneiderman B., "Direct Manipulation, a Step Beyond Programming Languages", IEEE Compurer, 16(8), 5769, 1983.
[27] Fernandes S., "Um Ambiente Grifico de Consultas a um  537, 1987.
[28] Snodgrass R.T., 'The Temporal Query Language Tquel" in ACM TODS 12(2), 247-298, 1987.
[29] Snodgrass R.T. et al, "A TSQL2 Tutorial", in SlGMOD Record, 23(3), September, 1994.
[30] Su S.Y.W..Hsin-Hsing Chen, M., "A Temporal Knowledge Representation Model OSAM*IT and Its Query Language OQL"', Proc.
of the 17th VLDB, Barcelona, 431-442.
September 1991.
[31] Tansel A.U., Arkun M.E., Ozsoyoglu G., 'Time-byExample Query Language for Historical Databases", IEEE TSE, 15(4), 464-478, April 1989.
[32] Theodoulidi B., Loucopoulos P., Wangler B., "A Conceptual Modeling Formalism for Temporal Database Applications", Information System, 16(4), 401416,  Banco de Dados Temporal Orientado a Objetos", IX Simpdsio Brasileiro de Banco de Dados, ,550 Carlos, 115, 1994.
Edelweiss N., Oliveira J., "Modelagem de Aspectos Temporais de Sistemas de InformaGilo", IX Escofa de ConzputapTo,Recife, 1994.
Edelweiss N., Oliveira J., Pemici B., "An ObjectOriented Approach to a Temporal Query language", Proc.
of 5th DEXA Con&, 225-235, Athens, Greece.
LCNS, No.
856, Springer-Verlag.
Eh" R. et al.
"A Temporal Model and Query Language for EER Databases", Temporal Databases, Tansel A. et a1 (Ed.
), Series BenjamidCummings, Redwood City, CA, 212-229, 1993.
Freksa C., "Temporal reasoning based on semiintervals", Artificial Intelligence, 54, 199-227, 1992.
Gadia S.K., "A Homogeneous Relational and Query Language for Temporal Databases" ACM TODS, 13(4),  1991.
[33] Theodoulidis B. et al., "Interactive Querying and  Visualisation in Temporal Databases", in Temporal Reasoning Workshop of the 4th DOOD Con$, Singapore,  1988.
Grandi F., Scalas M., Tiberio P., "A History-oriented Temporal SQL Extension", in Proc.
of 2nd NGITS Con$, Naharia, Israel, 1995.
Harris, W., Gray A., "Using Temporal Constructs in Temporal Databases", Recent Advances in Temporal Databases, Clifford J.
(Ed.
), Series Workshop in Computing, Springer-Verlag.
Berlin, 133-152, 1993.
Hibino S., Rundensteiner E., "A Visual Query Language for Identifying Temporal Trends in Video Data", Int.
Work.
MDBMS, New York, 74-81, 1995.
Hull R., King R., "Semantic Database Modeling: Survey, Applications and Research Issues", ACM Computing  1995.
[34] Tsotras  V.J.. Kumar A., 'Temporal Database Bibliography Update", ACM SIGMOD, 25(1), 41-51, March 1996, [35] Wuu G.T.J., Dayal U., "A Uniform Model for Temporal and Versioned Object-oriented Databases", Temporal Darabases, Tansel A. et al.
(Ed.
), Series BenjamidCummings, Redwood City, CA, 230-247, 1993.
[36] Zloof M., "Query-by-Examp1e:A Database Language", IBM Systems Journal, 21(3), 324-343, 1977.
Surveys.
19(3), 201- 260, 1987.
Jensen C.S.
et al.
"A Consensus Glossary of Temporal Database Concepts", SIGMOD-RECORD23( I), 1994.
Kouramajian V., Gertz M., "A Visual Query Editor for Temporal Databases", Proc.
of the 14th Int.
Con$ on 00 and E-R Modeling, 388-399, 1995.
Loucopoulos P., Theodoulidis B., Pantazis D., "Business Rules Modelling: Conceptual Modelling and Object-  53