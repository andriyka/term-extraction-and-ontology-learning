A Decidable Temporal Logic for Events and States Savas Konur School of Computer Science University of Manchester Manchester, M13 9PL, UK Email: konurs@cs.man.ac.uk  Abstract This paper introduces a new interval temporal logic, TPL*.
Existing interval temporal logics, we claim, are inadequate to represent the meanings of certain natural language constructions, despite exhibiting high computational complexity.
TPL* overcomes these problems, presents the semantics of some natural language constructions, and captures important real-time problems like behaviour of complex systems.
1.
Introduction In a sentence of natural language temporal information is stored in temporal constructions such as prepositions.
In order to understand the semantics of a sentence in English or in any other language it is very important to capture temporal meanings.
The formal semantics of temporal constructions in English have been investigated by various researchers [3, 4, 6, 13].
Most of the temporal logics in the literature, particularly interval temporal logics, are not expressive enough to capture the meanings of natural language constructions, and they are not convenient to represent temporal expressions.
In addition, these formal systems exhibit high computational complexity.
In order to overcome these drawbacks we have introduced a computationally manageable interval temporal logic, called TPL*, which has affinity with the syntax of temporal constructions in English, and which is convenient in presenting the semantics of natural language constructions.
TPL* is an extension of the logic TPL [11].
TPL* covers both event and state types in order to treat the semantics of different sentence categories.
Modelling real-time requirements is also an important consideration in this paper.
That is, we want TPL* to have expressive power of representing the behaviour and specifications of complex systems.
Most formal methods of the behaviour of real-time systems are either event-based or state-based.
Therefore, TPL* should cover both event-based and statebased views.
TPL* also includes the notion of duration since states are characterized by a duration.
The duration of a state is the length of the time period during which the system remains in that state.
State models and state durations have been found useful for reasoning about time durations for a dynamic system.
TPL* can also deal with the duration of an event.
In this paper syntax and semantics of TPL* will be presented.
In addition a terminating tableau system will be  proposed for the logic to show that its satisfiability problem is decidable, and is in NEXPTIME.
2.
Event and State Models The logic TPL deals only with the semantics of the fragment of English concerning event-type sentences.
However, in English there are more sentence categories than event typesentences.
In order to understand the meaning of a sentence in English, the formal system which represents the semantics of the sentence must have sufficient expressive power to capture different sentence categories.
A long-standing tradition in the linguistic and philosophical literature divides simple sentences into categories.
In [15] Vendler classified (tense-less) sentences into four different types: achievements, accomplishments, activities and states.
However, [10] proposes that for the purposes of accounting for the semantics of temporal constructions, the minimal distinction between event types and ongoing process or state-types suffices.
Consider the sentences "John wrote the letter", and "John worked on the letter".
The former reports a completed event, while the latter reports an ongoing process or statetypes.
In order to treat the semantics of different sentence categories TPL needs to be extended with the notion of state.
So far, we have only mentioned the natural language semantics considerations.
Our aim is to develop a computationally manageable logic which not only has sufficient affinity with the syntax of temporal expressions in English, but also model real-time requirements.
Most formal methods of the behaviour of real-time systems are either event-based or state-based.
Therefore, a formal method should cover both event-based and state-based views.
Although TPL can deal with the semantics of natural language constructions, it lacks the expressive power of representing the behaviour and specifications of complex systems.
Hence, we need to extend TPL with the notion of state.
Once we have a temporal logic endowed with state models it is natural to extend it with the notion of duration since states are characterized by a duration.
The duration of a state is the length of the time period during which the system remains in that state.
State models and state durations have been found useful for reasoning about time durations for a dynamic system.
TPL* can also deal with the duration of an event.
Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE  3.
TPL* : A Temporal Logic for Events and States TPL* is an interval temporal logic which is an extension of TPL with the notion of state models and durations.
Thus, it contains both event-based and state-based views.
By extending TPL we aim at developing a decidable logic for specifying properties of finite sequences of states, and presenting the semantics of temporal constructions in English.
Since TPL lacks the chop modality , which is necessary to capture important real-time problems like behaviour of complex systems, we make a further extension over TPL, and introduce the chop modality into our new logic.
In this section we present syntax and semantics of TPL*.
We also propose a terminating tableau system for the logic, thus showing that its satisfiability problem is decidable.
Indeed, this section provides a complexity bound for TPL*satisfiability, showing that this problem is still in NEXPTIME.
In the literature various tableau methods have been developed for linear and branching time point-based temporal logics.
However, there exist very few tableau methods for interval temporal logics and duration calculus.
The main reason is that operators of interval temporal logics are in many respects more difficult to deal with.
In this section we will also show that addition of chop operator into the logic does not harm the complexity results.
denotes the set of intervals, where an In the sequel, interval is closed, bounded, non-empty subset of .
Temporal variables are denoted by the variables which range represents the interval and over .
Given that represents the interval where and , the partial functions and denote the intervals and , respectively.
Assume that and denotes a fixed infinite set of event atoms and state variables, respectively, and , .
The set of event expressions is defined by , where the letter and stand for the adjectives first and last, respectively.
That is, denotes the first of finitely many events of type , and similarly denotes the last of finitely many events of type within a temporal context (see [11] for more details).
The set of duration expressions, denoted by , is defined as follows:  Definition 1.
Let closed, non-empty  be the set of all bounded, intervals of real numbers , be an infinite set of event atoms, and be an infinite set of states.
A TPL* model is a finite subset of such that for all if , then .
For any , , and , , and are defined as follows:  The definition implies that if , then is a maximal pair meaning that the state s holds over an interval and any subinterval of .
That is, intuitively holds throughout ; thus implies that the state .
Definition 2.
Let be a model for TPL* and formal semantics is then defined as follows: iff iff iff iff iff iff and  such that such that  .
The  and implies  such that  and  implies such that  and  where denotes the length of the interval .
The rest of the semantics is defined as in TPL (see [11]).
The negation operator ( ) in a duration expression can be moved inwards as follows:  where the corresponding inverted operator of (For example, is the inverted operator of , is that of , etc.)
and can be defined similarly.
3.1.
Semantics of Some Sentences  where the symbol denotes the time length of a given state or event, k is a constant, and .
The terms, denoted by , have the following syntax: .
Then the formulas of TPL* can be recursively defined as follows: .
where and are TPL* formulas.
The connectives can be defined in usual way.
and  In order to show how TPL* represents the English sentences including the temporal constructions we will consider the semantics of some sentences in a fragment of English.
Consider the following sentences: (3.1) A warning is received during every control period until the water level becomes normal.
(3.2) After a drop in the water level, a warning is received during every control period until the water level becomes normal.
Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE  The meaning of (3.1) is that, within the given temporal context , there is a definite interval over which the water level is normal and over every interval , which is subsumed by the initial segment of up to the beginning of , a control subsumes some interval over which a period occurs, and warning is received.
The sentence (3.1) is represented by the TPL* formula .
(3.3)  The sentence (3.2) can be represented by the TPL* formula (3.4)  .
Let us look at how TPL* represents the event-typed and state-typed English sentences including duration.
Consider the following sentences: (3.5) John solved a problem in less than ten minutes during every lunch break.
(3.6) John worked on the exercises for a period of less than ten minutes during every lunch break.
Definition 3.
Given a non-empty model , the depth of is the greatest m for which there exist such that for all and for some , , .
The depth of an empty model is defined to be 0.
When we determine the depth of a model, we only consider event types.
Since states are maximal, and true over all subintervals, they are not involved in the definition of depth.
Now we will show that we can reduce the size of satisfying models in such a way that the depth of resulting models are polynomially bounded on the length of the formula.
we will More formally, for a given satisfying model , whose depth is find a reduced satisfying model bounded by , such that implies .
Before starting the formal proof, we will give some definitions.
Definition 4.
Assume that operators in a given TPL* formula are moved inwards, as shown in Lemma 1, and contains only event-atoms and state variables involved in .
Let be the set of subformulas of event atom e in , and every interval , we define , as follows:  These sentences can be represented in TPL*, respectively, as follows: (3.7) (3.8) As we can see, TPL* differentiates between the state-typed and event-typed sentences.
If a sentence includes a duration, a duration expression is associated with it.
3.2.
Decidability Results In this part we will show that TPL* is a decidable logic.
Indeed, the satisfiability problem for TPL* is in NEXPTIME.
This is proved by building models whose sizes are exponentially bounded.
Certain parts of the following proof have been taken verbatim from [11].
Lemma 1.
In a TPL* formula inwards such that exists only in is equivalent to ).
operator can be moved and (which  and .
In a TPL* formula Proof.
The proof is trivial for the operator can be moved inwards as follows:  where , , , TPL* and the , , corresponding inverted operator of .
, can be treated similarly ( ).
By means of this lemma we can normalize the forms of TPL* formulas.
is redundant if and there exist such that .
records If we look at the definition, we can see that the subformulas of which are true at an interval J, except of the subformulas which are true at some subinterval with .
Any is a maximal pair, and it is not redundant.
Lemma 2.
Let the number of symbols in a given TPL* formula be denoted by .
For a given model and interval , if , then there exists a model , with depth at most , such that .
Proof.
Now we will reduce the model removing redundant pairs:  IEEE  by  Let m be the number of event atoms occurring in , be the number of event atoms occurring in , and be the number of subformulas of .
If such that and , then and are disjoint.
That is, the depth of the chain of the intervals at which e occurs is bounded by the number of the subformulas of in which e is mentioned.
The depth of the chain of the intervals at which a state s holds is 1 since we only consider maximal is bounded by .
Since states.
Therefore, , and , it easily follows we know that that the depth of is bounded by .
, Now we must show that, for all and all implies .
We will use structural induction on the complexity of .
Base Case : Suppose  Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  to  or  : Trivial  : By the semantics definition we know that there is such that .
Since is a maximal pair, it cannot be redundant; therefore .
Thus, .
no that  : By the semantics definition we know that there is such that .
Since , it is clear .
Thus, .
: There are two cases that we need to consider.
with .
Since In the first case, there is no , it is clear that , and thus .
In the other case, there exist two different intervals and such that and .
If and is redundant , then neither of and .
Thus, .
Otherwise, if is redundant, there must exist such that and .
Since these pairs are nonredundant, they must occur in , i.e.
and .
Thus, .
The situation in which is redundant can be handled similarly.
: By the semantics there exits such and .
If is not redundant, .
Thus, .
Otherwise, there must exist such that and are not and .
Since redundant; therefore , we have either ( ) and or ( ) and .
For the first case we have .
So must be true at both and , implying and .
Therefore, we have .
: By the semantics, for all implies .
We know that non-redundant elements of do not occur in .
By the inductive hypothesis implies for each such that is non.
redundant .
Thus, : There exists a unique .
Since there is no , is not redundant; therefore implies inductive hypothesis have .
and  : There exists a unique minimal-first interval such that and .
Since there is no with , is not minimal-first interval redundant; therefore .
By the inductive hypothesis implies .
Then, .
: There exists a unique such that .
Since there is no with , is not redundant; therefore .
By the inductive hypothesis implies .
Thus, .
and  ,  that  : By the semantics we know that for all implies .
If there is no redundant , then .
If there are some redundant pairs of , they will not be included in .
For all other nonredundant , implies .
Then, .
: By the semantics there is such that and .
Since is a maximal pair, it .
cannot be redundant.
So, we have : By the semantics, for all implies .
Since we know that is a maximal pair, it cannot be redundant.
Thus, .
Inductive Case: Suppose : There is such that and .
If is not redundant .
By the inductive hypothesis implies .
Otherwise, such that and there must exist are not redundant; therefore and .
, it is clear that .
By the inductive Since implies .
Then, hypothesis .
,  IEEE  ,  , , : These cases can be dealt with  similarly.
: By the semantics, there exists and and and inductive hypothesis then easily have .
such that .
By the .
We  , : These cases are treated in a .
similar way to of , we Before constructing a sub-interpretation define: , assume that operators Definition 5.
Given are moved inwards, as shown in Lemma 1, and the in depth of is at most by Lemma 2.
Let be the set of subformulas of .
A formula is basic if the major is neither nor .
For any interval connective of and any , the set of all maximal basic subformulas of with is denoted by which entails .
Lemma 3.
If a TPL* formula is satisfiable , then there is a terminating tableau procedure for which constructs a tree, from which is extracted, of size bounded by for some fixed polynomial .
Proof.
Given the assumptions in the definition, suppose that .
The procedure tree grows a labelled tree with nodes , edges , and two labelling functions : and : , where denotes the power set of .
For , denotes the interval represented by denotes some collection of formulas the node , and which must be true at this interval.
The procedure tree is shown in Figure 1.
In the figure, , and  Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  such that with .
By the .
So, we  denotes the queue of nodes in awaiting processing.
The ensure that existential formulas in have steps in tree witnesses as required, and the embedded calls to univ ensure that universal formulas in are not falsified by these witnesses.
terminates after We claim that the procedure tree finitely many iterations, and upon termination the tree satisfies the size bound of .
The steps in the procedure ensures that if the tree contains a path tree , then .
On the other hand, if we investigate the procedure univ we can see that univ adds at most symbols to at most different values, where is the depth of and .
Since we know that must be at most of order , the length of the path is at most of order .
Thus, the eventual size of the tree is bounded by .
Theorem 1.
The satisfiability problem for TPL* is in NEXPTIME.
Proof.
If a TPL* formula is satisfiable , then is satisfied in a model of size bounded by for some fixed polynomial .
can be extracted from the tree which is .
Let { for constructed by tree some , }.
By Lemma 3 we know that is of size bounded by , for some fixed polynomial .
In .
[8] it was proved that We make a last remark that we have assumed TPL* is interpreted over a linear time flow and only finitely many events and states can occur over a bounded-time interval.
begin tree Select object ; until  ;  Q, and set  for every  1)  If  ;  , there exits  such that  ; .
, there is no  If  IEEE  .
Select  ;  ;  with  ;  .
Since  ,  .
3)  If  , there exit and  , such that , .
Choose either or .
Select  and set ;  ;  ;  ;  ;  ;  .
Execute univ  4)  If Select  , there exits and set  If Select  , there exits and set  6)  univ  7)  and ;  ; .
Execute  , there exits a unique  such that  and set ;  and  ;  ; .
Execute  .
, there exits a unique  and  such that  .
Let  set  ;  .
Select ;  ;  ; .
Execute univ  If  and  ;  ;  9) 10)  ;  .
.
Select ;  8)  .
;  .
such that ;  .
and  ;  ; If  univ If  ;  .
Execute univ  and set  .
; such that  .
Select  .
and  ;  ; , there exits  If  and univ  such that  ;  5)  and univ  , proceed similarly.
, there exists such that and and set  ;  .
Select ;  ;  ;  ; .
Execute univ  .
and  .
Let  ; and univ  .
end for every end until end tree begin univ for every formula with  such that  and there exists  do  Set end for every end univ  Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  ;  do  and set  2)  ;  do  Select  4.
Conclusion In this paper we introduced an interval temporal logic TPL* to represent meanings of sentences in English, and capture important real-time problems like behaviour of complex systems.
TPL* is an extended version of TPL with the notion of state models, durations and the chop modality.
Thus, it contains both event-based and state-based views.
We mentioned some drawbacks concerning the problems of interval temporal logics in natural language discourse, and real-time systems domain.
In particular, in order to overcome the drawbacks with TPL we extended the syntax of TPL while keeping the logic computationally decidable.
By this extended notation we aimed at presenting the semantics of natural language constructions, and modelling behaviour of real-time systems.
In order to preserve decidability we also extended the tableau system for the logic TPL.
By showing that the tableau method terminates even for this extended logic we proved the satisfiability problem is decidable.
Indeed, we showed that this problem is in NEXPTIME.
The future research directions include using other standard proof techniques to investigate the decidability of the satisfiability problem of TPL*, giving an axiomatization of TPL* complementing the semantic view, providing a framework for processing multiple temporal constraints and extending the  , and set  Fig.
1.  tree  decision method with a temporal constraint network resolution algorithm, investigating the expressive power of TPL* in natural language discourse and specification of real-time systems, and investigating feasible model checking methods for TPL*.
Acknowledgement The author would like to thank Ian Pratt-Hartmann for valuable discussions and comments on this paper.
References [1] van Benthem J. F. The Logic of Time.
Dordrecht, 1983.
[2] Chaochen Z., Hansen M. R. Duration Calculus.
A Formal Approach to Real-Time Systems.
EATCS Series of Monographs in Theoretical Computer Science, Springer, 2004.
[3] Crouch R., Pulman S. G. Time and Modality in a Natural Language Interface to a Planning System.
Artificial Intelligence, vol.
63, num.
1-2, 1993, pp.
265-304.
[4] Dowty D. Word Meaning and Montague Grammar.
Dordrecht: D. Reidel, 1979.
[5] Goranko V., Montanari A., Sciavicco G. Road Map of Interval Temporal and Duration Calculi.
Journal of Applied Non-Classical Logics, vol.
14, 2004.
[6] Hwang C. H., Schubert L. K. Interpreting tense, aspect and time adverbials.
Proceedings of the First International Conference on Temporal Logic, Lecture Notes in Computer Science, Springer, vol.
827, 1994, pp.
238-274.
[7] Kamp H. Events, Instants and temporal reference.
Semantics from Different Points of view, Springer, 1979, pp.
376-417.
[8] Konur S. A Decidable Interval Temporal Logic.
First Year Progress Report, University of Manchester, 2005.
[9] Moszkowski B.
Reasoning about Digital Circuits.
PhD Thesis, Stanford University, Computer Science Department, 1983. .
[10] Pratt-Hartmann I., Bree D. The Expressive Power of the English Temporal Preposition System.
University of Manchester, Department of Computer Science Technical Report, UMCS-93-1-7.
[11] Pratt-Hartman I. Temporal Prepositions and their logic.
Artificial Intelligence, vol.
166(1-2), 2005, pp.
1-36.
[12] Pratt-Hartman I., Francez N. Temporal Prepositions and Temporal Generalized Quantifiers.
Linguistics and Philosophy, 24(2), 2001, pp.
187-222.
[13] Roper P. Intervals and tenses.
Journal of Philosophical Logic, 1980, pp.
451-469.
[14] Ter Meulen A. G. Representing Time in Natural Language.
MIT Press, Cambridge, 1996.
[15] Venema Y.
A Modal Logic for Choppping Intervals.
Journal of Logic and Computation, vol.
1, 1991, pp.
453-476.
[16] Vendler Z. Linguistics and Philosophy.
Cornell University Press, 1967.
Proceedings of the Thirteenth International Symposium on Temporal Representation and Reasoning (TIME'06) 1530-1311/06 $20.00 (c) 2006  IEEE