2009 16th International Symposium on Temporal Representation and Reasoning  Building Logical Specifications of Temporal Granularities through Algebraic Operators Carlo Combi and Sara Degani Department of Computer Science, University of Verona (Italy) Strada le Grazie 15, I-37134 Verona, Italy e-mail: {carlo.combi, sara.degani}@univr.it  means of logical formulae defined over these structures.
The algebraic approach assumes a bottom granularity, and defines a finite number of algebraic operators that generate new granularities from existing ones.
A time granularity may therefore be identified by means of an algebraic expression [7].
Algebraic operators are intuitive and new granularities may be easily derived from existing ones.
Nevertheless, in algebraic frameworks few attention is given to the investigation of algorithms checking the existence of meaningful relationships between granularities, e.g., verifying if the granularity G1 is equivalent to the granularity G2 ; moreover, only a finite number of time granularities may be expressed in this kind of approach through a finite number of expressions.
In this paper we consider the logical framework of Combi et al.
[3], that represents time granularities by means of labelled linear time structures, identified by suitable Past Propositional Linear Time Logic formulae; this framework allows one to express both anchored and unanchored granularities (i.e., possibly infinite granule sets, anchored to different time points on the time domain).
However, formulae corresponding to real world granularities may correspond to long formulae, not easy to read and understand.
The goal of the approach we present here is to allow one to define a large set of granularities, possibly corresponding to complex formulae, in a natural way, as it happens with the algebraic approach.
To this end, we show how the basic operators of the calendar algebra proposed by Ning et al.
[7] can be expressed on a labelled linear time structure by means of suitable logical PPLTL formulae.
This way, it is possible to specify granularity-related formulae in an easier way through operators that are intuitive and natural as the algebraic ones, still maintaining the capability of reasoning on granularities through the (formal) techniques that have been deeply investigated for the logical framework [3].
The paper is structured as follows.
Section II introduces time granularities and presents the considered logical and algebraic frameworks; Section III defines new logical formulae encoding algebraic operators.
Section IV concludes the paper with final discussion and remarks.
Abstract--Logical and algebraic approaches have been proposed in the literature for the definition and the management of time granularities.
In the algebraic framework, a bottom granularity is assumed, and new granularities are created by means of suitable algebraic operators.
In the logical framework, mathematical structures are used to represent time granularities, and logical formulae are used to specify meaningful properties betweeen them.
In this paper we extend the logical approach of Combi et al.
[3] for representing and reasoning about temporal granularities, defining logical formulae corresponding to calendar algebra operators.
This approach allows one to define a large set of granularities, possibly corresponding to complex formulae, in a natural way.
Indeed, it gives the possibility of specifying granularityrelated formulae in an easier way through operators that are intuitive and natural as the algebraic ones, still maintaining the capability of reasoning on granularities through the (formal) techniques that have been deeply investigated for the logical framework.
Keywords-temporal granularity; temporal logics; granularity specifications.
I. I NTRODUCTION A fact of the real world is usually described with reference to the temporal dimension, expressed by means of time units such as day, month, year.
A time unit can be represented by means of a time granularity, i.e., the representation on a temporal domain of groups of elements that are perceived as inseparable units called granules.
Furthermore, in several research areas of computer science, such as formal specifications, data mining, and temporal databases it is considered of primary importance the capability of providing temporal representations of the temporal dimension of a fact at different levels of granularity, and of managing the relationships between them.
Logical and algebraic approaches have been proposed for the definition and the management of time granularities in the literature [3], [4], [7].
In the logical approach, mathematical structures are used to represent granularities and relationships between them; these structures consist of a possibily infinite set of different time domains.
Specific operators allows one either to express properties in a given time domain or to relate different time domains.
Properties involving different time granularities are then expressed by 978-0-7695-3727-6/09 $25.00 (c) 2009 IEEE DOI 10.1109/TIME.2009.19  107  II.
BACKGROUND  specifically, a linear temporal axis is considered, and the granules of a granularity G are represented on it by means of the propositional symbols PG and QG : the starting point of a granule of G in the structure is labelled by PG , the ending point is labelled by QG .
Definition 3: Let G = {G1 , .
.
.
, Gn } be a finite set of granularites, (a calendar), and PG = {PGi , QGi |1 <= i <= n} a finite set of proposition symbols associated with the calendar G. Given an alphabet of proposition symbols P [?]
PG , a P-labelled linear time structure has the form (N, <, V ), where (N, <) is the set of natural numbers with the usual order and V : N - 2P is a labelling function that maps natural numbers to sets of proposition symbols.
  The main approaches for representing and managing time granularities, we will consider in this paper, are the logical [3], [4] and the algebraic [7] ones.
Before presenting in sections II-A and II-B the logical framework of Combi et al.
[3], and the algebraic approach of Ning et al.
[7], let us start with the introduction of some basic and widely acknowledged notions about time granularities [1].
Definition 1: A time domain is a pair (T , <=), where T is a non-empty set of time instants and <= is a total order on T.  A time domain is a set of primitive temporal entities used to define and interpret time-related concepts, and ordered according to the relationship <=.
Examples of time domains are natural numbers (N, <=), integers (Z, <=), rational (Q, <=) and real numbers (R, <=).
Definition 2: A granularity is a mapping G : Z - 2T such that (1) if i < j and G(i) and G(j) are non-empty, then each element of G(i) is less than all the elements of G(j), and (2) if i < k < j and G(i) and G(j) are nonempty, then G(k) is non-empty.
  Not every assignment of proposition symbols to the timeline by means of the labelling function V defines a time granularity.
Therefore, the framework introduces the notion of consistency of a labelled structure with respect to a temporal granularity G, allowing one to identify assignments that define time granularities: a labelled linear time structure (N, <, V ) is said G-consistent if every point labelled with PG matches with a unique point labelled with QG , and vice versa.
The syntax of PPLTL is defined as follows.
Definition 4 (Syntax of PPLTL): Formulae of PPLTL are inductively defined as follows:  The domain of a granularity G is called index set, and an element of the codomain G(i) is called a granule.
A granularity G is said externally continuous if there are no gaps between non-empty granules of G; internally continuous if there are no gaps inside the granules of G; continuous if it is both externally and internally continuous.
Given two granularities G1 and G2 , a number of meaningful relationships can be estabilished between them: * FinerThan(G1 , G2 ) holds if for each index i, there exists an index j such that G1 (i) [?]
G2 (j).
For instance, FinerThan(day, month) holds.
* SubGranularity(G1 , G2 ) holds if for each index i there exists an index j such that G1 (i) = G2 (j).
For example, Subgranularity(Sunday, day) holds.
* Group(G1 , G2 ) holds if for each index i, there exists a set S (either empty or in S the form {j, j + 1, .
.
.
, j + k}) such that G2 (i) = l[?
]S G1 (l).
For example, Group(day, week) holds.
* Shift(G1 , G2 ) holds if there exists p >= 0 such that, for each index i, G2 (i) = G1 (i + p).
* Partition(G1 , G2 ) holds if both Group(G1 , G2 ) and FinerThan(G1 , G2 ) hold.
* * *  a proposition symbol P [?]
P is a PPLTL formula; if ph and ps are PPLTL formulae, then ph [?]
ps and !ph are PPLTL formulas; if ph and ps are PPLTL formulae, then Xph, phUps, X-1 ph and phSps are PPLTL formulae.
 Moreover: * * * * * * *  ph [?]
ps is defined as: !
(!ph [?]
!ps); ph - ps is defined as: !ph [?]
ps; ph - ps is defined as: (ph - ps) [?]
(ps - ph); Fa (a will hold in the future) is defined as: trueUa; Ga (a will always hold in the future) is defined as: !F!a; Pa (a held in the past) is defined as: trueSa; Ha (a always held in the past) is defined as: !P!a.
where true = P [?]
!P , for a some P [?]
P. Temporal operators in {X, U, X-1 , S} have priority over boolean operators {[?
], [?
]}; moreover !
has priority over [?]
and over [?
], and [?]
has priority over [?].
PPLTL logic is interpreted in P-labelled linear time structures.
The semantics of PPLTL is defined as follows.
Definition 5 (Semantics of PPLTL): Let M = (N, <, V ) be a P-labelled linear time structure and i [?]
N. The truth of a PPLTL formula ph in M with respect to the point i, denoted with M, i |= ph, is defined as follows:  A.
The Logical Framework In the logical framework introduced in [3], time granularities are modelled by means of a specialized version of Definition 2, assuming that both the index set and the domain of granules are the linear discrete domain (N, <=).
Moreover, an internally continuous time granularity G is represented by means of a labelled linear time structure, identified by a suitable linear time formula in the context of Past Propositional Linear Time Logic (PPLTL).
More 108  M, i |= P M, i |= ph [?]
ps M, i |= !ph M, i |= phUps  iff iff iff iff  M, i |= Xph M, i |= phSps  iff iff  M, i |= X-1 ph  iff  P [?]
V (i) for P [?]
P; M, i |= ph and M, i |= ps; is not the case that M, i |= ph; M, j |= ps for some j >= i and M, k |= ph for each i <= k < j; M, i + 1 |= ph; M, j |= ps for some j <= i and M, k |= ph for each j < k <= i; i > 0 and M, i - 1 |= ph.
The above proposal copes with internally continuous granularities.
In [3] it is extended to also cope with granularities with gaps inside the granules.
The set of proposition symbols associated with the granularity G is extended to include the symbols PHG and QHG , that are used to delimit any gap inside the granules of G. The description of gaps of G is therefore the description of a granularity HG , such that FinerThan(HG , G) holds.
The definition of consistency is extended to also consider gaps inside the granules of a granularity: a labelled linear time structure is said G-gapconsistent if it is G-consistent and HG -consistent, if each granule of HG is a subset of some granule of G, and if no granule of G is the union of some granules of HG .
A G-gap-consistent linear time structure corresponds to a (not necessarely continuous) granularity, and vice versa.
The set of (not necessarely continuous) granularities Gran(G) is then expressed by the following formula:   We say that: * M is a model of ph if M, 0 |= ph; * a formula ph is satisfiable if and only if there exists a P-labelled linear time structure that is a model of ph; * a formula ph is valid if and only if every P-labelled linear time structure is a model ph.
Note that ph is valid if and only if !ph is not satisfiable.
A PPLTL formula intensionally defines a possibly infinite set of labelled linear time structures (the set of the models of the formula).
Since a linear time structure defines a granularity, linear time logic formulae can be used to define possibly infinite sets of granularities.
In the following, according to [3], we show some examples of PPLTL formulae defining sets of time granularities.
The set of internally continuous granularities is captured by the following PPLTL formula:  FinerThan(HG , G) [?]
G(PG - !a) where a is PHG [?]
((QG [?]
QHG )[?]
X((!QG [?]
(QHG - XPHG ))U(QG [?]
QHG ))).
B.
The Algebraic Framework  IntContGran(G) = G((PG - a) [?]
(QG - b)), where a is b is  The algebraic framework presented in [7] considers an extension of Definition 2, that associates a label to each granule.
A labelled granularity is a pair (L, G), where L is a (possibly non contiguous) subset of Z, and G is a mapping from L to the subset of the time domain T ; L is the set of labels of G, and its elements may be used to identify the granules of a granularity.
An extension of some of the relationships between granularities to labelled granularities is then provided [7].
In particular:  QG [?]
X(!
(PG [?]
QG )U(!PG [?]
QG )), and PG [?]
X-1 (!
(PG [?]
QG )S(PG [?]
!QG )).
The first conjunct (PG - a) of the formula states that every point labelled with PG matches with a unique point labelled with QG , while the second conjunct (QG - b) states that every point labelled with QG matches with a unique point labelled with PG ; in other words, they capture the definition of consistency of a granularity.
The set of continuous granularities is captured by the formula ContGran(G), defined in a similar way [3].
Binary relations between granularities may be expressed by means of PPLTL formulae involving a finite number of different granularities, represented with different pairs of marking proposition symbols.
The relationship FinerThan(G1 , G2 ) is captured by the following formula:  *  *  IntContGran(G1 ) [?]
IntContGran(G2 ) [?]
G(PG1 - ((!PG2 [?]
!QG2 )SPG2 [?]
(!PG2 [?]
!QG2 )UQG1 )).
LabelledAlignedSubgranularity(G1 , G2 ) holds if each label i of G1 is also a label of G2 , and G1 (i) = G2 (i).
For instance, if each Sunday has the same label of the corresponding day, then LabelledAlignedSubgranularity(Sunday, day) holds.
Partition(G1 , G2 ) hols if both Group(G1 , G2 ) and FinerThan(G1 , G2 ) hold.
For instance, Partition(day, week) holds.
The algebraic approach defines a symbolic representation of granularities termed calendar algebra [7].
This representation captures the relationships between the granularities of a calendar, and it is composed of two kinds of operations: grouping-oriented operations and granule-oriented operations.
Grouping oriented operations combine certain granules of a granularity together to form the granules of the new granularity, while granule oriented operations make  The formula requires each granule of G1 to be included into some granule of G2 ; more than one granule of G1 may be included in the same granule of G2 .
The relationship SubGranularity(G1 , G2 ) is expressed in a similar way [3].
109  3) The Shifting Operation: The shifting operation is defined as follows [7].
Definition 8: Let G be a granularity, and let m be an integer.
The operation Shiftm (G) generates a new granularity G0 by performing a shift of m positions of the labels of G. Formally, for each integer i, G0 (i) = G(i - m).
  choices of which granules should remain in the new granularity.
In the following we present the grouping oriented operations, and the granule-oriented operation Select-down.
1) The Grouping Operation: The grouping operation is defined as follows [7].
Definition 6: Let G be a granularity, and m a positive.
The grouping operation Groupm (G) generates a new granularity G0 by partitioning the granules of G in groups of m granules; each group is a granule of G0 .
Formally, for each Si*m 0 integer i, G (i) = j=(i-1)*m+1 G(j).
  The shifting operation can be used to express time differences.
For example, since the hours of New York are three hours later than those of Los Angeles, the hours of New York can be generated by LA-Hour = Shift-3 (NY-Hour), where the granularities NY-Hour and LA-Hour stand for the hours of New York and Los Angeles respectively.
4) The Combining Operation: The combining operation is defined as follows [7].
Definition 9: Let G1 and G2 be two granularities with label sets L1 and L2 respectively.
The operation Combine(G1 , G2 ) generates a new granularity G0 by combining in a granule of G0 all the granules of G2 that are included in a granule of G1 .
Formally, for each i [?]
L1 , let  [?]
if G1 (i) = [?
], s(i) = {j [?]
L2 |[?]
= 6 G2 (j) [?]
G1 (i)} otherwise.
For example, week = Group7 (day).
2) The Altering-tick Operation: Let G1 and G2 be two granularities, such that Partition(G2 , G1 ) holds, and let l, k, m be integers such that 1 <= l <= m. Since Partition(G2 , G1 ) holds, each granule of G1 is composed of some contiguous granules of G2 ; moreover, the granules of G1 may be partitioned in groups of m granules.
The altering-tick operation Alterm l,k (G2 , G1 ) modifies the granules of G1 so that the lth granule of each of each group has |k| additional (or fewer when k < 0) granules of G2 .
For each i = l + m * n, with n [?]
Z, G1 (i) is the granule that is expanded (or shrunk).
If i > 0, G1 (i) expands (or shrinks) by taking in (or pushing out) later granules of G2 , and the effect is propagated to later granules of G1 ; if i < 0, G1 (i) expands (or shrinks) by taking in (or pushing out) earlier granules of G2 , and the effect is propagated to earlier granules of G1 .
Definition 7: Let G1 and G2 be two granularities, such that Partition(G2 , G1 ) holds, and let l, k, m be integers such that 1 <= l <= m. For each integer i such thatSG2 (i) 6= [?
], ti let bi and ti two integers such that G2 (i) = j=b G1 (j) i (they exist because Partition(G1 , G2 ) holds).
Then G0 = Alterm l,k (G1 , G2 ) is the granularity such that for each integer i: ( [?]
if G2 (i) = [?]
St01 G0 (i) = G (j) otherwise 1 j=b0  Then, G0 = Combine(G1 , G2 ) is the granularity with label 0 set LG0 = S {i [?]
L1 |s(i) 6= [?]}
such that for each i [?]
LG , G0 (i) = j[?
]s(i) G2 (j).
 For example, given the granularities month and businessDay, the granularity for business months can be generated by businessMonth = Combine(month, businessDay), since each business month is the union of all the business days in the month.
5) The Anchored-grouping Operation: The anchoredgrouping operation is defined as follows [7].
Definition 10: Let G1 be a simple granularity and G2 be a granularity with label set L2 , such that LabelAlignedSubGranularity(G2 , G1 ) holds.
The operation Anchored-group(G1 , G2 ) generates a new granularity G0 by combining in a granule of G0 all the granules of G1 that are between two granules of G2 .
Formally, G0 = Anchored-group(G1 , G2 ) is the granularity with label set LG0 = L2 such that for each i [?]
LG0 , G0 (i) = Si0 -1 0 j=1 G1 (j), where i is the next label of G2 after i.
  i  where b0i =    bi + (h - 1) * k bi + h * k  if i = (h - 1) * m + l, otherwise,  For example, if a fiscal year begins in October and ends in the next September, the granularity that corresponds to fiscal years can be generated by fiscal-year = Anchoredgroup(month, October).
6) The Select-down operator: The select-down operation is defined as follows [7].
Definition 11: Let G1 and G2 be two granularities and let k, l two integers such that k 6= 0 and l > 0 be two integers.
The operation Select-downlk (G1 , G2 ) selects granules of G1 by picking up l granules starting from the kth one in each set of granules of G1 that are contained in a granule of G1 .
t0i = ti + h * k, and h=b  i-l c + 1. m   For example, if G = Group30 (day) (i.e., G has granules of 30 days), the operation Alter12 5,1 (day, G) adds a day (k = 1) to the fifth group of each set of 12 of such groups (l = 5, m = 12).
110  1  l Formally, G0 = Select-down k (G1 , G2 ) is the granularity S with label set LG0 = i[?
]L2 dkl ({j [?]
L1 |[?]
= 6 G1 (j) [?]
G2 (i)}), and for each i [?]
LG0 , G0 (i) = G1 (i).
  2  Q  P  P  G1  III.
L OGICAL D EFINITION OF A LGEBRAIC O PERATORS  6  Q  9 10 11 12 13 14 15 16 17 18 19  8  7  Q  G1  G1  H G2  G2  In this section we define the previously described algebraic operators by means of logical formulae according to the framework presented in Section II-A.
In the following, instead of providing formal proofs that the introduced formulae are equivalent to the corresponding algebraic expressions, we discuss and introduce the meaning of the different parts of formulae, to allow one to have an overall comprehension of the proposed approach.
Examples throughout this section and a real-world example related to the medical domain at the end of this section will complete the description of the introduced formula.
5  P  P  For example, Sunday = Select-down11 (day, week)  4  3  H G2  Figure 1.
Q  Q  P  G1 G1  P  G1  G1  Q  P  H G1  P  P  Q  H G2  G2 G2  Q  H G1 G 1  H G2  Q  G2  The grouping operation  conditions on the beginning and the end of the granules of G3 it is necessary to quantify such expansion, since it affects the definition of later granules of G3 .
Figure 2 represents the grouping of the granules of G2 in groups of two granules (m=2); for the first two of such groups (p=2) the operation expands the second granule (l=2) with a granule of G1 (k=1).
In order to mark the beginning and the end of the granule of G3 corresponding to the second group of granules of G2 , it is necessary to consider the expansion of the earlier group; indeed, the label PG3 of the second granule of G3 is shifted of a granule of G1 with respect to the third granule of G2 .
More in general, the size of the expansion depends on which group of m granules of G2 we consider to generate a granule of G3 .
Since the number of such groups cannot be a priori determined, it is not possible to define a formula that captures the altering-thick operation on all of these groups; we can however define a formula capturing the operation on the first p groups, with p > 0.
We therefore define a new m,p operation Alterl,k (G1 , G2 , G3 ) that performs the altering thick operation on the first p groups of m granules of G2 .
A.
The Grouping Operation We define the grouping operation Group(G1 , G2 , m) as follows.
Definition 12: Let G1 be a granularity, and m an integer.
The granularity G2 obtained through the algebraic operator Groupm (G1 ), may be specified by the following PPLTL formula: Group(G1 , G2 , m) = Gran(G1 ) [?
]Gran(G2 ) [?
](!PG1 [?
]!PG2 )U(PG1 [?
]PG2 ) [?]
G(PHG2 - (PHG1 [?]
(!PG1 [?]
X-1 QG1 )) [?]
QHG2 - (QHG1 [?]
(!QG1 [?]
XPG1 ))) [?]
G(PG2 - am-1 ), where a0 is PG1 - !
(QG1 [?]
QG2 )U(QG1 [?]
QG2 ) [?]
!PG1 - (!PG1 )U(PG1 [?]
!
(QG1 [?]
QG2 )U(QG1 [?]
QG2 )), and, for k > 0, ak is recursively defined as PG1 - !
(QG1 [?]
QG2 )U(QG1 [?]
!QG2 [?]
Xak-1 ) [?]
!PG1 - (!PG1 )U(PG1 [?]
!
(QG1 [?]
QG2 )U(QG1 [?]
!QG2 [?]
Xak-1 )).
  1  2  P Q  3  4  P Q  5  6  P Q  7  8  P Q  9 10 11 12 13 14 15 16 17 18 19 20  P Q  P Q  P Q  P Q  P Q  P Q  G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1  With the first two conjuncts, the formula requires G1 and G2 to be (possibly non continuous) granularities.
The third conjunct requires G1 and G2 to begin at the same time instant; the fourth conjunct states that a gap in G2 may exists only if there exists a gap in a granule of G1 , or if there exists a gap between two granules of G1 that belong to the same granule of G2 .
The last conjunct states that a granule of G2 is composed of m consecutive granules of G1 .
Figure 1 shows an example where m = 2.
P  Q  P  Q  G2  G3  Q  P  G2 G2  P  G3 G3  Figure 2.
Q  P  G2 G2  Q  P  G3 G3  Q  P  G2 G2  Q  P  G2 G2  P  G3 G3  Q  G2  Q  G3  The altering-tick operation  Definition 13: Let G1 and G2 be two granularities such that Partition(G1 , G2 ) holds, and let l, k, m, p be positive integers such that 1 <= l <= m. The granularity G3 obtained through the algebraic operator Alterm l,k (G2 , G1 ) (for the first p groups of m granules of G2 ), may be specified by the following PPLTL formula:  B.
The Altering-tick Operation In order to define a logical formula corresponding to the operator Alterm l,k (G1 , G2 ), we assume l, k, m to be positive integers (i.e., we only consider the expansion of the granules of G2 with later granules of G1 ).
Moreover, we need to make a further assumption.
The granules of G3 are defined by expanding some granules of G2 .
In order to estabilish the  m,p Alterl,k (G1 , G2 , G3 ) = ContGran(G1 ) [?]
ContGran(G2V ) [?]
ContGran(G3 )[?]
p Partition(G1 , G2 ) [?]
i=0 am*i  111  Shif t(G1 , G2 , m) = Gran(G1 ) [?]
Gran(G2 ) [?]
am where a0 = G((PG1 - PG2 ) [?]
(QG1 - QG2 )[?]
(PHG1 - PHG2 ) [?]
(QHG1 - QHG2 )) and, for q > 0, am = !
(QG1 [?]
PG2 )U(QG1 [?]
!PG2 [?]
Xam-1 )  The first row of the formula requires G1 and G2 to be (possibly non internally continuous) granularities.
Formula am requires that there are no granules of G2 until the mth granule of G1 ; finally, formula a0 states that, starting from the (m + 1)th granule onwards, G1 and G2 coincide, including gaps inside granules.
where, for n > 0, a0 =PG2 - dl-1 an =(!QG2 )U(QG2 [?]
Xan-1 ) d0 =bk*i [?]
(!QG2 )U(QG2 [?]
gk*(i+1) )[?]
X((!PG2 )U(PG2 - phm-l-1 )) dn =bk*i [?]
(!QG2 )U(QG2 [?]
gk*i )[?]
X((!PG2 )U(PG2 - dn-1 )) ph0 =bk*(i+1) [?]
(!QG2 )U(QG2 [?]
gk*(i+1) ) phn =bk*(i+1) [?]
(!QG2 )U(QG2 [?]
gk*(i+1) )[?]
X((!PG2 )U(PG2 - phn-1 )) b0 =PG3 bn =(!QG1 )U(QG1 [?]
Xbn-1 )  1  2  3  4  5  6  7  9 10 11 12 13 14 15 16 17 18 19 20  8  g0 =QG3 gn =(!QG1 )U(QG1 [?]
Xgn-1 )  P  G1    Q  P G1  G1  Q  P  G2  The first three conjuncts require G1 , G2 and G3 to be continuous granularities; the formula Partition(G1 , G2 ) is defined as Group(G1 , G2 ) [?]
FinerThan(G1 , G2 ).
The formula am*i identifies the ith group of m granules of G2 ; in such group, the formula dn , for n > 0, estabilishes that the granules of G3 corresponding to the granules of G2 before the lth granule, are shifted of k * i granules of G1 with respect to the corresponding granules of G2 .
The formula d0 estabilishes that the granule of G3 corresponding to the lth granule of G2 of the considered group, begins k * i granules of G1 after the beginning of the corresponding granule of G2 , and ends k * (i + 1) granules of G1 after the ending of the same granule.
Finally, the formula phn , with n >= 0, requires the granules of G3 corresponding to the granules of G2 after the lth granule in the considered group, to be shifted of k * (i + 1) granules of G1 with respect to the granules of G2 .
Figure 2 shows the granularities identified by the formula 2,2 Alter2,1 (G1 , G2 , G3 ).
The formula a2 identifies the second group of two granules of G2 ; d1 estabilishes that the granule of G3 corresponding to the first granule of G2 in such group, is shifted of 1 granule of G1 with respect to the same granule.
Such shifting is caused by the expansion performed on the (only) earlier group of 2 granules of G2 .
The granule of G3 corresponding to the second granule of G2 of the considered group, starts 1 granules of G1 after the beginning, and ends 2 granules of G1 after the ending of the same granule.
Q  P  G1 G1  Q  Figure 3.
P G1  P G2  P  G 1 H G1  G2  P  H G2  Q Q  H G 1G 1  Q Q  H G2 G 2  P  G1  P  G2  Q  G1  Q  G2  The shifting operation  D. The Combining Operation We define the operation Combine(G1 , G2 , G3 ) as follows.
Definition 15: Let G1 and G2 be two granularities.
The granularity G3 obtained through the algebraic operator Combine(G1 , G2 ) may be specified by the following PPLTL formula: Combine(G1 , G2 , G3 ) = Gran(G1 ) [?]
Gran(G2 ) [?]
Gran(G3 ) [?]
G((PG3 - a) [?]
(QG3 - b))[?]
G(PHG3 - (PHG2 [?]
(!PG2 [?]
X-1 QG2 )) [?]
QHG3 - (QHG2 [?]
(!QG2 [?]
XPG2 ))).
where a is (!PG1 [?]
!QG1 )U(QG3 [?]
QG2 [?]
(QG1 [?]
X((!PG3 [?]
!QG2 )UQG1 ))), and b is (!PG1 [?]
!QG1 )S(PG3 [?]
PG2 [?]
(PG1 [?]
X-1 ((!QG3 [?]
!PG2 )SPG1 )))  The first implication (PG3 - a) states that if a granule of G1 is included in at least a granule of G2 , then the granule of G3 that contains it ends with the last granule of G2 that is included in that granule of G1 .
The second implication (QG3 - b) states that if a granule of G1 is included in at least one granule of G2 , then the granule of G3 containing it begins with the first granule of G2 that is included in that granule of G1 .
The last two rows of the formula state that a gap in a granule of G3 may exist only if the same gap exists in the corresponding granule of G2 , or if a gap exists between two  C. The Shifting Operation We define the operation Shif t(G1 , G2 ) as follows.
Definition 14: Let G1 be a granularity and m an integer.
The granularity G2 obtained through the algebraic operator Shiftm (G1 ) may be specified by the following PPLTL formula: 112  granules of G2 belonging to that granule of G1 .
Figure 4 shows an example.
1  2  4  3  5  6  P Q  Q  G2  G3  Q  G1  P  G2  Q  G2  P  P  Q  H G3  G3  Q  P G2  H G3  Figure 4.
Q  G1  P  Q  G1  Q  P  G2 G2  G2  P  G2  P  Q  G3  P October  Month  P Month  Month  P Month  Q Month  Q  P Month  P October  P  October  P Q  P  G3 G3  Q  Q  P  G2  P Q G3  G3  P Q  G3 G3  P  G3 G3  Q  G2  G3  The Select-down operation  ak =(!PG1 [?]
!PG3 )U(PG1 [?]
Xan-1 ) b0 =!PG3 UQG2 bn =(!PG1 [?]
!PG3 )U(PG1 [?]
PG3 [?]
Xbn-1 )  The third conjunct of the formula (PG2 - ak ) considers each granule of G2 separately; the formula ak identifies the k th granule of G1 in the group of granules of G1 that are included in the considered granule of G2 ; the formula bl specifies that, for the subsequent l granules of G1 , a corresponding granule of G3 exists.
Figure 6 shows an example where k = 2 and l = 3.
G. A Clinical Example In order to show the benefits of the proposed logical specifications of the algebraic operations, we consider a realworld example taken from the clinical scenario.
The example deals with one of the several chemotherapy recommendations that can be represented through a set of time granularities, and models these time granularities in a labelled linear time structure, identified by a suitable PPLTL formula.
The chemotherapy recommendation is defined as follows: "The ChlVPP regimen consists of chlorambucil (6 mg/m2 /day) on days 1 through 14, vinblastine (6 mg/m2 ) on days 1 and 8, procarbazine (100 mg/m2 /day) on days 1 through 14, and prednisone (40 mg/day) on days 1 through 14.
Patients treated with this regimen receive 6 cycles repeated every 28 days."
Figure 7 shows a graphical representation of a single cycle of the regimen.
The labelled linear time structure corresponding to the granularities representing the chemotherapy-related granu-  Q Month  Q October  FiscalYear  Figure 5.
P Q  a0 =PG1 [?]
PG3 [?]
bl  Q  FiscalYear  P Q  The operation SelDownlk (G1 , G2 , G3 ) is defined as follows.
Definition 17: Let G1 and G2 be two granularities, and k, l two integers.
The granularity G3 obtained through the algebraic operator Select-downlk (G1 , G2 ) may be specified by the following PPLTL formula: SelDownlk (G1 , G2 , G3 ) = Partition(G1 , G2 ) [?]
Subgranularity(G1 , G3 ) [?]
PG2 - ak where  The combining operation  Q  P Q  F. The Select-down Operation  The second and the third row of the formula state that each granule of G2 has to be equal to a granule of G1 , and possible gaps inside a granule of G2 has to be equal to the gaps inside the corresponding granule of G1 (i.e., that the relationship SubGranularity(G1 , G2 ) holds).
The fourth and the fifth rows state that a granule of G3 may have gaps only if G1 has the same gaps inside its granules, or corresponding to a gap between two non consecutive granuels of G1 .
Finally, the last row states that a ganule of G3 begins at the same time instant of a granule of G2 , and ends at the time instant that precedes the beginning of the next granule of G2 .
Figure 5 shows an example.
Q  P Q  G3 G3  G2  Figure 6.
The operation AnchoredGroup(G1 , G2 , G3 ) is defined as follows.
Definition 16: Let G1 and G2 be two granularities such that SubGranularity(G1 , G2 ) holds.
The granularity G3 obtained through the algebraic operator Anchoredgroup(G1 , G2 ) may be specified by the following PPLTL formula: AnchoredGroup(G1 , G2 , G3 ) = Gran(G1 ) [?]
Gran(G2 ) [?]
Gran(G3 ) [?]
G(PG1 - (PG2 [?]
!
(QG1 [?]
QG2 )U(QG1 [?]
QG2 )) [?]
PHG1 - (PHG2 [?]
!
(QHG1 [?]
QHG2 )U(QHG1 [?]
QHG2 ))) [?]
G(PHG3 - (PHG1 [?]
(!PG1 [?]
X-1 QG1 )) [?]
QHG3 - (QHG1 [?]
(!QG1 [?]
XPG1 ))) [?]
G(PG3 - (PG2 [?]
X((!PG2 [?]
!QG3 )U(QG3 [?]
XPG2 ))).
  Month  P Q  G1  E. The Anchored-grouping Operation  P  P Q  G2  Q  G3  G3  P Q  P  P Q P  P Q  G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1 G1  9 10 11 12 13 14 15 16 17 18 19 20  8  7  P Q  The anchored grouping operation  113  P  approach.
Moreover, calendar algebra provides users with a large set of operators simplifying the definition of even complex granularities.
We proposed logical formulae encoding grouping-oriented operators of the calendar algebra [7] such as grouping, altering-tick, shifting, combining and anchoredgrouping, and the granule-oriented operation select-down.
The logical formula encoding the altering-tick operator performs the operation only on the first p groups of m-granules of the first granularity, and deals with internally continuous granularities.
The remaining logical formulae deal even with non internally continuous granularities.
Founding the operators of the calendar algebra on a logical framework allow us to use all the machinery studied and developed for temporal logics; as an example, in the considered medical domain it could be of interest to instantiate some chemotherapy cycles.
It corresponds to the generation of granularities, that can be reduced to the problem of generating models for the formula corresponding to chemotherapy-related granularities [3].
With an approach similar to that we proposed in this paper, in [2] efficient conversion methods are defined from an algebraic granularity representation to the equivalent lowlevel representation based on periodical sets, where many reasoning tools are available.
Even though the final goal of this proposal is similar to that of our proposal, it is worth noting that we do not provide conversion methods to a lower level representation: indeed, we provide within the logical framework based on PPLTL some "formula constructors" which allow one to specify in an algebraiclike concise fashion possibly long and not easily readable logical formulae defining temporal granularities.
ChlVPP  P  P  Chl  Chl  P  P  P  .......  P  P  P  ....... P  P  P  P  .......  P  P  P  ....... P  P  P  P  .......  P  P  P  ....... P  Q  ....... Q C h l Q C h l Q C h l ....... ....... Q P c Q P c Q P c .......  Pc Pd  V  Chl Pc Pd  Chl Pc Pd  Pc Pd  V  Chl Pc Pd  Chl Pc Pd  Chl Pc Pd  Time  Q Q Q Q  Chl Pc Pd V  Q Q Q  Chl Pc Pd  Q Q  Chl Pc Pd  ....... Q Q  Figure 7.
Pd  Q  Pd  Q  Pd  .......  Q Q Q  Q Chl  ChlVPP  Pc Pd  V  ChlVPP chemotherapy regimen  larities may be expressed as: Count(PChDay , 168) [?]
Subgranularity(Chday, day)[?]
Group(ChDay, ChlVPP, 28) [?]
SelDown14 1 (day, ChlVPP, Chl)[?]
SelDown11 (day, ChlVPP, V) [?]
SelDown18 (day, ChlVPP, V)[?]
14 SelDown14 1 (day, ChlVPP, Pc) [?]
SelDown1 (day, ChlVPP, Pd)  The above formula defines granularities Chl (chlorambucil), V (vinblastine), Pc (procarbazine), Pd (prednisone) and ChlVPP according to the recommendation; the formula is defined on the time domain N of days (we assume that the granularity day is composed of a granule for each point in the considered time domain).
The first two conjuncts state that the granularity ChDay consists of 128 days, which is the overall duration of 6 cycles: Count(a, n) stands for "a holds exactly n times in the future" and is defined as follows [3]: Count(a, 0) = G!a and Count(a, n) = !aU(a & XCount(a, k - 1)).
The next conjunct states that each granule of ChlVPP is of 28 elements (days of chemotherapy).
The next conjunct states that the granularity Chl covers the first 14 days of each cycle; the next two conjuncts state that the granularity V covers the first and the eighth days of each cycle; finally, the last two conjuncts state that the granularities Pc and Pd cover the first 14 days of each cycle.
The adoption of the logical specification of the grouping and select-down operations makes the overall formula more natural and intuitive than the corresponding one specified only through the PPLTL syntax.
R EFERENCES [1] C. Bettini, S. Jajodia, and X. Wang.
Time granularities in Databases, Data Mining, and Temporal Reasoning.
Springer, 2000.
[2] C. Bettini, S. Mascetti, and X. S. Wang.
Supporting temporal reasoning by mapping calendar expressions to minimal periodic sets.
Journal of Artificial Intellicence Research, 28:299- 348, 2007.
[3] C. Combi, M. Franceschet, and A. Peron.
Representing and reasoning about temporal granularities.
Journal of Logic and Computation, 14(1):51-77, 2004.
[4] S. Demri.
LTL over integer periodicity constraints.
Theoretical Compututer Science, 360(1-3):96-123, 2006.
IV.
D ISCUSSION AND C ONCLUSIONS  [5] D. Foster, B. Leban, and D. McDonald.
A representation for collections of temporal intervals.
In Proceedings of the American National Conference on Artificial Intelligence, pages 367-371, 1986.
In this paper we considered the logical framework of Combi et al.
[3] for representing and reasoning about temporal granularities, and the algebraic framework of Ning et al.
[7].
Among the approaches for symbolic specification of granularities, such as those proposed by Foster, Leban, and McDonald [5] and by Niezette and Stevenne [6], we focused on the calendar algebra, which is, differently from the other proposals, based on the same general framework for time granularities [1] adopted by the considered logical  [6] M. Niezette and J. Stevenne.
An efficient symbolic representation of periodic time.
In Implementing Temporal Reasoning: workshop notes - AAAI'92, pages 130-140, 1992.
[7] P. Ning, S. Jajodia, and X. S. Wang.
An algebraic representation of calendars.
Annals of Mathematics and Artificial Intelligence, 36:5-38, 2002.
114