Robustness Analysis for Scheduling Problems using the Inverse Method L. Fribourg, R. Soulat LSV ENS Cachan & CNRS Cachan, France Email: {fribourg,soulat}@lsv.ens-cachan.fr  Abstract--Given a Parametric Timed Automaton (PTA) A and a reference valuation for timings, the Inverse Method (IM) synthesizes a constraint around the reference valuation where A behaves in the same time-abstract manner.
This provides us with a quantitative measure of robustness of the behavior of A around the reference valuation.
We show in this paper how IM can be applied in a specific way to treat the robustness of scheduling systems.
We also explain how to use the method in order to synthesize large zones of the timing parameter space where the system is guaranteed to be schedulable.
We illustrate the method on several examples of the literature as well as a case study originating from an industrial design project.
I. I NTRODUCTION The Inverse Method (IM ) is a method for synthesizing values of parameter timings in the framework or Parametric Timed Automata (PTAs).
Different from CEGAR-based methods, IM makes use of a "good" parameter valuation p0 instead of a set of "bad" states [2].
It takes as input a PTA A(P ), where P denotes a vector of parameters, and a reference valuation p0 .
The IM method synthesizes a constraint K on the parameters (i.e., a symbolic set of parameter valuations) such that (1) p0 [?]
K and (2) for all parameter valuation p satisfying K, the trace set (i.e., the time-abstract behavior) of A[p] is the same as for A[p0 ]1 .
This provides the system with a criterion of robustness (see, e.g., [9]) around p0 .
PTA  IM  Reference valuation p0 Figure 1.
Constraint K  Functional view of IM  We explain in this paper how IM can be useful for analysing specifically the robustness of real-time systems, and how an iterative form of IM , called the Behavioral Cartography (BC) method, is useful for synthesizing schedulable zones of real-time systems.
1 where A[p] denotes the timed automaton resulting from A(P ) by instantiating P with p  D. Lesens, P. Moro Data Management & Software Astrium Space Transportation Les Mureaux, France Email: {david.lesens,pierre.moro}@astrium.eads.net  More formally, a real-time system S is viewed here as a set of jobs {J1 , J2 , .
.
.
, Jn }.
A job Ji generates a possibly infinite stream of tasks Ji,1 , Ji,2 , .
.
.
.
When a job is activated, it executes for at most time Ci , and has to terminate within the relative deadline Di .
The activation of tasks can be modeled by PTAs, where activation events are associated with transition labels.
The timings (Ci , Di ) can be considered as parameters associated with each job.
A parameterized job system S(P ) is a set {J1 , J2 , .
.
.
, Jn } associated with a vector P of parameters.
Each design parameter in P can have a fixed value or be a free parameter.
An instantiated job system S[p] is a job system {J1 , J2 , .
.
.
, Jn } associated with a vector of design parameter P where each design parameter in P is assigned a fixed value according to the valuation p. For a given choice p of parameters, we say that a job Ji is schedulable if all the generated tasks Ji,k finish their execution before the deadline.
The system S[p] is schedulable if all its jobs are schedulable.
In this context, the problem of robustness is defined as: Problem 1.
Given a parameterized job system S(P ) and a valuation p0 of the parameters, find a constraint K containing p0 such that S is robust on K, i.e.
: for all p [?]
K, S[p] is schedulable if and only if S[p0 ] is schedulable.
Remark: One is interested by synthesizing a constraint K as weak as possible.
We are also interested in the following problem: Problem 2.
Consider a parameterized job system S(P ), and a rectangle V0 inside the parameter space.
Find the schedulability zone Z, defined as the largest subset of valuations p of V0 for which S[p] is schedulable.
We show in this paper that Problem 1 can be solved using the IM method for PTAs, and Problem 2 using BC.
The plan of this paper is as follows.
We describe the related work in Section II.
In section III, we explain on an example the principle of our method.
In Section IV, we apply the IM -based method to various schedulability problems of the literature (jobs with variable execution  times, deadlines); we also apply the BC method in order to synthesize schedulability zones for an example of the literature; experimental results are then summarized.
An industrial case study is treated in Section V. Final remarks are given in Section VI.
II.
R ELATED W ORK The use of models such as PTAs and Parametric Time Petri Nets (TPNs) for solving scheduling problems has received attention in the past few years.
For example, Romeo [8] performs model checking for parametric TPNs with stopwatches, and synthesizes parameter valuations satisfying TCTL formulae.
An extension of U PPAAL allows parametric model checking [3], although the model itself remains non-parametric.
The approach most related to our method is [6], [7], where the authors infer parametric constraints guaranteeing the feasibility of a schedule, using PTAs with stopwatches.
The main difference here relies in our choice of the Inverse Method, rather than a CEGARbased method.
First results obtained on the same case studies are uncomparable (although similar in form), which seems to indicate that the two methods are complementary.
The problem of finding the schedulability region was attacked in analytic terms in [4]; the size of our examples is rather modest compared to those treated using such analytic methods.
However, in many schedulability problems, no analytic solution exists (see, e.g., [12]), and exhaustive simulation is exponential in the number of jobs.
In such cases, symbolic methods as ours and those of [6], [7] are useful to treat critical real-life examples of small or medium size, as examplified here in Section V. III.
E XPLANATION OF THE M ETHOD We will now explain our method on a preemptive jobshop example given in [1].
The jobshop scheduling problem is a generic resource allocation problem in which common resources ("machines") are required at various time points (and for given duration) by different tasks.
We are given a fixed set M of machines.
A step is a pair (m, d) where m [?]
M and d [?]
N, indicating the required utilization of resource m for time duration d. A job is a finite sequence J = (m1 , d1 ), (m2 , d2 ), * * * , (mk , dk ) of steps stating that in order to accomplish job J, one needs to use a machine m1 for d1 time, then use machine m2 for d2 time etc.
The jobshop system is a set S = {J1 , .
.
.
, Jn } of jobs.
A.
Modeling Schedulability with TAs Consider the jobshop system S = {J1 , J2 } for 2 jobs and 3 machines m1 , m2 , m3 with: J1 = (m1 , d1 ), (m2 , d2 ), (m3 , d3 ) and J2 = (m2 , d02 ) with d1 = 3, d2 = 2, d3 = 4, d02 = 5.
The classical problem, called the "makespan" problem, consists in finding the minimum time (makespan) needed for completing all the tasks (with the constraint that, at any  time, a machine can execute only one task).
In [1], it is shown how to solve the makespan problem for system S using a timed automaton (TA) A.2 Actually, we do not adress the makespan problem here, but rather the schedulability problem.
More precisely, we assume given a certain bound u, and ask whether or not the system is schedulable, i.e., if there is a way (schedule) to complete all the jobs within u time units.
In order to treat schedulability, we integrate into A a synchronized TA observer which fires a transition "DEADLINE" when the clock measuring time of the current location goes beyond u.
The system is schedulable if there is a trace (i.e.
a time-abstract branch of the reachability tree) which corresponds to successive completions of all the jobs and which does not contain the DEADLINE transition.
More generally, we are going to make the following basic assumption in the rest of this paper, concerning the job system S: Assumption: The system S(P ) is modeled by a PTA A(P ) such that, for any valuation p, one can infer the schedulability of S[p] by looking at the set of traces of A[p] (i.e., by focusing on the time-abstract information of the reachability tree of A[p]).
Under this assumption, it should be clear that the IM method provides a measure of robustness of the system around p0 .
Indeed, since the set of traces of A[p] is the same as for A[p0 ] for any p [?]
K, the system S[p] is schedulable for any p [?]
K iff S[p0 ] is schedulable.
B. Robustness Analysis via IM Let us illustrate this by analyzing the robustness around the valuation p0 : {d2 = 2, d02 = 5}, for the bound u = 10.
We first consider a parametric version of A where d2 and d02 become parameters.
We then use IM with A as a model input and p0 as a valuation input.
This yields the constraint K: 7 > d02 [?]
3 > d2 [?]
d02 + d2 >= 7.
See Figure 2 for a geometrical representation of K.  Figure 2.
Geometrical representation of K around p0 : (2, 5).
By the IM principle, the set of traces of A is always the same, for any point (d2 , d02 ) of K. This set of traces is depicted under the form of a tree in Figure 9 in Appendix.
We can see that there are some branches of the tree that 2 As we consider scheduling with preemption, TAs are enriched with stopwatches and arbitrary updates [1].
do not contain any DEADLINE label (these branches end at node s73 in Figure 9 in Appendix).
These branches correspond to the schedules which are completed within u = 10 time units.
The system is thus schedulable, for any point (d2 , d02 ) of K. For example, we can increase d2 from 2 to 3, or increase d02 from 5 to 7 while keeping the completion time less than or equal to 10.
C. Schedulability Zone Synthesis Let us consider a given rectangle V0 , say [0, 11] x [0, 11], and let us apply the BC method.
We apply IM iteratively by letting p0 equal to all the possible integer values of V0 .
We thus synthesize different constraints K, which characterize different "behavior tiles".
For any point of a tile, the behavior is uniform: either the system is schedulable (i.e., the set of feasible schedules is non empty) everywhere in the tile or nowhere in the tile.
After 10 iterations, the rectangle V0 (actually, the whole real plan) is covered by the tiles generated successively.
This is depicted on Figure 3.
The green (resp.
red) zone corresponds to the schedulable (resp.
non-schedulable) zone.
The problem is parameterized typically by letting the + Phi,j s, e- i,j s, ei,j s and [?]
instantiated, and by parameterizing some of the ri s. B.
Jobs with Deadlines [6], [7] We are given a set of jobs {J1 , .
.
.
, Jn }.
Each job Ji is periodic of period Ti (a fixed duration of time between two activation events), and an offset Oi for its first activation time.
Once a job Ji has been activated, it executes for at most time Ci and has to terminate within the deadline Di .
The system is schedulable if each job Ji is completed before its relative deadline Di .
3 We consider the case of two periodic jobs {J1 , J2 } with D1 = 7, T1 = 10, O1 = 0, C1 = 3, D2 = 6, T2 = 10, O2 = 3, C2 = 5.
We parameterize C1 , C2 and O2 .
Applying IM , we find the following constraint K: 6 >= C2 [?]
3 >= C1 [?]
6.C1 > 17 [?]
2.C1 + C2 > 6 + O2 [?]
O2 >= C1 [?]
10 >= O2 + C2 In [6], the authors uses a CEGAR-based method to synthesize a constraint on the parameters that will guarantee that the system is schedulable.
The constraint found by their method is: C1 + C2 < 6 + O2 [?]
C1 + C2 < 10 [?]
C1 + C2 > 6[?]
C2 < 10 - O2 [?]
C1 < 7 [?]
C2 < 6 We notice that this constraint is uncomparable with the constraint K found by IM .
C. Schedulability Zone Synthesis  Figure 3.
Schedulability zones (in green, the system is schedulable)  IV.
C ASE S TUDIES OF THE L ITERATURE A.
Jobs with Variable Execution Times [12] The problem addressed here is the schedulability of a system of n independent job chains, denoted J1 , J2 , * * * , Jn , so that they all complete within a given bound [?]
when the jobs are scheduled on a processor according to a prioritydriven algorithm.
Roughly speaking, we let Ji,j denote the jth job of the chain Ji .
Each job Ji,j has a fixed priority Phi,j and is preemptable.
The execution time of Ji,j is in + - + the range [e- i,j , ei,j ] with ei,j , ei,j in N. The release time ri,j of job Ji,j is set to an integer value.
Ji,1 is ready for execution at its release time ri,1 ; for each j > 1, Ji,j cannot execute until its immediate predecessor Ji,j-1 completes.
For details, see [12].
Let us apply the BC method in order to determine zones of schedulability on an example with Fixed Priority ("Rate Monotonic") of [4, Section III].
There are three periodic jobs J1 , J2 and J3 with periods of T1 = 3, T2 = 8 and T3 = 20 and deadlines of D1 = 3, D2 = 8 and D3 = 20.
We want to find a set of computation times Ci of each job ti (1 <= i <= 3) such that the system is schedulable, i.e., such that each job Ji is completed before Ti time units (Ci <= Ti for all 1 <= i <= 3).
Let V0 be the set of triples (C1 , C2 , C3 ) ranging over [0, 3] x [0, 8] x [0, 20].
Algorithm BC outputs a set of tiles, and it suffices to check one point per tile to determine the schedulability of the whole tile.
The result for this example is given in Figures 4, 5, 6 using a discretization step of 0.2 on V0 .
The green zone corresponds exactly to the schedulability region found using analytic methods in [4] (Figure 1 (a)).
D. Summarized Experimental Results The method IM has been implemented by tool I MITATOR.
The new version I MITATOR 2.5 integrates the new features of stopwatches (in addition to standard clocks) and updates (in addition to standard clock resets), as well as powerful algorithmic improvements for state space reduction.
All case studies and experiments have been performed on Ubuntu 3 Actually, because of the periodicity of the system, we only have to be sure that it is schedulable within lcmi[?
]I (Ti ).
states computed, the number |T | of transitions computed, the number n of iterations of the inverse method, the number |K| of inequalities within the resulting constraint K, the computation time t in seconds.
Case from [1] LA 2x5 LA 3x5 from [12]  Figure 4.
Schedulability zones (in green the system is schedulable)  from [6] from [7] from [4]  |X| |P | |S| |T | n Examples from section III 3 4 53 70 10 3 11 371 528 21 3 16 4903 9043 30 Examples from section IV-A 15 18 215 264 15 Examples from section IV-B 6 8 676 886 15 4 9 60 103 10 Examples from section IV-C 7 10 Figure 7.
|K|  t  5 10 5  0.5 64 161  17  85.3  15 7  289 2.1 66  Experimental results  The example LA 2x5 (resp.
LA 3x5) is a jobshop problem taken from the LA02 example of http://bach.istc.kobe-u.
ac.jp/csp2sat/jss/, where we only consider the 2 (resp.
3) first jobs on 5 machines.
More data (including the output constraints) are given in [11] (cf http://www.lsv.ens-cachan.fr/Software/imitator/ case-studies.php).
V. I NDUSTRIAL C ASE S TUDY A.
General description Figure 5.
Schedulability zones (in green the system is schedulable)  Figure 6.
Schedulability zones (in green the system is schedulable)  11.10 equipped with an Intel Core 2 2.93 GiHz processor with 2 GiB RAM).
In Figure 7, we give from left to right the name of the case study, the number |X| of clocks of the PTA model, the number |P | of parameters, the number |S| of  We describe here a prospective architecture for the flight control system of the next generation of spacecrafts designed at ASTRIUM Space Transportation.
(This is part of a global project preparing the next generation of launcher avionics architecture [10].)
In this design, the architecture is distributed on three processors (CN av , CSeq , CCtrl ) devoted to the treatment of information coming from the sensors, the computational analysis of the data, and the management of data to be sent to the actuators.
The software running on each processor unit is organized into several "partitions".
Each partition contains "tasks" (also often called "threads").
This is described on Figure 8: the green boxes correspond to processors, orange boxes to partitions, and blue boxes to tasks.
Each task t is periodic, and characterized by a triple (O, C, T ) of timings, where O corresponds to the offset, C to the execution time, and T to the period.
Within a given partition, tasks are preemptible and scheduled according to a fixed priority scheduler, called "Rate Monotonic": the priority between two activated tasks is given to the task with the smaller period.
Tasks belonging to different partitions on a same processor are independent and can preempt each other.
In case  of preemption of one task of some partition by a task of another partition, we say that there is a partition switch.
Partition switches are performed at predefined moments of time (i.e.
are time triggered).
One expected output of the scheduling problem is the values of these moments (i.e., the start time of activation and end time of activation of each partition).
There are thus a priori several sources of nondeterminism: First, inside a same processor, there are switches of partition, second, there are the interleavings of tasks processed by the different processors.
In addition, the system is organized into jobs (or "endto-end flows"): each job Ji is described as a sequence of tasks Ji,1 , Ji,2 , .
.
.
.
(Ji,j cannot execute until its immediate predecessor Ji,j-1 completes.)
A deadline Di is associated with each job Ji : the last task of the job has to be completed before the deadline.
The end-to-end flow is depicted on Figure 8 using the sequence of red arrows.
Note that, by comparison, the architecture of the flight control system running presently on the ASTRIUM Space Transportation spacecrafts is generally monoprocessor and mono-partition (see, e.g., [5]).
Figure 8.
Architecture Scheme  (15, 12, 50) for task EngM gt (Engine Management) (1, 15, 100) for task Control (50, 25, 200) for task CT M (Control Telemetry) The job (end-to-end flow) J considered corresponds to the list (IntLoop, GyroM gt, N avigation, Guidance, CT M , Control, EngM gt, CtrLoop).
The associated deadline is D = 300.
C. Quantitative robustness analysis We analyse the system from a quantitative robustness point of view following two steps.
In a first step, we use I MITATOR on the system instantiated with valuation p0 using standard reachability analysis and generate all the feasible schedules that satisfy the deadline D. Among them, we focus on a schedule that minimizes the number of partition switches.
This schedule is depicted on Figure 10 in Appendix, under the form of a chronogram.
One division of the time corresponds to 1 time unit, and the job is completed after 285 time units.
The upper level of orange rectangles indicates the running of the MVMFast-MVMSlow partition while the lower level indicates the running of the GTM-Guidance partition on processor CSeq .
As already mentioned, the switches are performed at predefined moments.
For example, the admissible schedule depicted on Figure 10 in Appendix can be seen as a manner for programming the partition switches on the second processor CSeq (corresponding to frontiers between contiguous orange rectangles) at times: 51, 60, 64, 96, 104, 136, 144, 171, 251, 260, 264.
In a second step, we apply our IM -based method to analyse the robustness of the execution times and offset times while keeping the above time-triggered sequence of partition switchings.
This is done by imposing the values of time of partition switches, as specified above, and parameterizing all the execution times Cs and offsets Os corresponding to tasks M V M F ast, M V M Slow, GT M and Guidance.
The IM method then outputs the following constraint K:  B. Valuation of the parameters A classical valuation p0 of the triple (O, C, T )4 can for instance be: (0, 8, 20) for task Intloop (Integration Loop) (8, 20, 200) for task GyroM gt (Gyroscope Management) (16, 8, 40) for task N avigation (2, 10, 50) for task N T M (Navigation Telemetry) (2, 60, 200) for task M V M Slow (Mission & Vehicle Management) (0, 4, 20) for task M V M F ast (Mission & Vehicle Management) (117, 40, 20000) for task Guidance (1, 60, 200) for task GT M (Guidance Telemetry) (0, 5, 20) for task CtrLoop (Control Loop) 4O  denotes the offset, C the execution time, and T the period.
4 >= CM V M F ast > 1 [?]
8 * CM V M F ast + CM V M Slow > 71 [?]
CGT M > 57 [?]
100 >= CGuidance + CGT M > 89 [?]
120 > OGuidance >= 55 + CGT M [?]
OGuidance > CM V M F ast + CM V M Slow [?]
CM V M F ast > OM V M Slow > OGT M > 0 [?]
OM V M F ast = 0 For any tuple of values satisfying the constraint K, the time-triggered schedule of Figure 10 in Appendix is still valid.
In more classical approaches, tools only compute a solution of the scheduling problem.
The engineers using this automatically computed result may then completely loss the  feeling of their system; in particular, they cannot quantify the robustness of the design with respect to, for instance, small variations of worst case execution times or delay deadlines.
In contrast, the constraint K indicates clearly to the designer some degrees of freedom, allowing a better mastering of the margin policy.
[8] D. Lime, O. H. Roux, C. Seidner, and L.-M. Traonouez.
Romeo: A parametric model-checker for Petri nets with stopwatches.
In TACAS, volume 5505 of LNCS, pages 54-57.
Springer, 2009.
VI.
F INAL R EMARKS As shown on different case studies of the literature, our IM -based procedure provides us with a uniform method for evaluating quantitatively the robustness of scheduling solutions.
Furthermore, as examplified on an industrial case study, our approach seems able to manage a large scope of industrial problems in the domain of critical embedded software.
Compared to classical approaches, it automates a boring error-prone manual activity and it formalizes the margins of evolutions of the system (margins which are generally only estimated without formally insurance of validity).
However, in spite of first promising successes, our approach meets a combinatory explosion problem when faced with even more sophisticated space systems designs that integretate more partitioning and distributed computing.
We are currently working on adaptations of the method in order to tackle such highly distributed-computing architectures.
[10] D. Monchaux, P. Gast, and J. Sangare.
Avionic-X: A demonstrator for the Next Generation Launcher Avionics.
In Embedded Real-Time Software and Systems (ERTS 2012), Toulouse, France, February 2012.
ACKNOWLEDGMENT This work has been partially supported by Institut Farman (project ROSCOV).
R EFERENCES [1] Y. Abdeddaim and O. Maler.
Preemptive job-shop scheduling using stopwatch automata.
In TACAS, pages 113-126, 2002.
[2] E. Andre, T. Chatain, E. Encrenaz, and L. Fribourg.
An inverse method for parametric timed automata.
International Journal of Foundations of Computer Science, 20(5):819-836, 2009.
[3] G. Behrmann, K.G.
Larsen, and J.I.Rasmussen.
Beyond liveness: Efficient parameter synthesis for time bounded liveness.
In FORMATS, pages 81-94, 2005.
[4] E. Bini and G.C.
Buttazzo.
Schedulability analysis of periodic fixed priority systems.
IEEE Trans.
Computers, 53(11):1462- 1473, 2004.
[5] O. Boudillet, D. Dalemagne, and T. Peron.
Is integrated modular avionic a solution for ATV like spacecraft control.
In Proc.
4th IAASS Conf., Huntsville, Alabama, USA, Sepember 2010.
[6] A. Cimatti, L. Palopoli, and Y. Ramadian.
Symbolic computation of schedulability regions using parametric timed automata.
In RTSS, pages 80-89, Washington, DC, USA, 2008.
IEEE Computer Society.
[7] T.T.H.
Le, L. Palopoli, R. Passerone, Y. Ramadian, and A. Cimatti.
Parametric analysis of distributed firm real-time systems: A case study.
In ETFA, pages 1-8, 2010.
[9] Nicolas Markey.
Robustness in real-time systems.
In SIES, pages 28-34.
IEEE, 2011.
[11] Romain Soulat.
Scheduling with IMITATOR: Some case studies.
Research Report LSV-12-05, Laboratoire Specification et Verification, France, March 2012.
Available on www.lsv.ens-cachan.fr/Publis/RAPPORTS LSV/PDF/ rr-lsv-2012-05.pdf.
[12] J.
Sun, M.K.
Gardner, and J.W.S.
Liu.
Bounding completion times of jobs with arbitrary release times, variable execution times, and resource sharing.
IEEE Trans.
Softw.
Eng., 23:603- 615, 1997.
A PPENDIX  Figure 9.
Figure 10.
Trace set for the jobshop example  Chronogram of a schedule for J