On the Computational Complexity of Decidable Fragments of First-Order Linear Temporal Logics Ian Hodkinson,1 Roman Kontchakov,2 Agi Kurucz,2 Frank Wolter,3 and Michael Zakharyaschev2 1 2  Department of Computing, Imperial College, London SW7 2AZ, U.K.  Department of Computer Science, Kingas College, Strand, London WC2R 2LS, U.K.  3  Department of Computer Science, University of Liverpool, Liverpool L69 7ZF, U.K.  (e-mails: imh@doc.ic.ac.uk, fromanvk,kuag,mzg@dcs.kcl.ac.uk, frank@csc.liv.ac.uk)  Abstract We study the complexity of some fragments of firstorder temporal logic over natural numbers time.
The onevariable fragment of linear first-order temporal logic even with sole temporal operator 2 is EXPSPACE-complete (this solves an open problem of [10]).
So are the one-variable, two-variable and monadic monodic fragments with Until and Since.
If we add the operators n , with n given in binary, the fragments become 2EXPSPACE-complete.
The packed monodic fragment has the same complexity as its pure first-order part a 2EXPTIME-complete.
Over any class of flows of time containing one with an infinite ascending sequence a e.g., rationals and real numbers time, and arbitrary strict linear orders a we obtain EXPSPACE lower bounds (which solves an open problem of [16]).
Our results continue to hold if we restrict to models with finite first-order domains.
1.
Introduction What is known about the computational complexity of linear time temporal logics?
Everything seems to be clear in the propositional case.
The logics with only one temporal operator 2 (aalways in the futurea) are known to be coNP-complete for linear time, for the flows of time hQ ; <i and hR; <i [15] as well as for hN ; <i [22].
The complexity remains the same if one adds the corresponding past operator [15, 22, 25].
The addition of the anext-timea operator  and/or the auntila operator U to this primitive language makes the logic PSPACE-complete over hN ; <i [22], and hQ ; <i , hR; <i , and the class of arbitrary strict linear orders [17, 18].
The succinctness of the operators n (ain n moments of timea), where n > 1 is given in binary, increases the complexity to EXPSPACE (over hN ; <i ) [1],  but, of course, does not change the expressive power of the language.
Compared to this awell cultivated gardena, the complexity of first-order temporal logics and their fragments is still terra incognita.
There are well known anegativea results: for example, 11 -completeness of the two-variable monadic temporal logic of the flow of time hN ; <i ; see, e.g., [11] and references therein.
But we could find only one apositivea result: Halpern and Vardi [10] and, independently, Sistla and German [23] showed that the one-variable fragment of the logic with 2, , and/or U over hN ; <i is EXPSPACEcomplete.1 Halpern and Vardi considered this fragment as a propositional epistemic temporal logic with one agent modelled by the propositional modal system S5.
They conjectured that, as in the propositional case, aeven with knowledge operators in the language, the complexity still becomes much simpler without  and U a [10, page 231].
We take up this conjecture as a starting point of our investigation of the computational complexity of decidable fragments of first-order linear temporal logic.
The main technical result of this paper is that over a wide range of flows of time, the one-variable fragment of linear temporal logic even with sole operator 2 is EXPSPACE-hard.
We also establish matching EXPSPACE upper bounds for the one-variable, two-variable and monadic monodic fragments of the first-order temporal logic based on the flow of time hN ; <i and having 2, , U , and S (since) as their temporal operators.
The fragments are EXPSPACEcomplete even if we restrict to models with finite first-order domains.
If we add the operators n , with n given in binary, the fragments become 2EXPSPACE-complete.
Finally, the packed monodic fragment turns out to be as complex as its pure first-order part, i.e., 2EXPTIME-complete 1 [21] and [2] determined the complexity of certain temporalised description logics, which can be regarded as fragments of first-order temporal logics.
[8].
The 2EXPTIME upper bound for QT L12 over hQ ; <i can be obtained using the mosaic technique from [26] (for details see [6]).
Thus, in surprising contrast to the propositional case, the omission of  and U does not alter the computational complexity of first-order temporal logics.
The addition of n (n > 0) increases the complexity by one exponential, as in the propositional case.
We will not discuss here the pros and cons of adding or omitting these operators for various applications, but refer the reader to, e.g., [24, 12, 1].
The known and new results are summarised in terms of satisfiability in Table 1.
The languages in the table are explained at the end of x2 and at the start of x4.
For a complexity class C , an entry a C a in the table indicates that the complexity is in C ; an entry a C a indicates C -hardness; and an entry aC a indicates C -completeness.
We note that finding upper bounds over hQ ; <i and hR; <i for most of the first-order logics in the table remains an open problem.
I (w)  where each Pi is a relation on D of the same arity as Pi .
An assignment a in M is a function from the set of individual variables to D. Given a QT L-formula ', the truth relation (M; w) j=a ' (a' is true at moment w in model M under assignment aa) is defined inductively on the construction of ':   (M; w) j=a P (x ; : : : ; xm ) iff ha(x ) : : : ; a(xm )i 2 P I w ;  (M; w) j=a : iff (M; w) 6j=a ;  (M; w) j=a ^ iff (M; w) j=a and (M; w) j=a 1  1  We begin by introducing the logics dealt with in this paper.
The alphabet of the first-order (or quantified) temporal language QT L without equality consists of a countably infinite set of individual variables, a non-empty list of predicate symbols P0 ; P1 ; : : : , each of which is equipped with some fixed arity  0, the Booleans :, ^, >, and ?, the existential quantifiers 9x for every variable x, and the temporal operators  (anext-timea), S (asincea) and U (auntila).2 The set of QT L-formulas ' is defined as usual:  ' ::= P (x1 ; : : : ; xm ) j :' j '1 ^ '2 j > j ?
j j 9x ' j ' j '1 S '2 j '1 U '2 ; where P is an m-ary predicate symbol and x1 ; : : : ; xm are variables.
We also use the standard abbreviations _; !, and  8x ' = :9x :'; 3' = > U '; 2' = :3:'; 2+ ' = ' ^ 2': Given a formula ', we write '(x1 ; : : : ; xm ) to indicate that all free variables of ' are in the set fx1 ; : : : ; xm g; in particular, '(x) has at most one free variable x. QT L is interpreted in first-order temporal models of the form M = hF; D; I i, where F = hW; <i is a strict linear order representing the flow of time, D is a non- set, the domain of M, and I is a function associating with every moment of time w 2 W a first-order structure D  E  I (w) = D; P0I (w); P1I (w); : : : ; 2 All of the results obtained in this paper still hold if we extend this language with rigidly-interpreted constant symbols.
2  1  2;   (M; w) j=a > and (M; w) 6j=a ?
;  (M; w) j=a 9x iff (M; w) j=b   for some assignment b that may differ from a only on x; (M; w) j=a 1 U 2 iff there is v > w such that (M; v) j=a and (M; u) j=a for all u 2 (w; v), 2    2.
Preliminaries  ( )  1    1  where (w; v ) = fu 2 W j w < u < v g; (M; w) j=a 1 S 2 iff there is v < w such that (M; v) j=a 2 and (M; u) j=a 1 for all u 2 (v; w); (M; w) j=a  iff there is an immediate successor v of w in W with (M; v ) j=a .
Note that, according to the given semantics, ' is equivalent to ?
U '.
Instead of (M; w) j=a '(x), we may write (M; w) j= '[aa, where a(x) = a.
For a sentence ' (i.e., with no free variables), we just write (M; w) j= '.
A QT L-formula ' is said to be satisfiable if (M; w) j=a  ' holds for some model M, some moment w and some assignment a.  Fragments.
For n 2 N , the n-variable fragment of QT L, consisting of QT L-formulas with at most n variables, is denoted by QT Ln (remember that the one-variable fragment of classical first-order logic is a notational variant of propositional modal logic S5).
QT L12 is the subfragment of QT L1 with sole temporal operator 2.
QT L1bin extends QT L1 with the temporal operators n (n 2 N ), where n is given in binary.
The propositional fragments PT L20 ; PT Lbin are defined analogously to fragments of QT L = PT L. Some further amonodica fragments (e.g., 2 the QT Lmo of Table 1) will be de1 , QT L 1 , and T PF 1 fined in x4.
3.
Lower bounds The main result in this section is the following: Theorem 3.1.
Let C be any class of strict linear orders, at least one of which contains an infinite ascending chain.
Then the satisfiability problem for QT L12 -formulas in models based on flows of time from C is EXPSPACE-hard.
The  Table 1.
Complexity of the satisfiability problem for various linear temporal logics  language  PT L2 PT L PT Lbin QT L2 QT L QT Lbin QT Lmo QT L T PF 1 1 1  1  2  flow of time  hN ; <i  hQ ; <i  hR; <i  NP [22]  NP [15]  NP [15]  PSPACE [22]  PSPACE [17]  PSPACE [17]  a  a  EXPSPACE [1]    EXPSPACE EXPSPACE [10, 23] 2EXPSPACE EXPSPACE  1  EXPSPACE  1  2EXPTIME  same holds if we restrict to models hF; D; I i with finite domain D. Proof.
The proof uses some ideas from [14, 19].
First we treat the case of arbitrary domains.
The proof is by reduction of the following infinite version of the 2n -corridor tiling problem, which is known to be EXPSPACEcomplete (cf.
results in [5]): given an instance T = hT; t0; ni, where T is a finite set of tile types, t0 2 T is a tile type, and n 2 N is given in binary, decide whether T tiles the N  2n -corridor fhx; y i j x 2 N ; 0  y < 2n g in such a way that t0 is placed at h0; 0i and the top and bottom sides of the corridor are of some fixed colour, say, white.
Suppose that T = hT; t0 ; ni is given.
Our aim is to write a QT L12 -formula 'T such that (i) 'T is constructible from T in polynomial time, and (ii) 'T is satisfiable in a firstorder temporal model M = hF; D; I i based on some F = hW; <i from C iff T tiles the N  2n -corridor so that the top and bottom sides are white and t0 is placed at h0; 0i.
We will write down nine numbered conjuncts of 'T .
To aid our explanation, we will assume that they hold in a model M = hhW; <i ; D; I i at a time x0 2 W and a point y0 2 D, and show how they force a tiling.
'T will contain, among many others, unary predicates t(x) for all t 2 T .
Our first step in the construction of 'T is to write down formulas forcing not only an infinite sequence y0 ; y1; : : : of distinct elements from D, but at the same time an infinite sequence x0 < x1 < x2 < : : : of points from W , such that for each i 2 N , (M; xi ) j= t[yi a for a unique tile type t. If i = k  2n + j for some j < 2n then we will use hxi ; yi i to encode the pair hk; j i of the N  2n -grid.
Thus, the upper neighbour hk; j + 1i of hk; j i (if j + 1 < 2n ) will be coded by the element yi+1 at time xi+1 , and its right   EXPSPACE  2EXPTIME [6a  EXPSPACE   EXPSPACE  EXPSPACE  a  a   EXPSPACE  EXPSPACE  2EXPTIME   EXPSPACE  EXPSPACE  2EXPTIME  neighbour hk + 1; j i by yi+2n at the moment xi+2n .
Let q0 ; : : : ; qn 1 be pairwise distinct propositional variables, and P0 ; : : : ; Pn 1 be distinct unary predicates.
We will require that the truth values of the Pi do not change over time.
This requirement can be ensured by the sentence ^  i<n  8x (2 Pi (x) _ 2 :Pi (x)): +  +  For any atomic formula , write 1 for For each j < 2n , define formulas  (1)   and 0 for :.
j = q0d0 ^    ^ qndn 11 ;  Aj (x) = P0d0 (x) ^    ^ Pndn 11 (x); where dn 1 : : : d0 is the binary representation of j .
We say that the moment u 2 W is of type j if (M; u) j= j .
Assuming that (1) holds at x0 , we also say that the element y 2 D is of type j if (M; u) j= Aj [y a for all u 2 W with u  x0 .
Now define the formula equ(x) =  ^  i<n  (Pi (x) $ qi ):  It should be clear that for all moments u  x0 and all elements y 2 D, if (M; u) j= equ[y a then u and y are of the same type (j , for some j < 2n ).
We can now define acountinga formulas of length polynomial in n. Suppose that su(x) is a unary predicate and  that (1) and the two sentences  2+  ^ ^  k<n  ^  i<k  2+  i<k  qi ^ :qk    :Pi (x) ^ Pk (x) ^  ^  i<n  !
8x ^  su(x)  su(x)  $  i  (2)  (Pj (x) $ qj )  k<j<n  qi !
8x  h  $  ^  i<n    :Pi (x)    (3)  2  j  x0 and y D with (M; u) = hold in M at x0 .
For u su[y a, if u is of type j (j < 2n ) then y is of type j + 1 (mod 2n).
Write tile(x) =  _  t2T  t(x);  and  (4)   (M; x ) j= su[y a (so y is of type 1),  (M; x ) j= equ[y a (so the moment x is of type 1),  (M; x ) j= tile[y a (note that since (M; x ) j= 2:tile[y a, we have y 6= y ),  no moment u > x makes tile[y a true,  no moment u with x < u < x makes  true.
1  1  1  1  1  0  0  1  1  0  1  0  1  Repeating this argument with x1 in place of x0 , we find y2 2= fy0 ; y1 g and x2 > x1 of type 2, etc., and so forth, until we get to a moment x2n 1 which is of type 2n 1, and then to x2n of type 0 again.
See Fig.
1.
Our next aim is to write down formulas to locate the upper and right neighbours of a given tile in the corridor.
Let  ^ 2(3tile(x) !
:); ^ 3tile(x) ^  ^ 2  ^ 3tile(x) !
:equ(x) : It is easy to see that for all i; j 2 N ,  (M; xi ) j= up[yj a iff j = i + 1,  (M; xi ) j= right[yi n a iff j = i + 2n.
up(x) = 3tile(x)  right(x) = equ(x)  +2  t;t0 2T; t6=t0  :(t(x) ^ t0 (x));  2+ 8x 0 ^ tile(x) !
  _    (5)    t(x) ;  t2T; down(t)=white  2+ 8x 2n 1 ^ tile(x) !
_  (6)   t(x) ;  (7)  t2T; up(t)=white  8x    ^  t;t0 2T;   t(x) !
8x up(x) !
2:t0 (x) ;  up(t)=down(t0 )  6 ^ 2 8x t(x) !
8x t;t0 2T; 0 right(t)= 6 left(t ) +  Indeed, suppose that the conjunction of (1)a(4) holds at x0 on some element y0 2 D. Then x0 ; y0 are of type 0.
Since (M; x0 ) j= 9 x su(x) ^ 3(equ(x) ^ tile(x)) ^  2(3tile(x) !
:) ; there are y1 2 D and x1 > x0 in W such that  1    ^  2 :2n 1 !
= 9x tile(x):  0 ^ equ(x) ^ tile(x) ^ 2:tile(x)  ^ 2+  !
9x su(x) ^ 3(equ(x) ^ tile(x))  ^ 2(3tile(x) !
:) ,  1  t0 (x) ^ 2+ 8x  +  Now we can generate the required infinite sequences of points using the formula  0  Now, the formulas below enforce that h0; 0i is covered by t0 , every point of the N  2n-corridor is covered by at most one tile, the top and bottom sides of the corridor are white, and the colours on adjacent edges of adjacent tiles match:  right(x)    !
2:t0 (x) :  (8)  (9)  Let 'T be the conjunction of (1)a(9).
It is clear that 'T is constructible from T in polynomial time.
Suppose that (M; x0 ) j= 'T [y0 a.
Then, after defining the points xi ; yi (i 2 N ) as above, we define a map f : N  2n !
T by taking  f (k; j ) = t  iff  (M; xk2n +j ) j= t[yk2n +j a:  We leave it to the reader to check that f is indeed a tiling of N  2n as required.
For the other direction, take a flow of time F from C having an infinite ascending chain of distinct points xi .
Assuming that T = hT; t0 ; ni tiles the N  2n -corridor, Fig.
1 shows that 'T is satisfiable in a first-order temporal model based on F and with infinite domain.
Now we sketch how to deal with models with finite domains.
By the pigeon-hole principle, any tiling of the N  2n -corridor by T = hT; t0 ; ni has two identical columns X; Y , so it can be converted into an eventually periodic tiling by iterating the part [X; Y ) between the columns.
Such a tiling can be specified by finitely many xi ; yi .
So we modify 'T by adding propositional variables X; Y to mark the end of the columns, relativising the main 3 in (4) to times before Y by replacing the first aa by a ^ 3Y a, and including a statement that corresponding tiles in columns X and Y are the same.
We leave the reader to write the required formulas.
Since no pairs hxi ; yi i are forced for xi after Y , the resulting formula has a model with finite domain iff T tiles the corridor.
It is a consequence of this theorem that the decision prob2 of [10] for lem for the temporal epistemic logic Cnf,nl,sync  D  .. .
A3 !
y11  q  A2 !
y10  q  su  q  q  equ q  q  q  q  q  q  q  q  A0 !
y8 equ q  q  q  A3 !
y7  q  q  A2 !
y6  q  equ  su q  A1 !
y9 su q  equ  A1 !
y5 su q  A0 !
y4 equ right q  q  A3 !
y3  q  q  A2 !
y2  q  A1 !
y1 su up q  q  q  su q up  su q up equ qs tile  q  equ qs tile  q  q  equ qs tile  q  q  equ qs tile  q  q  equ qs tile  q  q  equ qs tile  q  q  qs  q  q  q  q  q  su q up equ tile  equ qs tile  equ q right  q  q  q  su q up  q  q  equ qs tile  equ q right  equ q right  su  equ q right  q  q  q  q  equ qs tile  su  su  su  q  su q equ q right q  q  su q up  su q  equ q right q  q  su q up  su q  equ q right q  q  su q up  q  su q up  equ q  q  su q up  su q up  su  q  equ  q  equ q  q  q  q  q  q  q  q  q  q  q  q  q  equ  su q equ  q  su  su  q  su q  su q  q  equ  su q  su q  equ q  su q equ q  q  equ equ su A0 !
y0 xtile< x < x < su < < < < < x x x x x x8 < x9 < x10 < .
.
.
0 1 2 3 4 5 6 7 equ  qs  "  0  q  q  "  "  1  2  q  "  3  q  "  0  q  "  1  q  "  2  q  "  3  q  "  0  q  "  1  q  "  2  W  Figure 1.
Satisfying 'T (with n = 2) in a first-order temporal model synchronous systems with perfect recall and no forgetting for one agent with sole temporal operator 2 is EXPSPACEhard.
To see this, it is enough to recall that QT L12 is just a notational variant of that logic.
Indeed, assume that 2 is based on the language with propositional variCnf,nl,sync ables p1 ; : : : , the knowledge operator K , the temporal operator 2, and the Booleans, ^ and :.
A translation a from that language onto QT L12 can be defined by taking  pai = Pi (x)  ( 1 ^ 2 )a (: )a (K )a (2 )a  = 1a ^ = : a = 8x a = 2 a:  a  2  It is easy to prove that is satisfiable iff a is satisfiable (see, e.g., [6]).
Obviously, this equivalence neither depends on the flow of time nor on the temporal operators available a as long as we consider the same flows of time and the same temporal operators for both languages.
So, every result formulated in the present paper for a variant of QT L1 holds true for the corresponding variant of Cnf,nl,sync as well.
Note also that in the literature on (products of) modal logic the corresponding systems are often denoted by PTL  S5 [7].
Again, the results formulated here for QT L1 hold true for the corresponding product logics with S5.
Reynolds [16] proved the decidability of the product Lin  S5, where Lin is the temporal logic of arbitrary strict linear orders with the operators aalways in the futurea and aalways in the past.a He gave a 2EXPTIME decision procedure and conjectured that the lower bound should be EXPSPACE.
Theorem 3.1 shows this conjecture to be true.
Now consider the language QT L1bin extending QT L1 with the temporal operators n , n given in binary.
Theorem 3.2.
The satisfiability problem for QT L1bin formulas over the flow of time hN ; <i is 2EXPSPACE-hard.
Proof.
This result can be proved by an easy modification of the proof of Corollary 4.3(1) of [10].
Actually, it follows from this proof that it is sufficient to prove the following version of Lemma 4.1 (about ayardsticksa) of [10]: Let, inductively, exp(0; n) = n, and exp(k + 1; n) = exp(k; n)  2exp(k;n) .
Lemma 3.3.
For every n  0, there exists a satisfiable formula 'n of temporal propositional logic extended by n , n coded in binary, with j'n j 2 O(n), such that if 'n is true at moment 0, then there exists N  0 such that the propositional variable p2 is true in a time point m iff m is of the form N + j  exp(2; n), for some j  0.
This modified lemma can be proved by defining '1;n as in the proof of Lemma 4.1 of [10], and then using the operator exp(1;n) in the construction of 'n in the same way as the operators n where used in the definition of '1;n .
(Actually, the authors briefly discuss this construction on page 222 of [10]).
We leave the details to the reader.
Obviously, given the computational complexity of the language with  and 2, we obtain an upper bound for the language with additional operators n , n > 1, by adding one exponential.
The result above states that this upper bound is optimal.
Note also that the proof above goes through for satisfiability in models with finite domains.
4.
Upper bounds Now we obtain the matching upper bounds for some decidable fragments of first-order temporal logics based on hN ; <i .
The maximal awell-behaveda sublanguage of QT L yet discovered [11] consists of so-called monodic formulas.
A QT L-formula is said to be monodic if it has no subformula of the form ' S or ' U with more than one free variable.3 The set of all monodic formulas will be denoted by QT L 1 .
The result obtained in [11] states (roughly) that, if we take a fragment QT L0 of QT L 1 whose underlying firstorder (non-temporal) part is decidable, then QT L0 is decidable over hN ; <i , hQ ; <i , and some other flows of time.
Examples of QT L0 include:       the monadic monodic fragment QT Lmo 1 , the one-variable fragment QT L1 ,  the two-variable monodic fragment QT L21 , the packed monodic fragment T PF 1 .
Here, T PF 1 is the fragment of QT L 1 in which quantification is restricted to patterns 9y( ^ '), where y is a tuple of variables, every free variable of ' is free in  as well, and the aguarda  is a conjunction of atomic and existentially quantified atomic formulas such that for any two free variables x1 , x2 of  , there is a conjunct of  in which x1 , x2 both occur free.
This definition is based on the packed fragment of first-order logic, defined by Marx in [13].
The 3 In  ?
U '.
what follows, we consider the operator   as an abbreviation of  clique-guarded fragment of GraEdel [9] is an equivalent formulation.
These are aguardeda fragments; their satisfiability problem is 2EXPTIME-complete.
We now set up some machinery from [11] for the complexity proof.
Let ' be a QT L 1 -sentence.
For every subformula of ' of the form (x) = 1 U 2 or (x) = 1 S 2 with one free variable, we reserve a unary predicate R (x); and for every subsentence of the form = 1 U 2 or = 1 S 2 we fix a fresh propositional variable p .
R and p are called surrogates of (x) and , respectively.
Denote by ' the result of replacing all subformulas of ' of the form 1 U 2 and 1 S 2 , which are not in the scope of another occurrence of U and S , by their surrogates.
Thus, ' is a pure (non-temporal) first-order formula.
Let x be a variable not occurring in '.
We denote by sub ' the set of subformulas of ', and subx ' = f  fx=yg; : fx=yg j (y) 2 sub 'g: Without loss of generality we may identify :: with  , so subx ' is finite.
By a type for ' we mean any Booleansaturated subset t of f j 2 subx 'g a that is,    1  ^ 2 t iff 2  1  subx ';  2 t and  2  2 t, for every ^ 2 1  2   : 2 t iff 2= t, for every : 2 subx '.
To a certain extent, every state I (w) in a first-order tem-  poral model can be characterised a modulo ' a by the set of types that are arealiseda in this state.
This motivates the following definition.
A set C of types is called a state candidate.
However, not all state candidates can represent states in first-order temporal models.
Consider a first-order structure      I = D; P0I ; : : :  and suppose that a 2 D. The set tI (a) = f j 2 subx '; I j= [aag is clearly a type for '.
Say that I realises a state candidate C if C = ftI (a) j a 2 Dg.
A state candidate is said to be (finitely) realisable if there is a (finite) first-order structure realising it.
It is easy to see that a state candidate C is (finitely) realisable iff the sentence realC  = 8x  _ ^  2C 2t  t  (x) ^  ^ t  2C  9x  ^  2t  (x)  is true in some (finite) first-order structure.
A quasimodel for a QT L 1 -sentence ' (based on F = hW; <i) is a triple Q = hF; q; Ri, where q, a state function, is a map associating with each w 2 W a realisable state candidate q(w) for ', and R is a set of runs a functions in Q q( w2W w) satisfying the following conditions:    every r  2 R is coherent and saturated a that is,  a for every 1 U 2 2 subx ' and every w 2 W , we have 1 U 2 2 r(w) iff there is v > w such that 2 2 r(v ) and 1 2 r(u) for all u 2 (w; v ), and a for every 1 S 2 2 subx ' and every w 2 W , we have 1 S 2 2 r(w) iff there is v < w such that 2 2 r(v ) and 1 2 r(u) for all u 2 (v; w);    and for every w 2 W and every t 2 q(w), there exists a run r 2 R such that r(w) = t.  The following general theorem provides upper bounds for the computational complexity of the satisfiability problem for decidable monodic fragments over the flow of time hN ; <i .
Theorem 4.1.
Let QT L0 be a sublanguage of QT L 1 .
(i) Suppose that there is an algorithm which, given a state candidate C for a QT L0 -sentence ', can recognise whether C is (finitely) realisable using exponential space in the length of '.
Then the satisfiability problem for QT L0 in models over hN ; <i (with finite domains) is decidable in EXPSPACE.
(ii) Suppose that there is an algorithm which, given a state candidate C for a QT L0 -sentence ', can recognise whether C is (finitely) realisable in deterministic double exponential time in the length of '.
Then the satisfiability problem for QT L0 in models over hN ; <i (with finite domains) is decidable in 2EXPTIME.
Proof.
Without loss of generality (see, e.g., [6]) we can consider only S -free formulas.
(i) We present a non-deterministic EXPSPACE satisfiability checking algorithm for QT L0 -sentences which is similar to that of [22].
Theorem 24 of [11] states that a QT L0 -sentence ' is satisfiable over hN ; <i iff there is a aballoon-likea quasimodel Q = hhN ; <i ; q ; Ri, where q(l1 + n) = q(l1 + l2 + n) for some fixed l1 , l2 (l2 > 0) and every n 2 N , and both l1 , l2 are double exponential in the length `(') of '.
Thus, given a QT L-sentence ', the algorithm guesses the length of the prefix l1 and the period l2 of the quasimodel to be built.
Then at every step i it guesses a state candidate q(i) and checks whether q(i) is realisable and suitable for the quasimodel (in the sense that we have enough runs).
Note that q(i) can be represented using exponential space in `(').
The former test requires no more than exponential space in `('), and the latter one can be done in deterministic polynomial time in the length of q(i), so again using exponential space.
It is to be noted that this algorithm needs to store at most three state candidates at every step (previous q(i 1), current q(i), and the beginning of the loop q(l1 )).
It also needs to keep the list of unfulfilled eventualities (formulas of the  form 1 U 2 ) for every type of the current state candidate.
Therefore, the presented non-deterministic algorithm requires only an exponential amount of space.
By [20], there is an equivalent deterministic algorithm that runs in exponential space.
(ii) The proof is similar to that of (i).
The difference is in the algorithm for checking realisability of state candidates, which now uses alternation and runs in exponential space in the length of the formula.
The existence of such an algorithm follows from the fact that 2EXPTIME coincides with AEXPSPACE [4].
The argument for finite domains is similar.
Theorem 4.2.
(i) The satisfiability problem for the lan1 and QT L21 in models over the guages QT Lmo 1 , QT L flow of time hN ; <i (with arbitrary or only finite domains) is EXPSPACE-complete.
(ii) The satisfiability problem for T PF 1 in models over hN ; <i (with arbitrary or only finite domains) is 2EXPTIME-complete.
Proof.
The lower bounds follow from Theorem 3.1 and [9].
To establish the upper bounds for the case of arbitrary domains, we apply Theorem 4.1 and use the formula realC stating that C is realisable.
Although the length of realC is exponential in the length `(') of ', using its specific structure one can show that for the monadic, one- and twovariable fragments the realisability test can be carried out by non-deterministic algorithms that run in exponential space in `(') (see [3]), and by a deterministic algorithm in double exponential time in `(') for the packed fragment [8].
The upper bounds for the case of finite domains follow in the same way from Theorem 4.1 and the fact that all the considered first-order fragments have the finite model property (and thus realisability coincides with finite realisability).
Acknowledgements The work of I. Hodkinson, R. Kontchakov and M. Zakharyaschev was partially supported by U.K. EPSRC grant no.
GR/R45369/01; M. Zakharyaschev was also supported by EPSRC grant no.
GR/R42474/01.
References [1] R. Alur and T.A.
Henzinger.
A really temporal logic.
Journal of the ACM, 41:181a204, 1994.
[2] A. Artale, E. Franconi, F. Wolter, and M. Zakharyaschev.
A temporal description logic for reasoning about conceptual schemas and queries.
In S. Flesca, S. Greco, N. Leone, and G. Ianni, editors, Proceedings of JELIAa02, volume 2424 of Lecture  Notes in Computer Science, pages 98a110.
Springer, 2002.
[17] M. Reynolds.
The complexity of the temporal logic over the reals, 1999.
Submitted.
[3] E. BoErger, E. GraEdel, and Yu.
Gurevich.
The Classical Decision Problem.
Perspectives in Mathematical Logic.
Springer, 1997.
[18] M. Reynolds.
The complexity of the temporal logic with until over general linear time.
Journal of Computer and System Science, 2002.
To appear.
[4] A. Chandra, D. Kozen, and L. Stockmeyer.
Alternation.
Journal of the ACM, 28:114a133, 1981.
[19] M. Reynolds and M. Zakharyaschev.
On the products of linear modal logics.
J.
Logic Computat., 11:909a 931, 2001.
[5] P. van Emde Boas.
The convenience of tilings.
In A. Sorbi, editor, Complexity, Logic and Recursion Theory, volume 187 of Lecture Notes in Pure and Applied Mathematics, pages 331a363.
Marcel Dekker Inc., 1997.
[6] D. Gabbay, A. Kurucz, F. Wolter, and M. Zakharyaschev.
Many-Dimensional Modal Logics: Theory and Applications.
Studies in Logic.
Elsevier, 2003.
To appear.
[7] D. Gabbay and V. Shehtman.
Products of modal logics.
Part I.
Journal of the IGPL, 6:73a146, 1998.
[20] W. Savitch.
Relationship between nondeterministic and deterministic tape classes.
Journal of Computer and System Sciences, 4:177a192, 1970.
[21] K. Schild.
Combining terminological logics with tense logic.
In Proceedings of the 6th Portuguese Conference on Artificial Intelligence, pages 105a120, Porto, 1993.
[22] A. Sistla and E. Clarke.
The complexity of propositional linear temporal logics.
Journal of the Association for Computing Machinery, 32:733a749, 1985.
[8] E. GraEdel.
On the restraining power of guards.
Journal of Symbolic Logic, 64:1719a1742, 1999.
[23] A. Sistla and S. German.
Reasoning with many processes.
In Proceedings of the Second IEEE Symposium on Logic in Computer Science, pages 138a153, 1987.
[9] E. GraEdel.
Decision procedures for guarded logics.
In Automated Deduction - CADE16, volume 1632 of LNCS, pages 31a51.
Springer-Verlag, 1999.
Proceedings of 16th International Conference on Automated Deduction, Trento, 1999.
[24] A. Sistla and L. Zuck.
On the eventuality operator in temporal logic.
In Proceedings of the Second IEEE Symposion on Logic in Computer Science (LICSa87), pages 153a166.
IEEE Computer Society, 1987.
[10] J. Halpern and M. Vardi.
The complexity of reasoning about knowledge and time I: lower bounds.
Journal of Computer and System Sciencees, 38:195a237, 1989.
[11] I. Hodkinson, F. Wolter, and M. Zakharyaschev.
Decidable fragments of first-order temporal logics.
Annals of Pure and Applied Logic, 106:85a134, 2000.
[12] L. Lamport.
What good is temporal logic?
In R. E. A. Mason, editor, Information Processing 83, pages 657a 668.
Elsevier Publishers, 1983.
[13] M. Marx.
Tolerance logic.
J.
Logic, Language and Information, 10:353a373, 2001.
[14] M. Marx and M. Reynolds.
Undecidability of compass logic.
J.
Logic Computat., 9:897a914, 1999.
[15] H. Ono and A. Nakamura.
On the size of refutation Kripke models for some linear modal and tense logics.
Studia Logica, 39:325a333, 1980.
[16] M. Reynolds.
A decidable temporal logic of parallelism.
Notre Dame Journal of Formal Logic, 38:419a 436, 1997.
[25] F. Wolter.
Properties of tense logics.
Mathematical Logic Quarterly, 42:481a500, 1996.
[26] F. Wolter and M. Zakharyaschev.
Temporalizing description logics.
In D. Gabbay and M. de Rijke, editors, Frontiers of Combining Systems II, pages 379a 401.
Studies Press/Wiley, 2000.