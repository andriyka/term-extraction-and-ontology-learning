Configuration Logic: A multi-site Modal Logic Roger Villemaire, Sylvain Halle, Omar Cherkaoui Universite du Quebec a Montreal C. P. 8888, Succ.
Centre-Ville Montreal, Canada H3C 3P8 villemaire.roger@uqam.ca  Track 3: Temporal Logic in Computer Science Specification and verification of systems Temporal logics for distributed systems  Abstract We introduce a logical formalism for describing properties of configurations of computing systems.
This logic of trees allows quantification on nodes labels which are modalities containing variables.
We explain the motivation behind our formalism and give a classical semantics and also a new equivalent one based on partial functions on variables.
1 Introduction Managing computing equipment configurations is a central task in computer science.
The increase in computational power and in number of computing devices makes this task error prone.
It is important to be able to describe properties in a abstract way to help automatize the management of devices configuration.
We propose in this paper a simple extension to modal logic, aimed at describing properties of computing equipment.
Even if our motivation is towards applications in computer networks, our logical system is applicable to any type of device.
Our goal is to develop a formalism to check, analyze and help debug complex configurations.
In this paper we make a first step in this direction presenting the logical system, a classical semantics and also a new formal semantics in terms of partial functions on variables.
We have tried to keep our logical system as simple as possible and as close as possible to the goal of analyzing configurations.
The paper is structured as follows.
We define our logic in section 2, we explain the motivation in the field of computer networks in section 3, we relate our logic to others computational logic in section 4.
Finally we develop the new formal semantics in section 5 and we conclude with section 6.
2 Configuration logic 2.1 Syntax A Configuration Logic language CL is formed of a set of names N ames = {p, q, r, p1 , q1 , r1 , .
.
.
}, a set of variables V ariables = {x, y, z, x 1 , y1 , z1 , .
.
.}
and a set of relations R1 (x), R2 (x), .
.
.
(respectively of arity arity(R1 ), arity(R2 ), .
.
.).
Formulas are built using the usual boolean connectives ([?
], [?
], !)
and the following quantifiers: Existential quantifiers: There are two forms of existential quantifiers: hp = xiph and hp = x; p = xiph, where p is a name, p a finite sequence of names, x a variable and x a finite sequence of variables of the same length as p. Only the last variable x is considered bound as it will become clear in the classical semantics described further.
Universal quantifiers: There are also two forms of universal quantifiers: [p = x]ph and [p = x; p = x]ph, where p, p, x and x are the same as for existential quantifiers.
Here again only the last variable x is considered bound.
If it is necessary to explicitly write the elements  p1 , .
.
.
, pn of p and those x1 , .
.
.
, xn of x, we will write the quantifiers as hp1 = x1 , .
.
.
, pn = xn ; p = xiph and [p1 = x1 , .
.
.
, pn = xn ; p = x]ph.
To simplify proofs and definitions, we will consider that hp = xiph and [p = x]ph are special cases of [p = x; p = x]ph and hp = x; p = xiph, where p and x are empty.
Without loss of generality, we will restrict ourselves to sentences in which every variable is bound only once.
By renaming, every sentence can be put into this form.
In fact, we want to limit the use of quantifiers in such a way that they are extensions of previous ones.
To make this notion clear, let us introduce the following definition.
Definition 1 A sentence is a formula such that every variable is bound and furthermore any sub-formula hp1 = x1 , .
.
.
, pn = xn ; p = xips is contained in a sub-formula that does not bind any of the x1 , .
.
.
, xn-1 and is of the form hp1 = x1 , .
.
.
, pn-1 = xn-1 ; pn = xn iph  A configuration is a forest (set of trees) where every node is labeled by a name and a value.
Furthermore, no two roots (top level nodes) can have the same name and value.
Similarly, every node has no more than one child having the same name and value.
Formally, we introduce the following definition.
Definition 4 A Configuration is a structure of the form hV, N, R1 , ..., Rn i where: * V is the set of values; * N the set of nodes, is a set of words closed under prefix, on the alphabet formed of (p = v), with p a name and v [?]
V ; * R1 , .
.
.
, Rn are relations on V (i.e.
subsets of V arity(R1 ) , .
.
.
, V arity(Rn ) respectively).
A configuration represents a hierarchical set of parameters configuring some computing equipment.
The nodes representing the parameters have a name and a value.
To introduce the classical semantics we need the following definition.
Definition 5 A Valuation for a configuration is a function r : V ariables - V .
or of the form [p1 = x1 , .
.
.
, pn-1 = xn-1 ; pn = xn ]ph The same must be true of sub-formulas [p 1 x1 , .
.
.
, pn = xn ; p = x]ps.
2.2 Configurations  =  We will introduce some definitions before giving the classical semantics.
Definition 2 A Path is a finite non-empty word on the alphabet formed of all (p = x) where p is a name and x a variable.
Definition 3 A Name-Path is a finite non-empty word on the alphabet formed of all names.
If p = p1 .
.
.
pn and x = x1 .
.
.
xn we will usually write (p = x) for the path (p1 = x1 ) * * * (pn = xn ).
We denote by r[x/v] the valuation that agrees with r on every variable but x, in which case it returns v. We will also write r(x) for r(x1 ) * * * r(xn ) where x = x1 * * * x n .
We can now give the classical semantics for the configuration logic.
Definition 6 Let C be a configuration and r be a valuation for this configuration.
We say that C satisfies a configuration logic formula ph under valuation r (in notation C, r |= ph), if recursively: * C, r |= Ri (x) if Ri (r(x)) holds; * C, r |= ph [?]
ps if C, r |= ph and C, r |= ps; * C, r |= ph [?]
ps if C, r |= ph or C, r |= ps; * C, r |= !ph if C, r 6|= ph;  its siblings.
In our example the node int=eth0 represents the unique interface with name eth0.
3.1 Network Management  Figure 1.
A simple configuration for IP address  * C, r |= hp = x; p = xiph if there exists a v [?]
V such that (p = r(x))(p = v) [?]
N and C, r[x/v] |= ph; * C, r |= [p = x; p = x]ph if for all v [?]
V such that (p = r(x))(p = v) [?]
N it holds that C, r[x/v] |= ph.
Remind that as stated before only the last variable of a quantifier is bound.
3 Motivation The goal behind the development of CL is to describe and verify properties on configurations of computing equipment.
In particular, we are interested in validating the configuration of network routers, which are the equipment responsible for forwarding packets towards their destination.
The configuration of a router is the set of parametervalue pairs that describe the state of the device at a given moment.
These parameter-value pairs are organized in a hierarchical fashion: for example, each router may have multiple interfaces, and each interface has its IP address.
Figure 1 shows a portion of the configuration of a router containing two interfaces, called eth0 and eth1, whose IP addresses are respectively 192.168.1.13 and 192.168.1.14.
In a parameter-value pair, the parameter is a static name, while the value is configurable.
It is important to note that the parameter-value pair is unique among  The global configuration of a network is formed of the configuration of its routers.
To ensure proper functioning of the network, specific relations must be satisfied on the values of the parameters, which may span multiple devices.
When new network services are added, some parameters of the configuration must be changed.
In order to assure that all services still function properly, these changes must be made in such a way that existing relations are still fulfilled.
Due to the size of present networks and the complexity of services, it is of prime importance to develop formalisms and methods to help manage complex configurations in order to ensure that the network stays in a consistent state.
To illustrate the kind of applications we have in mind, we will give two simple, but still representative examples.
3.2 Example 1: IP addresses As has been explained earlier, the parameters of the configuration affected by a service must verify some specific relations.
The simplest example of such relation can be seen in an IP address following the Classless InterDomain Routing (CIDR) scheme [5], [11], whose two components, the value and the subnet mask, are linked by a simple relationship: an address like 206.13.01.48/25, having a network prefix of 25 bits, must carry a mask of at least 255.255.255.128, while the same address with a network prefix of 27 bits must not have a subnet mask under 255.255.255.224.
Figure 2 depicts a portion of a configuration representing an IP address (ip) with its subnet mask (mask) and network prefix (pref).
Let R(m, p) be a relation which holds if m is an acceptable mask for the prefix p. The previous property can be expressed by the CL formula of Figure 3, stating that all addresses a must have a mask m and a prefix p satisfying R(m, p).
Figure 2.
A simple configuration for IP address  [ip = a]hip = a; mask = mi hip = a; pref = pi R(m, p) Figure 3.
A formula for the correct specification of IP addresses  3.3 Example 2: Virtual Private Networks More complex situations can be encountered, in which the parameters of several devices supporting the same service are interdependent.
An example is provided by the configuration of a Virtual Private Network (VPN) service [10], [12], [13].
A VPN is a private network constructed within a public network such as a service provider's network.
A customer might have several sites geographically dispersed, and would like to link them together by a protected communication.
Most of the configuration of a VPN is realized in routers placed at the border between the client's and the provider's networks.
On the client side, these routers are called customer edge (CE) routers, and on the provider side, they are called provider edges (PE).
Many techniques have been developed to ensure the transmission of routing information inside a VPN without making this information accessible from the outside.
One frequently used method consists in using the Border Gateway Protocol (BGP).
This method involves the configuration of each PE to make it a "BGP neighbor" of the other PE's [10].
Without getting into the details, it suffices to know that one interface in each PE router must have its IP address present as a BGP neighbor of each other PE router.
Let P E(r) be a relation satisfied by the PE routers, and N eighbor(a, r) be a relation which holds when  Figure 4.
An excerpt from a configuration of a VPN  [router = r1 ][r = r2 ] (P E(r1 ) [?]
P E(r2 ) [?]
r1 6= r2 - hrouter = r1 ; int = iiN eighbor(i, r2 ))  Figure 5.
A formula for the configuration of a Virtual Private Network  the address a is a BGP neighbor of router r. This property can be expressed by the CL formula of figure 5, stating that for each pair of different routers r 1 and r2 that are both PE's, some interface of r 1 must be a BGP neighbor of r2 .
4 Related Logics In this section, we provide a comparison of CL to other related logics.
4.1 Modal Logics Modal (, 2) and multi-modal (hai, [a]) modalities trace a path and allow to refer to properties of nodes in the future.
While in modal and multi-modal logic one refers to properties of individual future states, in CL the quantifiers allow to reach different nodes and then refer to a property involving many nodes.
For instance the following CL sentence  4.3 Guarded Logics hp = xihp = yix 6= y could at best be expressible in multi-modal logic by _  hp = aiT [?]
hp = biT  a6=b  where a, b range over the domain of x and y.
Hence classical modal and multi-modal logics can be seen as mono-site: basic relations are on the contents of nodes.
On the other hand CL can be seen as a multi-site modal logic: basic relations can involve many nodes.
Of course the presence of variables in modalities will come at a price as we will show below.
4.2 TQL The logic that mainly inspired us is the Tree Query Logic (TQL) [2, 3].
TQL has been developed as the spatial fragment of a more general logic called the ambient logic.
It is a logic which not only allows formulation of sentences that can be model checked against a given tree, but also queries that extract data from those same trees.
The main application of TQL is targeted towards the extraction of data from databases modeled by XML files.
Using TQL prefix operator and its quantification on arbitrary labels of nodes, one gets the CL quantifiers.
CL is therefore a fragment of TQL.
Moreover, TQL provides fix-point operators for expressing recursive properties.
Hence, TQL is much more expressive than CL: It allows more flexible quantifications and recursion by fix-points.
It has been shown that TQL is an undecidable logic: there is no algorithm to decide if there exists a finite structure satisfying a TQL sentence [4].
We have used TQL as a tool for the validation of device configurations [7, 8].
This motivates us to investigate fragments of a logic which would be suitable for describing configurations.
Our goal is to tailor a logic for configuration purpose and to avoid non necessary constructs like fix-points.
Even if our logic is still undecidable as we show below, its simplicity makes easier its integration in a tool.
Our team is actually working on its integration in a network configuration tool.
Guarded logic is a fragment of first-order logic which generalize modal logic.
In guarded logic all quantifiers must be relativized by atomic formulas.
Therefore, quantifiers in the guarded fragment of firstorder logic appear only in the form [?
]y(a(x, y, z) [?]
ps(x, y)) or [?
]y(a(x, y, z) - ps(x, y)) The atom a, called the guard, must contain all free variables of ps [6].
The loosely guarded logic is a generalization of guarded logic where the condition on the guard is relaxed.
In this case the guard must be a conjunction of atomic formulas such that if x is a free variable of a, and y is a variable from y, then there is a conjunct in the guard where x and y both occur [9].
These fragments of first-order logic have a number of interesting properties.
It has been shown [1] that the satisfiability problem for the guarded fragment is decidable, and, moreover, that it has the finite model property (every satisfiable formula in the guarded fragment has a finite model).
The loosely guarded fragment has been shown to have the small model property [9].
Unfortunately, CL configuration properties are neither guarded nor loosely guarded.
For instance, let us consider the sub-formula hrouter = r1 ; int = iiN eighbor(i, r2 ) of the sentence of figure 5.
It can be translated in firstorder terms to [?
]i I(r1 , i) [?]
N eighbor(i, r2 ) where I(r, i) holds if i is a interface of router r. Since r2 is a free variable of N eighbor(i, r2 ) which is not in the guard I(r1 , i), this formula is not guarded.
Furthermore, in general, there is no guarded or loosely guarded equivalent to a CL sentence.
This follows from the fact that one can define an infinite total order in CL by the following sentences on one binary relation R. The conjunction of these sentences is consistent, but it has no finite model, hence the finite model property does not hold for configuration logic.
[p = x]!R(x, x) [p = x][p = y][p = z]R(x, y) [?]
R(y, z) - R(x, z) [p = x]hp = yiR(x, y)  4.4 From classical first-order logic to CL In fact, classical first-order logic can be interpreted in CL by replacing existential quantifiers [?
]x by hp = xi and universal quantifiers [?
]x by [p = x], for some fixed name p. By Trakhtenbrot's result [14] which states that for a first-order language including a relation symbol that is not unary, satisfiability over finite structures is undecidable, we have the analog for CL.
Therefore there can be no effective way to find a bound on the size of the smallest finite model of a CL formula, since enumerating the structures of this size would give decidability for the existence of a finite structure satisfying the sentence.
5 Adapted Valuations As shown above CL does not have nice computational properties like decidability and small model property.
Nevertheless the simplicity of CL allows the investigation of fragments which would be expressible enough for the applications we have in mind, but would still satisfy these properties.
Our investigation of fragments of CL has shown us that the above classical semantic is not appropriate for CL.
CL being a logic about path in trees, it is difficult to work with valuations which are not constrained by the tree structure.
For instance, our existential quantifiers mean the existence of a value on a path an not merely of some value.
Therefore we now give a semantics in terms of partial functions on variables.
The idea is that in order to check a sentence one has to recursively check sub-formulas.
In turn, to check a sub-formula, one has to consider valuations.
We show in this section that instead of considering general valuations, it is sufficient to restrict ourselves to functions sending variables to values that satisfy the hierarchical structure of the variables in the sentence.
This allows to integrate the hierarchical condition on the values of  variables into the definition of these new kinds of valuations.
We propose this new semantics in this section and show that it is equivalent to the previous classical semantics.
Definition 7 The Path of a sub-formula of the form hp = xips or hp = xips is (p = x).
Similarly, the Path of a sub-formula hp = x; q = yips and hp = x; q = yips is (p = x)(q = y).
Since in a specific sentence a variable is bound only once, we will speak of the Path of a bound variable which is the path of the quantifier binding this variable in the sentence.
From definition 1 one can show by induction that the following result holds.
Proposition 1 Let ph be a sentence and x a variable of ph of path (pn = x1 ), .
.
.
, (pn , xn )(p, x).
For all i = 1, .
.
.
, n we have that the path of xi is (pn = x1 ), .
.
.
, (pi , xi ).
We will say that f : A - B is a partial function if f is a function sending elements of its domain dom(f ) to elements of B.
Let ph be a CL formula.
We denote by V ariables(ph) the set of variables (bound or free) of ph.
We can now give the definition of our restricted form of valuation.
Definition 8 Let C = hV, N, R1 , ..., Rn i be a configuration and ph be a sentence.
A partial function r : V ariables(ph) - V is said to be adapted (or phadapted) for C if for every variable y [?]
dom(ph) of ph of path (p1 = y1 ) * * * (pn = yn )(p = y), the following conditions holds: 1.
{y1 , .
.
.
, yn } [?]
dom(r) 2.
(p1 = r(y1 )) * * * (pn = r(yn ))(p = r(y)) [?]
N .
We now have the following fact.
Proposition 2 Let C = hV, N, R1 , ..., Rn i be a configuration, ph be a sentence, and r be a valuation for C adapted to ph.
Let also (p1 = x1 ) * * * (pr = xr )(q = y) be the path of y in ph for some y 6[?]
dom(r).
We have that if {x1 , .
.
.
, xn } [?]
dom(r) and if v [?]
V is such that (p1 = r(x1 )) * * * (pr = r(xr ))(q = v) [?]
N then r0 = r[y/v] is adapted to ph.
Proof 1 To prove that r0 = r[y/v] is adapted, we must show that for y 0 [?]
dom(r0 ) of path (q1 = y1 ) * * * (qm = ym )(q = y 0 ) it holds that 1.
{y1 , .
.
.
, yn } [?]
dom(r0 ) 2.
(q1 = r0 (y1 )) * * * (qm = r0 (ym ))(q = r0 (y 0 )) [?]
N As y 6[?]
dom(r), y cannot appears in any path of a variable of dom(r0 ) except its own.
Therefore the claim must be shown only for y 0 = y.
For y = y 0 the claim follows from the hypothesis.
By the previous result we have that if r is a valuation satisfying definition 6 is adapted and if its domain contains all free variables of the formula under consideration but not y, then the valuations r[y/v] considered in this definition are again adapted.
This fact makes it possible to precise the relationship between adapted and "regular" valuations.
Lemma 1 Let ph be a sub-formula of some sentence ph0 , let C = hV, N, R1 , ..., Rn i be a configuration and r be a valuation for C whose domain contains all free variables of ph.
If F is a set of variables containing all free variables of ph but none of its bound variables, and if r| F , the restriction of r to the domain F , is ph 0 -adapted, then the following conditions are equivalent: 1.
C, r |= ph 2.
C, r|F |= ph Proof 2 The proof goes by induction on the structure of ph.
The cases of an atomic formula, conjunction, disjunction and negation are clear.
All cases of existential and universal quantifiers are similar, so we give details only for ph = hp = x; q = yips.
If C, r |= hp = x; q = yips, then by definition 6, we have that there exists a v [?]
V such that (p = r(x))(q = v) [?]
N and C, r[y/v] |= ps.
Now since y 6[?]
F it follows that y 6[?]
dom(r| F ).
Therefore by Proposition 2 it follows that (r| F )[y/v] is ph0 -adapted.
Let F 0 = F [?]
{y}.
We have that (r|F )[y/v] = r[y/v]|F 0 since they both agree on F and on y.
So r[y/v]|F 0 is ph0 -adapted.
Since F 0 contains all free and no bound variable of ps, it follows by induction hypothesis that C, r[y/v]|F 0 |= ps holds.
Again by equality r|F [y/v] = r[y/v]|F 0 and by definition 6 we have that C, r|F |= hp = x; q = yips holds.
Conversely if C, r|F |= hp = x; q = yips, by definition 6, we have that there exists a v [?]
V such that (p = r(x))(q = v) [?]
N and C, r|F [y/v] |= ps.
As before, it follows from Proposition 2 that (r|F )[y/v] is ph0 -adapted.
Furthermore (r|F )[y/v] = r[y/v]|F 0 holds.
Therefore we have by induction hypothesis that C, r[y/v] |= ps and hence C, r |= hp = x; q = yips.
It now follows that: Theorem 1 Let C = hV, N, R1 , ..., Rn i be a configuration, ph be a sentence and r be a valuation for C. Let [?]
be the empty ph-adapted valuation (its domain is the empty set).
We have that C, r |= ph if and only if C, [?]
|= ph.
From the previous result we get the following equivalence.
Theorem 2 Let C =< V, N, R1 , ..., Rn > be a configuration and ph be a sentence.
The following condition are equivalent.
1.
C, r |= ph for all valuations r; 2.
C, r |= ph for some valuation r; 3.
C, r |= ph for some ph-adapted valuation r; 4.
C, r |= ph for all ph-adapted valuations r. Proof 3 The result follows directly from Theorem 1, since to check that C, r |= ph for some valuation r, it suffices to check that C, [?]
|= ph holds.
Remark 1 It is important to note that the hierarchical structure of variables constrains the possible adapted valuations.
Therefore even if the empty valuation is always an adapted valuation, there is not always an adapted valuation whose domain contains all free variables, as the following example shows.
Example 1 If C = hV, N, R1 , ..., Rn i is such that N contains no (p = v) for some name p then there is no ph-adapted valuation on C for ph = hp = xix = x, whose domain contains x.
6 Conclusion We proposed a new logic for describing the configuration of computing equipment and motivated it with examples from the field of network configuration.
We also gave a classical and a new equivalent semantics.
Since we are interested in applications, we are working at integrating CL in a network configuration tool.
We are also working on using our new semantics to investigate a fragment of CL which would be sufficient to express the properties needed in practice, while having better theoretical properties like decidability and small model property.
References [1] H. Andreka, J. van Benthem, I. Nemeti: Modal Languages and Bounded Fragment of Predicate Logic, ILLC Research Report ML-96-03 (1996), 59 pages.
[2] Cardelli, L.: Describing semistructured data.
SIGMOD Record, 30(4), 80-85.
(2001) [3] Cardelli, L., Ghelli, G.: TQL: A query language for semistructured data based on the ambient logic.
To appear in Mathematical Structures in Computer Science.
[4] Giovanni Conforti, Giorgio Ghelli: Decidability of Freshness, Undecidability of Revelation.
FoSSaCS 2004: 105-120 [5] Fuller, V., Li, T., Yu, J., Varadhan, K.: Classless Inter-Domain Routing (CIDR): an Address Assignment and Aggregation Strategy.
RFC 1519 (1993)  [6] Gradel, E.: On The Restraining Power of Guards.
J. Symb.
Log.
64(4): 1719-1742 (1999) [7] Sylvain Halle, Rudy Deca, Omar Cherkaoui, Roger Villemaire: Automated Validation of Service Configuration on Network Devices.
MMNS 2004: 176-188 [8] Sylvain Halle, Rudy Deca, Omar Cherkaoui, Roger Villemaire, Daniel Puche: A Formal Validation Model for the Netconf Protocol.
DSOM 2004: 147-158 [9] Hodkinson, I. M.: Loosely Guarded Fragment of First-Order Logic has the Finite Model Property.
Studia Logica 70(2): 205-240 (2002) [10] Pepelnjak, I., Guichard, J.: MPLS VPN Architectures, Cisco Press (2001) [11] Rekhter, Y., Li, T.: An Architecture for IP Address Allocation with CIDR.
RFC 1518 (1993) [12] Rosen, E., Rekhter, Y.: BGP/MPLS VPNs.
RFC 2547 (1999) [13] Scott, C., Wolfe, P. Erwin, M.: Virtual Private Networks, O'Reilly (1998) [14] B.A.
Trakhtenbrot, Impossibility of an algorithm for the decision problem in finite classes, Dok.
Akad.
Nauk SSSR 70 (1950) 569-572.