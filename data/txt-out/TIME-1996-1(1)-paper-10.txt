Processing Disjunctions of Temporal Constraints E. Schwalb  R.Dechter  Information and Computer Science Dept.
University of California, Irvine Abstract  All these tasks are known to be NP-complete [4, lo].
The source of complexity stems from allowing disjunctive relationships between pairs of variables.
Disjunctive constraints often arise in scheduling and planning applications.
As an example of a disjunctive relation, consider the constraint specifying that the time it takes to ship cargo depends on whether it is shipped by air or ground transports.
This paper describes new algorithms for processing quantitative Temporal Constraint Satisfaction Problems (TCSP).
I n contrast to discrete CSPs, enforcing path-consistency on TCSPs as exponential due to the fragmentaiton problem.
We present an eficient polynomial constraint propagation algorithms, called Loose Path Consistency, which is shown to improve the performance backtrack search algorithms by orders of magnitude.
The tradeoffs between the eflectiveness and eficiency of L P C are analyzed.
We report the presence of a phase transition on this domain and perform the empirical evaluation on problems which die in the transition region.
1  Example 1 : A large cargo needs to be delivered from New York to Los Angeles within 8-10 days.
From New York to Chicago the delivery requires 1-2 days by air or 10-11 days on the ground.
From Chicago to L.A. the delivery requires 3-4 days by air o r 13-15 days on the ground.
Given the above constraints, we are interested in answering questions such as: "are these constraints satisfiable ?)'
or "when should the cargo be in Dallas ?"
or "can the cargo arrive in L.A. on Jan 8-9 ?".
The model of Temporal Constraint Satisfaction Problems (TCSP) provides a representation with which such questions can be answered.
Introduction  Problems involving temporal constraints arise in various areas such as scheduling [12] and planning with temporal databases [3, 141.
Several formalisms for expressing and reasoning about temporal constraints have been proposed, most notably, Allen's interval algebra l], Vilain, Kautz and van Beek's point algebra [15 , Dean's Time Map Management [ 3 ] ,Dechter, Meiri and Pearl's Temporal Constraint Satisfaction Problems (TCSP) [4] and Meiri's combined model of quantitative and qualitative networks [lo].
Improved algorithms for processing Allen's interval algebra were presented in [9].
Here we extend the work on TCSPs by providing a new algorithm which improves on the algorithms presented in [4,131.
In this paper, we present a new polynomial approximation algorithm for processing quantitative constraint networks, which is extended to process combined qualitative and quantitative constraints.
In the reminder of this paper we use TCSP to refer to the combined qualitative and quantitative model.
i  The central task in constraint processing is to decide consistency of a set of constraints.
Since deciding consistency is intractable, it is common to use approximation algorithms such as path-consistency.
In contrast to discrete CSPs, enforcing path-consistency on TCSPs may be exponential, as noted in [4] and observed empirically in [13].
This motivated a polynomial algorithm for approximating path-consistency] called Upper-Lower-Tightening (ULT).
Here we identify the cause of the exponential behavior and present an improved algorithm called Loose Path-Consistency (LPC).
For randomly generated problems, a phase transition from easy to hard is reported on 3-CNF formulas in [2, 111.
It is observed that the most difficult problems lie in the transition region.
Here we show that randomly generated TCSPs also exhibit a phase transition.
The empirical evaluation is performed on relatively hard problems which lie in the phase transition.
We compare our new algorithm, LPC, and the previously proposed algorithm ULT, with respect to efficiency and effectiveness.
By effectiveness we refer to the ability to detect inconsistencies and by efficiency we refer to the execution time.
We show that LPC is significantly more effective than ULT in detecting in-  The TCSP model facilitates the following tasks: 1.
Finding one or more consistent scenarios.
2.
Finding all feasible times at which a given event can occur.
3 .
Finding all relationships between two given events.
30 0-8186-7528/96 $5.00 0 1996 IEEE  -  consistencies and improving performance of backtrack search by orders of magnitude.
2  Algorithm PC 1.
Q {(i, k , j ) I (i < j ) and (k. # 4.i) 1 2. while Q # { } do 3. select and delete a path ( i , k , j ) from Q 4. if Tz, # @Tk, then 5.
T,, T,, n 8 T~,) 6. if T6,= { } then exit (inconsistency) 7.
Q - Q U { ( i , k , i )I V k # i , ~ l 8. end-if 9. end-while  Processing Constraints  zk  A Temporal Constraint Satisfaction Problem (TCSP) consists of a set of variables XI, .
.
.
, X,, having rational domains, each representing a time point.
Each constraint C is a set of intervals  +  (zk  Figure 1: Algorithm PC.
A unary constraint Ci restricts the domain of the variable X i to the given set of intervals  I ,241  A binary constraint Cij over X i , X j restricts the permissible values for the distance X j - X i ; it represents the disjunction  I0.221 W.331 W.501  (2)  cjj  [1,31 [11.131 [17.191 121.22] m.231 E7291 W .361 I37.391 f44461  [1,221 L23.291  W.461  W.W  (b)  ( C)  Figure 2: The fragmentation problem.
Sf ( U 1 5 xj-xi 5 bl)U.. .u(a, 5 xj-xi 5 b,).
the edges represent a disjunctive constraint, namely the interval label [ a l ,bl] [az,621 [as,b3] representin the constraint X j - X i E [ul, bl] U [uz, b 2 ] U [u3,63f Enforcing path consistency on the network in Figure 3a results in increasing the number of intervals of TI3 from 3 to 10 as shown in Figure 3b.
Clearly, if this pattern is repeated throughout the network, the computation may become exponential in the number of triangles processed.
This was observed empirically in ~31.
All intervals are assumed to be open and pairwise disjoint.
A tuple X = (21,. .
.,E,) is called a solution if the assignment X1 = 21,. .
.
,X , = 2, satisfies all the constraints.
The network is consistent iff at least one solution exists.
Definition 1 : [ composition ] Let T = { 1 1 , I z , .
.
.,IT}and S = { J l , J z , .
..,Js}be two constraints.
The compositron of T and S , denoted by T 8 S , admits only values r for which there exists t E T and s E S such that r = t s.  3  +  Algorithm LPC  h  In algorithm Loose Path-Consastency LPC) trol the fragmentation by replacing t e intersection we conoperator n with the loose intersection operator a.
2.1 Path-Consistency and Fragmentation A commonly used constraint propagation algois rithm enforces path-consistency.
A constraint path-consistent iff zj C nvk(zk @ T k j ) and a network is path-consistent iff all its constraints are pathconsistent.
Path-consistency can be enforced by applying the operator zj +- zj n (Til,8 T k j ) until a fixed point is reached.
z,  Definition 2 : The loose intersection, T a S consists of the intervals { I ; , .
.
.,I;} such that V i I: = [L,,Ui] where [hi,Ui] are the lower and upper bounds of the intersection n S.  The number of intervals in the constraint between X i and X j , denoted E l , is not increased by the operation zj c zj a ( z k 8 T k j ) .
Note that the a operator is asymmetric, namely T a S # S a T .
Lemma 1 : [4] Algorithm PC computes a pathconsastent network and termanates an O ( n 3 R 3 ) , where R as the range of the quantitative constraints.
Algorithm DPC terminates an O(n3R2)steps.
Example 2 : Let T = {[1,4],[10,15]} and S = {[3,11], [14,19]}.
Then T Q S = {[3,4], [lo, 15]}, S a T = {[3,11 while S n T = {[3,41, [lo, 111,[14,151  As we enforce path-consistency on quantitative TCSPs, some intervals may be broken into several smaller subintervals and the number of intervals per constraint (i.e.
disjunction size) may increase.
This may result in exponential blowup (bound by O(n3R3)).This is called a fragmentation problem.
Consider the 3 variable network in Figure 3.
Each node represents a point variable, and the intervals on  Algorithm LPC is presented in Figure 3.
The network N' is a relaxation of N and therefore loosely intersecting it with N results in an equivalent network.
At every iteration if LPC (except the first and the last) at least one interval is removed.
This allows us to conclude that:  31  Algorithm Loose Path-Consistency (LPC) 1. input: N 2.
N " + N 3. repeat 4.
N t N" 5.
Compute N ' by assigning TZ3 = nvk(Cik8 C k j ) , for all i , j .
6.
Compute N " by loosely intersecting T/j = Ci, d T i j , for all i , j .
7 .
until 3 i , j (T:; = 4) ; inconsistency, or or V z , j lT/il= lCi31 ; no interval removed.
8. if 3 i , j (Ti; = 4) then output "inconsistent."
else output: N " .
Figure 3: The Loose Path-Consistency (LPC) algorithm.
Lemma 2 : Algorithm LPC (see Figure 2) computes a network which is equivalent to the input network and terminates in O(n3k3e),where n is the number of variables, k is the maximum number of disjuncts per constraint and e is the total number of constraints.
Polynomid  Example 3 : Consider the constraints: XI  -  xo  Xz - X i XB- Xo Xg - XI Xg - X2  E E E  E E  [lo, 201 U [loo, 1101 [20,40] U [loo, 1301 [80,100] U [150,160] U [180,190] [30,40] U [130,150] [50,70] U [110,120] U [130,140] U [160,190]  Figure 4: The partial order on the effectiveness of the variants of LPC.
algorithms form a spectrum of sound but incomplete propagation algorithms.
After 3 iterations, algorithm LPC terminates with the network: x 1  -xo  X2 - X o X2  -XI  XJ -Xo Xg -Xi x 3  -xz  E E E E E E  4  [l0,20] [30,50] [20,30] [150,160] [130,140] [110,120]  Empirical Evaluation  Algorithm ULT was the first algorithm psoposed for processing disjunctions in TCSPs [13].
This section is organized as follows: In section 4.1, we determine relative efficiency and effectiveness of algorithm ULT, algorithm LPC and its variants DLPC and PLPC.
By effectiveness we refer to the ability to detect inconsistencies and by efficiency we refer to the execution time.
In section 4.2 we examine the effectiveness of LPC and ULT as a forward checking procedure within backtracking search.
The empirical evaluation of these search methods is performed on relatively hard problems which lie in the phase transition.
Problems were generated with the following parameters: n and e are the number of variables and constraints, and k is the number of intervals per quantitative point-point constraint.
These quantitative constraints specify integers in [-R, RI, and the tightness Q of a constraint T = { I l , .
.
.
, I k } is (1111+.. .
+ l I k l ) / 2 R where is the size of Ii; we used uniform tightness for all constraints.
4.1 Comparing LPC and ULT We compare the effectiveness of incomplete constraint propagation algorithms by counting the fraction of cases in which the weaker algorithm detected inconsistency provided that the stronger algorithm also detected inconsistency (recall Figure 4).
PC may  3.1 Variants of LPC A variant of algorithm LPC can be obtained by replacing, in algorithm PC (Figure l),the intersection n operator with loose-intersection Q.
Another variant not presented here is called Directional LPC (DLPC .
To refine the tradeoff between effectiveness and e ciency, we restrict the algorithm to induce constraints from only a subset of the triangles, where at least one of the constraints was non-universal in the input network.
The intuition being that second level constraint recording is relatively week.
Algorithm Partial LPC (PLPC) approximates LPC by applying the relaxation and operation l& +- zj a ( z k 8 T k j ) only in case at least one of z k , T k j is non-universal in the input network.
The partial order between the different constraint propagation algorithms we experimented with is presented in Figure 7.
A directed edge from algorithm AI to A2 indicates that A2 computes a tighter network than .AI on an instance by instance basis, and that its complexity is higher accordingly.
Together these  nl  32  # Op.
#  Acc of  Acc of  PLPC  ULT  LPC  PLPC  150 200  98%  90%  25h'  12K  5h'  99%  27K  17K  8K  250 300 350 400  100% 100% 100% 100%  15% 45% 77% 94% 100%  14K 9h7 7h' 6K  11K  lOI< 8K 7K 6K  #  Op.
8K 7K 6K ~~~  0.546 0.623 0.380 0.287 0.244 0.211  Time PLPC 0.400 0.533 0.350 0.275 0.241 0.212  Time DLPC  Time ULT  0.165  0.132 0.162 0.181 0.164 0.126 0.105  0.259 0.315 0.270 0.235 0.204  ~~  or ULT.
Thereafter, on the tightened network, we re-  be exponential in the number of intervals per constraint in the input network while ULT's execution time is almost constant in the number of intervals.
Nevertheless, ULT is able to detect inconsistency in about 70% of the cases in which PC does [13].
Here we demonstrate that algorithm LPC is capable of detecting even more inconsistencies than ULT.
Therefore, we show LPC computes a better approximation to PC than ULT.
We compare the relative effectiveness and efficiency of algorithms LPC, DLPC, PLPC and ULT.
The results are presented in Table 1.
The columns labeled "Acc < alg >" specify the accuracy of algorithm < alg > relative to LPC, namely fraction of cases algorithm < alg > detected inconsistency given that LPC did.
The columns labeled ''# Op < alg >" describe the number of revision operations made by algorithm < alg >.
The basic revision operation of LPC @ T k j ) , while for ULT we use the is xj +- rj a (3:ll~ relaxation operation given in [13].
This measure is machine and implementation independent, unlike execution time.
The problems generated have 32 variables and constraint tightness of 45%.
Each entry represents the average of 200 instances.
From Table 1 we can conclude that (1) LPC is more effective yet less efficient than UL,T, and (2) PLPC is almost as effective as LPC yet more efficient than LPC.
We conclude that on our benchmarks, algorithm PLPC is the best.
Therefore, in the rest of this paper, whenever we mention LPC we refer to PLPC.
4.2  # Op.
Time DLPC LPC  of  Consts  peat selecting and testing consistency until either inconsistency is detected or a solution is found.
When inconsistency is detected, a dead-end is encountered and the search algorithm backtracks undoing the last constraint labeling.
Constraint propagation algorithms can also be used as a preprocessing phase before backtracking, to reduce the number of dead-ends encountered during search.
After preprocessing with algorithm PC, problems became even harder to solve, due to the increased fragmentation.
In contrast, preprocessing with ULT results in problems on which naive backtrack search is manageable [13].
This algorithms is called "OldBacktrack+ULT"; it was used as our reference point.
In this section, we compare three backtrack search algorithms: (1) "Old-Backtrack+ULT" which uses ULT as a preprocessing phase but no forward checking is used; (2) "ULT-BacktrackSULT" which uses U L T both as a preprocessing phase before backtracking and as a forward checking procedure during the search; (3) "LPC-Backtrack+LPC" which uses LPC both as a preprocessing phase before backtracking and as a forward checking procedure during the search.
In Figure 5 we report an exponential increase in number of dead-ends and execution time at certain regions.
This region, where about half of the problems are satisfiable, is called the transition region [2, 111.
In Figures 5a, 5b we observe a phase-transition when varying the size of the network while in Figures 5c, 5d we observe a similar phenomenon when varying the tightness of the constraints.
Some theoretical insights into this phenomenon in discrete CSPs can be found in [16].
As observed in Figure 6, ULT and LPC are capable of pruning dead-ends and improving search efficiency on our benchmarks by orders of magnitude.
In particular, Old-BacktrackSULT is about 1000 times slower than ULT-Backtrack+ULT, which is about 1000 times slower than LPC-BacktrackSLPC.
The latter encounters about 20 dead-ends on the peak (worst performance) on networks with 12 variables and 66 constraints with 3 intervals to instantiate each (see Figure 10).
Backtracking  To find a solution to a given TCSP, we use a backtracking search algorithm.
A solution of a TCSP is a selection of a single interval or relation from each constraint, called constraint labeling.
Consistency of such a constraint labeling is decided by enforcing pathconsistency.
In the first part of this section we reports results of experiments performed on quantitative TCSPs, while in the second part we focus on qualitative networks.
The experiments were performed with a backtrack search algorithm which uses the constraint propagation algorithms presented above (recall Figure 7) as a forward checking procedure.
Given a TCSP, a single interval or relation is selected from a disjunctive constraint and consistency is tested using either PLPC  33  The faction of consistent instances for complete graphs of different sues.
The ditsculty of various sizes as measured using the ULT-Backtrack algorithm.
-  1000  4  3  100  v.r  10  1  i?
@DAss44%  L  P  2 1  5  15  10  20  5  15  10  Number of V 'ables  taT \  I  The difficulty as tightness is constant.
Difficulty vs Tightness for 10,12,14,16vars, complete graphs, 3 irntervals, 500 reps, for IULT-Backtrack + LPC preprocessing.
60  40  20  0  80  Phase transition for 10,12 variabies, 45,66 constraints, 3 intervals, 500 reps.  0  1M)  20  Ti h ess  40  60  80  100  Ti"h"Tq  f c'f The difficulty as a function of tightness.
Figure 5 Comparing Backtracking Algorithms foi Quantitative Point-Point Networks, 12 vars, 66 consts, 3 intervals, 500 reps.  l ~ o ~  10 7 1 The t m e for ULT-Backtrack + ULT prep at the peak was about 100seconds.
The t m e for LE-Backtrack + LF'C prep at the peak was about 1.5 seconds.
1000 1  4  loo.
10 10  I;  .
10  20  40  60  Tightness  so  0  100  .
20  .
40  .
60  Tightness  Figure 6: A comparison of various backtracking algorithms.
34  '  80  4  100  5  Conclusion  References Allen, J.F., 1983.
Maintaining knowledge about temporal intervals, CACM 26 (11): 832-843.
1991.
Cheesman, P, Kanefsky, B., Taylor, W., Where the Really Hard Problems Are.
Proc.
of IJCAI-91, 163-169.
Dean, T.M., McDermott, D. V., 1987.
Temporal data base management, Artificial Intelligence 32 (1987) 1-55.
Dechter, R., Meiri, I., Pearl, J., 1991.
Temporal Constraint Satisfaction Problems, ArtiJiczal Intelligence 49(1991) 61-95.
We discuss processing combined qualitative and quantitative Temporal Constraint Satisfaction Problems (TCSP).
Using relatively hard problems which lie in the transition region we evaluate the effectiveness of algorithm LPC and its variants and show that they improve efficiency of backtrack search by orders of magnitude, even on small problems.
We identify a fragmentation problem which explains, in contrast to discrete Constraint Satisfaction Problems (CSP , why enforcing path-consistency on quantitative T SPs is exponential.
Identifying this problem allows us to design an efficient yet effective polynomial algorithm for processing TCSPs called Loose Path-Consistency (LPC), and its variants Directional LPC (DLPC) and Partial LPC (PLPC).
d  Freuder, E.C.
1985.
A sufficient condition of backtrack free search.
JACM 32(4):510-521.
Frost, D., Dechter, R., 1994.
In Search of the Best Search: An empirical Evaluation, In Proc.
of AAAI-94, pages 301-306.
Frost, D., Dechter, R., 1994.
Dead-End Driven Learning, In Proc.
of AAAI-94, pages 294-300.
Kautz, H., Ladkin, P., 1991.
Integrating Metric and Qualitative Temporal Reasoning, In Proc.
of AAAI-91, pages 241-246, 1991.
Ladkin, P.B., Reinefeld, A., 1992.
Effective solution of qualitative interval constraint problems, Artificial Intelligence 57 (1992) 105-124.
Meiri, I., 1991.
Combining Qualitative and Quantitative constraints in temporal reasoning In Proc.
AAAI-91, pp.
260-268.
Mitchell, D., Selman, B., Levesque, H., 1992.
Hard and Easy Distributions of SAT Problems, Proc.
of AAAI-92.
Sadeh, N., 1991.
Look-Ahead techniques for Microopportunistic Job Shop Scheduling, Ph.D. thessis, School of Computer Science, Carnegie Mellon University, March 1991.
Schwalb, E., Dechter, R., 1993.
Coping with Disjunctions in Temporal Constraint satisfaction Problems, In Proc.
AAAI-93, 127-132.
Schwalb, E., Dechter, R., 1994.
Temporal Reasoning with Constraints on Fluents and Events, In Proc.
AAAI-94.
Vilain, M., Kautz, H., Van Beek, P., 1989.
Constraint Propagation Algorithms for Temporal Reasoning: A revised Report.
In Readings in Qualitative Reasoning about Physical Systems, J. de Kleer and D. Weld (eds).
1989.
Williams, C.P., Hogg, T., 1993.
A typicality of phase transition search, Computatzonal Intelligence 9(3):211-238.
35