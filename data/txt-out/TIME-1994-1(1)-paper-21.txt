On The Representation of Temporal Object Roles in Object Oriented Databases Niki Pissinou  Kia Makki  The Center For Advanced Computer Studies Department of Computer Science The University of Southwestern Louisiana University of Nevada Lafayette, Louisiana 70504 Las Vegas, Nevada 89154  Abstract  This paper outlines a generic, core temporal object model that provides support for the modeling of temporal object roles.
This model draws from notions introduced in some of our previous works on temporal object modeling by providing a specic database model that provides a conceptual modeling context for temporal object roles 3, 4, 5, 6, 9, 7, 2, 8, 10, 11].
The model achieves an integration of the abstract concepts that characterize temporal objects.
The main purpose of the model is to provide a basic framework for temporal object information models and information systems.
The model is based on a small number of simple \temporal" constructs and primitive \temporal" operations.
The simple set of modeling constructs of this model are temporal objects and temporal mappings.
A set of primitive operations is dened on temporal objects that allows uniform viewing, denition, insertion and manipulation of objects in temporal object databases.
A simple set of temporal constraints is also provided.
1 Introduction  One of the problems faced by existing data models is their weak expressiveness of the representation of temporal information and in particular the representation of the temporal roles of objects.
In consequence, typical database systems that embody these models, support the storage and retrieval of \facts" about the world and certain aggregation and operations on them, but do not perform operations on either the perception to map situations in the world into the database contents, temporal object roles or temporal operations.
In view of this, a strong interest of ours is in developing a database model that represents \realistic worlds."
To achieve this, in our previous works we  have studied the semantics of time in the context of object database systems, identied changes to existing notions of temporal data that are necessary because of the transition from the relational to the object model and specied an approach to extending an archetyped, extensible object model, to incorporate a number of generic modeling concepts, with concrete denitions, underlying temporal objects 3, 4, 5, 6, 9, 7, 2, 8, 10, 11].
The work is in line with the infrastructure presented in 11].
A major aim of this research, is to achieve an integration of the abstract concepts that were assumed to characterize temporal data, presented in our earlier works.
In order to achieve this goal, in this paper we map these abstract concepts to a simple object data model, thus articulating them as concrete concepts 9, 10, 7].
This provides a specic context for our approach to temporal object database modeling, and allows us to dene a conceptual framework for a simple and generic object model.
The model addresses temporal issues at the nest level of data granularity, viz.
the object level.
Our work presents the foundations towards the synthesis of a powerful integrated object data model that supports the temporal/dynamic aspects of data modeling in addition to the structural and behavioral ones.
Our model is intended to be both a valuable temporal model in its own right, as well as a mechanism for describing and analyzing temporal extensions to other database models as illustrated in 3, 5, 4].
This can be mainly achieved by using our model's small number of simple constructs and primitive operations, that can be used as the basis for the specication and stepwise development of temporal information models and systems of increasing complexity and levels of abstraction.
The remainder of this paper is organized as follows: In the next section we outline some preliminary concepts and denitions.
In section 3, we describe the modeling elements that encompass our temporal object model.
Section 4 briey describes the temporal object denition and manipulation language while section 5 denes a simple set of temporal constraints.
In the nal section we provide some nal remarks.
2 Preliminary Definitions To describe the structure of an object as it evolves over time and across its multiple representations (i.e., versions and history) we introduce the notions of universal object identity and possible object world.
Together these two notions allow us to describe the meaning, characteristics, properties, behavior and role of each individual object at dierent times and at a particular point in time.
Denition.
The Universal Object Identity of an object, denoted as UOI, refers to an object's interpretation or sense and remains time invariant.
Denition.
The Possible Object World of an object, denoted as POW, refers to an object's denotation and is usually time variant.
An object cannot have a possible object world unless its universal object identity is dened.
An object can have dierent possible object worlds at dierent times, and also several possible object worlds at a particular time, but its universal object identity remains unique over a specied lifespan.
For example, the object \ght" could be a physical struggle in 1989 followed by an emotional struggle in 1990.
Also the object \ght" can concurrently be a physical and an emotional struggle.
In general, a universal object identity encapsulates the time invariant semantic meaning of an object, while a possible object world encapsulates the static and dynamic structure, behavior and role of each individual object at dierent temporal intervals.
Further, the UOI of an object can be derived from all its possible POWs at all different times with respect to our model and the world we are modeling by taking the union of possible POWs over time.
Thus, we can formally dene the UOI of an object from all its possible POWs at all different times with respect to POWs, our database model and the world we are mod-  eling, as follows: UOI (M)=def ft !
POW (M t)jt 2 T g where fi UOI is the universal object identity of an object  fi POW is the possible object world of an object  fi M is our database model fi t 2 T is the time a possible object world is active (current) The above denition assumes that users interact with only a single world during a time period.
When users interact with dierent worlds then the UOI of an object is dened as follows: UOI (M) =def f< w t >!
POW (M w t) j w 2 W and t 2 T g where fi UOI , POW and M are as dened previously fi w 2 W is the \mini-world" we are modeling (may be assumed to be a version) Given these two new notions of an object, we are now able to give the denitions of a universal object identity and possible object world class and time slice.
These are as follows: Denition.
A Universal Object Identity Class, related to a universal object identity UOI, is dened as all objects that can potentially, independent of time, have the same universal object identity.
Denition.
A Possible Object World Class, related to a possible object world POW, is dened as a collection of (POW,ti) s.t.
t = 1 2 ::::n tuples, of all objects that can potentially have the same possible object world.
Since an object can have several POWs at a given time, an object can belong to several possible object world classes.
From our formal denition of a UOI of an object we can conclude that an object can be a member of only a single Universal Object Identity Class but belong to several Possible Object World Classes during a particular lifespan.
Consequently, an object is not active if it does not belong to some particular Universal Object Identity Class at any given time t. If an object is not active it can not belong to any Possible Object World Classes.
In other words, an object can not be a member of a Possible  Object World Class if it were not a member of a Universal Object Identity Class.
Denition.
A Time Slice of a possible object world class is all objects with the same possible object world at time ti.
It can be viewed as a set of instances of a possible object world class at time ti .
Thus the union of all time slices of a possible object world class is the possible object world class.
Denition.
A Universal Object Existence is a function F : (UOI t) !
f0 1g.
A value of zero at time t implies that the universal object identity of an object does not exist at that time or is undened.
Denition.
A Possible Object World Existence is a function F : (POW,t) !
f0,1g.
A value of zero at time t implies that the POW of an object does not exist at that time or is undened.
One major requirement for the kind of temporal object model described here, is to have a general and convenient means for extracting the lifespan of an object and the history of that object.
For this reason, we introduce the notions of time-priority sequence and object history.
In the following denitions, we specically adopt modied notions of a time sequence introduced in 12].
In these denitions we also incorporate the notion of priorities for POWs of an object.
The idea of assigning priorities to possible object worlds is particularly useful in resolving possible conicts among co-existing possible object worlds for a particular object and in the metadata.
For example, given that an object has two possible object worlds teaching assistant and research assistant then by assigning priorities to these two POWs we can determine the object's primary role at any given time ti .
Denition.
The Time Sequence of a POW of an object, denoted as TSEQ(POW) is dened as (POWt1 , ..... , POWt ) = (POW, (t1  t2 :::::  tn )).
Thus the lifespan of a POW of an object can be easily determined since t1 denotes the valid from time and tn denotes the valid to time.
Denition.
The Time-Priority Sequence of a POW of an object, denoted as TPSEQ(POW) is dened as n  (POW(t1p ) , ..... , POW(t p ) ) = (POW, (t1 pi ), (t2  pj ), ..... , (tn  pk )).
Denition.
An Object History refers to the collection of time sequences TSEQ(POW) of all the POWs of an object.
Thus the lifespan of an object can be derived from the lifespans of all the POWs of that object.
There is a partial function Flpow that determines the lifespan of a POW of an object.
The domain of Flpow is POW = fPOW1 P OW2 :::: POWng, the set of all possible object worlds of an object, and its range consists of nite subsets of T = ft1 ::: tng.
i  n  k  3 Modeling Constructs  Given the temporal semantics introduced in our previous works on temporal object modeling, we can now illustrate our proposed approach to the modeling constructs appropriate for the design and implementation of a generic and core temporal object database model.
In this section we show how objects with several possible object worlds are dened, and develop the necessary mappings that allow a transition from one possible object world to another to occur over time.
Much in the spirit of several other data models, the temporal object model is based entirely on the notions of objects and inter-object relationships.
A temporal relationship among object cannot exist unless all the components are existing database objects, or relationship is proactive such as \James is going to be promoted to full professor as of next month" (given that in the second case proactive changes are not allowed.)
In addition since temporal databases need to retrieve and manipulate historical data, an object is not removed from a database unless there was an error.
Instead the object and all the relationships in the database in which it participates are \virtually deleted", which is a form of archiving the object.
Formally, a temporal object database system can be thought of as consisting of temporal objects and temporal relations.
Each temporal object in the database consists of a single universal object identity and a set of possible object worlds, as dened shortly, and corresponds to a temporal relation on the set of all database temporal objects.
Let (t  t  t ) be a relation.
For each temporal relationship, i  j  k  (t  t  t ), t is a temporal relation.
In particular, t = f ( t ,  t ) j the temporal relationship ( t  t   t )existsg.
If proactive relationships are disallowed then the constraint, ti < tj and tk < tj is explicitly imposed on the temporal relationship.
In the following section we introduce our denition of an object.
This denition draws heavily from the notions introduced in 3, 4, 5, 6, 9, 7, 2, 8, 10, 11].
i  j  k  j  j  0  0  i  0  i  j  k 0  k  3.1 Temporal Objects  The restrictions that some object models, impose on an object are too strong in the face of the desire to model the role of temporal objects.
For example, in may such models an object is restricted to having only a globally time invariant object definition generated by the system.
In an eort to model the \real-world" more realistically, we relax these restrictions by dening two new concepts: the universal object identity of an object that refers to an object's interpretation or sense and remains time invariant, and the possible object world of an object that refers to an object's denotation or reference.
An object only has a single universal object identity but can have several possible object worlds at a given time or at dierent times during its lifespan.
Each temporal object is a tuple consisting of a universal object identity and a sequence of possible POWs i.e.
object = (UOI, (POW ( 1 ) , ..... , POW!
( ) )) where UOI is the universal object identity of the object, which is time invariant and POW ( 1 ) , ..... , P OW!
( ) is a sequence consisting of the possible object worlds of the object and their corresponding priorities at some specic time.
In our model an object id (oid) has no intrinsic meaning.
Instead it is an entry point (reference or handle) for accessing information about a temporal object such as an object's UOI and POWs.
It \derives" its meaning from its associated universal object identity and from its possible POWs.
With each universal object identity we associate a universal object identity id, and with each possible object world POW , we associate a possible object world id, a time priority sequence TPSEQ, a set of temporal constraints, and a set of operations.
t pi  tn pk  t pi  tn pk  Our model also allows the creation and manipulation of Temporal Composite Objects (TCO.)
A temporal composite object consists of a group of temporal objects.
It exists at time T if each of its components exist at time ti i.e.
TCOT  (O1 1 + O2 2 + .
.
.
+ On ) where T > ti s.t i = 1 2 ::::,  denotes the temporal compose operator, O denotes the temporal object or an atomic temporal object, and + denotes the temporal aggregation operator.
A temporal composite object has a possible object world if the possible object world or reference of the whole object can be described as a function of the possible object worlds or the references of its parts.
Thus, for a composite object to exist at tj , the universal object identity and possible object world existence of each of its components should be 1 at ti such that tj > ti.
To more accurately represent temporal data and the evolution of temporal objects, it is desirable to model dierent time dimensions such as valid, transaction and user-dened times.
For simplicity in representing this information and in developing an initial experimental prototype we consider only valid time, but the other two kinds of time can easily be incorporated into the model.
In our model we treat time as dened in 11].
t  t  tn  4 Temporal Object Definition and Manipulation  The data denition and manipulation language is described as a set of primitive operations that are embedded within a host programminglanguage.
The host language supports the data types of temporal objects and set of objects, the usual set operations, a looping construct to iterate on elements of sets, a counter for elements of sets, and a data type for time.
Programs written in the host language can reference temporal objects.
The purpose here is not to propose a specic approach to host language embedding of data manipulation operations, but rather to dene a set of primitive building blocks for highlevel database systems.
In this section we briey present our temporal operations 1. and address some constraint issues.
1 The operations presented here are by no means exhaustive we are only presenting a fiavor of the temporal operations supported by our approach.
In our model all operations can be specied as either messages or processes.
A process provides inferencing capabilities such as creating messages from other given messages.
It consists of a set of preconditions and a set of actions.
In addition to these processes there are other implied ones that are initiated automatically as a result of some specied relationship.
We have used these concepts to develop a set of specialized temporal operations on objects and mappings.
In the following we describe a sample subset of such operations.
4.1 Create Operations  The set of Create Operations supports the creation, activation, deactivation, and context release of objects.
In particular, there are three primitive operations associated with the POW of an object.
These are create-pow, deactivate, and activate.
The possible object world of an object may be created, activated or deactivated using the following messages: 1. createpow(oid,(ti pk),powid).
This operation creates a new POW for an object.
ti is the object's time of creation and pk is the initial priority assigned to that object.
Here powid is a possible object world identier.
This new POW may not be created at tj unless its associated UOI exists at some time ti such that ti < tj .
(An UOI for an object may be created only once during its lifetime.)
Initially, no object is bound to a POW.
2. deactivate(oid,(ti pk ),tj ,powid).
The deactivate operation suspends the POW of an object at time ti until tj  If tj is set to 1 then the object is suspended indenitely.
In our temporal object model an object is never removed from the database.
It is either suspended indenitely or it is archived through the archive operation, which is similar to a \virtual" delete.
3. activate(oid,(ti pk ),powid).
The activate operation resumes the POW of an object at time ti where ti is greater than the time of its suspension.
Before we activate (and even create) a new POW for an object we need to verify that it is not currently active.
This is done through the exist-pow operation which is described later.
4. release(oid,(ti pk ),powid).
The release operation releases a specied POW for a specied time from being bound to a specied object.
If the POW is not bound to the object the operation has no eect.
5. error delete(oid,(ti pk ),powid).
operaThe error delete tion deletes the POW of an object.
Since in our model we only allow virtual deletes, this operation is meant to be used where there is a transaction error which is of no use and has no historical value e.g., a user inputs the wrong time.
Thus, the sole purpose of this function is to delete erroneous information.
6. create fun(oid,(ti pk ),powid,ag).
The create fun operation creates one of the four mapping functions discussed in 3].
These mapping functions are: POW-to-POW, POWto-UOI, UOI-to-POW and UOI-toUOI.
The type of transition is denoted through the ag.
Also, the function create map creates the actual relation.
4.2 Attach and Exist Operations  The set of Attach and Exist Operations is used for providing context to universal object identities of objects and temporal contexts to possible object worlds of objects.
Before we can create the POW of an object, we need to verify that it has an associated universal object identity.
If it does not have a UOI then the appropriate universal object identity is attached to it.
This sequence of events is captured through the following operations.
1. exist-uoi(oid,ti,uoid).
The existuoi operation veries that an object's universal object identity is active at ti .
If so, it returns true otherwise it returns false.
2. attach-uoi(oid,meaning).
If an object's universal object identity does not exist at ti i.e.
if the specied UOI is already bound to the specied object, it is created through the attach-uoi operation.
3. exist-pow(oid,ti,pow ).
The exist-pow operation veries that an object's POW is active at ti .
If so, it returns true otherwise it returns false.
4. attach-  pow(oid,(pow  ti),powmeaning).
The attach-pow operation attaches temporal context to a possible object world.
If the given POW of an object does not exist at ti , it is created through the create-pow operation and bound through the attach-pow operation.
If the specied pow is already bound to the specied object, the operation has no eect.
4.3 Temporal Migration Operations  To facilitate the temporal evolution of objects and to accommodate the four types of mappings described in section 3.1, we have designed the following set of corresponding operations.
These operations facilitate an object's migration from one UOI to a different UOI (or similarly from one possible object world (or a set of POWs) to another possible object world (or a set of POWSs)) at any given time.
1. transfer-pow(oid,uoid, POW( ti),POW( tj)).
The transfer-pow operation allows the migration of an object from one possible object world at time ti , to a dierent possible object world at a dierent time tj , where ti < tj .
If the object's possible object worlds at ti already exists then an appropriate warning is broadcasted.
2. multitransferpow(oid,uoid,POW( ti), f(POW( tj),...(POW(	 tj )))g).
The multitransfer-pow operation allows the migration of an object from one possible object world to a new set of possible object worlds.
The transitional path of this migration is also recorded.
As with the previous operation, if the new set of possible object worlds already exists then an appropriate warning is broadcasted.
3. evolve(oid,uoidi,uoidj ).
The evolve operation creates a new universal object identity for a given object.
As such, this operation facilitates the transformation of an object to an entirely new object over time.
4. grow(oid,uoidi,POW( tj )).
The grow operation allows an object that has only a universal object identity to obtain its rst temporal  context.
As such, this operation facilitates the rst temporal representation of objects.
4.4 Temporal Evolution Operations  In addition to the above operations we have developed a set of operations that allows us to manipulate the time priority sequences of an object.
1.
TPSEQevolve(oid,TPSEQ1,TPSEQ2 ), The TPSEQ-evolve operation creates a new time priority sequence for an object.
This operation allows us to extract the temporal behavior of objects over a period of time.
A dierent operation is used for changing the priorities of a given possible object world at any given time ti ,  4.5 Historical Operations  We have also developed a specialized set of operations which allows us to manipulate and extract the lifespan of an object and its history, compare inter-temporal relationships among objects, as well as to accommodate the relations introduced in 3].
In general, this set of operations supports the historical denition and manipulation of objects.
5 Temporal Object Constraints  The interaction of objects with other objects has to be subjected to some strict temporal constraints.
This tends to be a rather complicated task since there is a signicant dierence between conventional \non-temporal" data models and temporal object models.
While in the rst case only true messages are allowed, and any checks on such messages are made at the time the message is input, in temporal data models any message could potentially be true.
Therefore, our model's constraints should categorize information into true, false and meaningful the later making the specication of such constraints complicated.
In our previous works 3, 11] we have dened various temporal operators such as starts, meet, nish.
Based on these operators, we have developed a set of primitive explicit constraints which can be applied on the mappings or the objects themselves, based on 1], some of which are  stated below.
These constraints are enforced when we process such queries as \who were UK's prime ministers while Mr. Bush was in oce?".
In dening these constraints, and for simplicity we assume the existence of only two POWs and explicitly indicate the valid to and valid from times of a TSEQ(POW).
However, the generalization of these constraints is straightforward.
These constraints are dened as follows:  Constraints for Lifestarts:  The create time of POW equals the create time of POWfi  i.e., given (POW  (ti tj )) starts (POWfi  (tk  tl )) then ti equals tk .
Constraints for Lifenishes:  The virtual-delete time of POW equals the virtual-delete time of P OWfi  i.e., given (POW  (ti tj )) finishes (POWfi  (tk  tl )) then tj equals tl .
Constraints for Lifequals:  The create time of POW equals the create time of POWfi and The virtualdelete time of POW equals the virtuali.e, given delete time of P OWfi .
(POW  (ti  tj )) equals (POWfi  (tk  tl )) then ti equals tk and tj equals tl .
Constraints for lifeoverlaps  The create time of POW is less than the create time of P OWfi and the virtualdelete time of POW is less than the virtual-delete time of POWfi and the create time of POWfi is less than the virtual-delete time of P OW  i.e., given (POW  (ti  tj )) lifeoverlaps (POWfi  (tk  tl )) then ti < tk ^tj < tl ^tk < tj .
Constraints for lifeduring  The create time of POW is greater than the create time of P OWfi and the virtualdelete time of POW is less than the virtual-delete time of POWfi .
i.e., given, (POW  (ti  tj )) during (POWfi  (tk  tl )) then ti > tk ^ tj < tl  Constraints for lifecontains  Given, (POW  (ti tj )) contains (POWfi  (tk  tl )) then (POWfi  (tk  tl )) during (POW  (ti tj )).
Constraints for lifemeets  The create time of POW equals the create time of POWfi  i.e., given (POW  (ti  tj )) meets (POWfi  (tk  tl )) then tj equals tk .
Constraints for lifebefore  The virtual-delete time of POW is less than the create time of POWfi  i.e, given  (POW  (ti tj )) lifebefore (POWfi  (tk  tl )) then tj less than tk .
Constraints for lifeafter  (POW  (ti tj )) lifeafter (P OWfi  (tk  tl )) then (POWfi  (tk  tl )) lifebefore (POW  (ti  tj ))  Constraints for Temporal relationships For each relationship, (t  t  t ), and assuming no future relationships can be established ti before tj and tk before tj .
Finally, we can have a set of general state constraints viz., semantic constraints such as: fi an object cannot have a POW unless its UOI is dened.
fi a temporal composite object cannot exist at tj if the UOI and POW of each of its components is not 1 at ti such that ti < tj .
In addition to these constraints in our previous works 3, 11] we have suggested a set of temporal principles that our model should adhere to.
We call this set \metatemporal semantic constraints."
Although the constraints studied in this section are very restricted, it is believed that our temporal object database system provides a good basis for studying other, more general constraints.
i  j  6 Concluding Remarks  k  In this paper we have outlined an approach to the design and development of a model that integrates time with object databases.
Our work applies temporal notions to the problem of object and meta-data evolution.
It is a step towards the synthesis of a powerful integrated object data model that supports the temporal aspects of data modeling in addition to the structural and dynamic ones.
In our results we developed a set of temporal constructs, operations and constraints for supporting and manipulating temporal objects and their roles.
Our framework is a very simple temporal object database model for modeling temporal objects and temporal relationships.
All data in the database are treated uniformly as temporal objects relationships among these objects allow the temporal evolution of objects to be modeled.
Operations on the data allow temporal behavioral properties to be modeled.
Mechanisms are provided to allow the modeling of temporal relationships of objects, the temporal evolution of objects and object  migration.
In addition, the model provides a high degree of temporal and semantic expressiveness.
Our temporal object database system is not a high-level model appropriate for unsophisticated database users for example, it is easy to create meaningless relationships and operations.
The model lacks mechanisms for data protection and integrity control, and high-level constraints.
However, the main purpose of our system is not to dene a high-level temporal object database model, but on the contrary, to dene a small set of fundamental concepts to be used as a vehicle in the design and implementation of temporal object models and for providing more expressive models.
References 1] J. F. Allen.
An interval-based representation of temporal knowledge.
In  Proceedings of the International Joint Conference on Articial Intelligence,  pages 191{204, Vacouver, B.C., 1981.
2] K. Makki and N. Pissinou.
A new storage organization for temporal databases.
International Journal of Systems and Sciences (to appear), 1994.
3] N. Pissinou.
Time in Object Databases.
PhD thesis, Department of Computer Science, University of Southern California, Los Angeles, California, December 1991.
4] N. Pissinou and K. Makki.
T3dis: An approach to temporal object databases.
In Proceedings of the International Conference on Information and Knowledge Management, pages 185{192, 1992.
5] N. Pissinou and K. Makki.
A Framework for Temporal Object Database Models.
In T.W.
et.
al.
Finin, editor, Information and Knowledge Management:Expanding the Denition of Database, volume 752.
Springer-  Verlag, 1993.
6] N. Pissinou and K. Makki.
Separating semantics from representation in a temporal object databases.
In ACM Proceedings of the International Conference on Information and Knowledge Management, pages  295{304, Washington, DC, November 1993.
7] N. Pissinou and K. Makki.
A unied model and methodoly for temporal object databases.
International  Journal on Intelligent and Cooperative Information Systems, 2(2):201{  223, 1993.
8] N. Pissinou and K. Makki.
Separating semantics from representation in a temporal object databases.
Inter-  national Journal of Computer Information Systems, Spring, 1994.
9] N. Pissinou, K. Makki, and Y. Yesha.
On temporal modeling in the context of object databases.
ACM SIGMOD RECORD, 22(3), September 1993.
10] N. Pissinou, K. Makki, and Y. Yesha.
Research perspective on time in object databases.
In R. Snodgrass, editor, Proceedings of the Interna-  tional Workshop on Infrastructure for Temporal Databases Databases,  pages 295{304, Arlington, Texas, June 1993.
11] N. Pissinou, R. Snodgrass, R. Elmasri, I. Mumick, M.T.
Ozsu, B. Pernici, A. Segev, and B. Theodoulidis.
Towards an infrastructure for temporal databases.
Technical Report TR93, Departmet of Computer Science, University of Arizona, 1993.
12] A. Segev and A. Shoshani.
Logical modeling of temporal data.
In Proceedings of the ACM SIGMOD International Conference on Management of Data, pages 454{466, 1987.