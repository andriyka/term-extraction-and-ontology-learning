Approximate Query Evaluation Using Linear Constraint Databases* Peter Revesz Rui Chen Min Ouyang Computer Science and Engineering Department University of Nebraska-Lincoln Lincoln, NE68588,USA  Abstract  The geographic time series data is not convenient for querying for several reasons.
Suppose we would like to get the daily high temperature for each station on day 10 using the following straightforwardSQL query:  This paper shows that constraint databases can be used for the approximation of several types of discretely recorded continuous data, for example time series data and some spatio-temporal geographic data.
We show that time series data can be approximated by a piecewise linear approximation that runs in linear time in the number of data points, and the piecewise linear approximation can be represented in a linear constraint database.
Similarly, the spatio-temporal geographic data that is composed of a set of spatial locations, where each location is associated with a time series, can be also approximated and represented in a linear constraint database.
The approximations provide data compression, faster query evaluation - that preserve high precision and recall - and interpolation enabling the evaluation of queries that could not be evaluated before.
select T e m p from Temperature where t = 10  This query would retum an empty set because at none of the four weather stations was the daily high temperature recorded on day 10.
Recognizing such problems, we suggested in [3] to represent time series data by a piecewise linear approximation which in tum can be easily stored in a linear constraint database [SI.
For example, the above geographic time series can be represented by the linear constraint database in Table 2.
The approximation has the following advantages: Interpolation: Queries such as (1) can be evaluated using the linear constraint representation, which provides an interpolation for the time series data for each day of the month.
1.Introduction Databases often record continuous data at discrete time instances, for example, time series and geographic time series data.
A time series is a sequence of data points ( t l , y l ) , .
.
.
, ( t n , y n ) where each t , is a time instance and y, is the value of a measured attribute at time t,, and the t s are monotone increasing.
A geographic time series is a set of location and time series pairs.
It can be represented as a set of ordered triples (I,, t,, 9,) where 1, is a location and (t,,y,) is a time series data point associated with location I,.
Suppose that we record the daily high temperature at location 1 on Mondays and Fridays, at location 2 on Tuesdays and Thursdays, at location 3 on Saturdays, and at location 4 on Sundays.
This may yield a geographic time series data that can be represented for a month, that starts on a Monday, as shown in Table 1.
Data Compression: The number of pieces in an approximation is usually much fewer than the number of points in the time series.
For example, Table 1 has 26 tuples, while Table 2 has only 8 tuples.
Query Evaluation Efficiency: With fewer number of tu-  ples, some queries can be evaluated faster.
Piecewise linear approximation is studied in computational geometry and image processing.
Some "optimal" algorithms have been proposed that retum a solution with the minimum number of possible pieces.
In 1991, Hakimi and Schmeichel[7] gave an O ( n 2 )optimal piecewise linear approximation algorithm,where n is the number of time series data points.
Recently, Agarwal and Va$darajan [2] gave an improved algorithm that requires O ( n time, where 6 is any abitrarily small positive constant.
Both of these algorithms run slowly for large data sets.
In addition, they  "Tlus research was supported in part by NSF grants IRI-9625055and IRI-9632871and by a Gallup Research Professorshp.
0-7695-11074101 S10.00 0 2001 IEEE  (1)  170  c  'T  2 2  2  2  2  2 2 2 2 3 3 3 3  4 4 4 4  ~  1 I 5 8 12 15 19 22 26 29 2 4 9 11 16 18 23 25 30 6 13 20 27 7 14 21 28  68 71 76 73 71 68 70 74 80 71 69 68 66 70 68 71 75 77 75 78 72 68 72 75 72 74  SN  t  Temp  1  t t  f f  1 1 2 2 3 .
3 4  t  f  t t t  f  t  f f  t  f f  1  f=68+&(t-l),  lSt512.
f = 73 - &(t- 12), 12 5 t 5 22. f = 70+ $(t - 22), 22 5 t _< 30. f=71-&(t-2), f = 68 ;(t - IS), f = 7 5 - &(t-6), f=72-$(t-20), f=72tA(t-7).
+  15t518.
18 5 t 5 30.
1S t 520.
20itI30.
1<t<30.  '
Table 2.
The Constraint Representation of the Temperature Relation  algorithm that efficiently updates the piecewise linear approximation in the case of inserting new time series data points.
We also analyse, in terms of the error tolerance value, the data compression that can be achieved using our piecewise linear approximation.
Section 3 describes our approximation algorithm for geographic time series data.
Section 4 discusses the approximate query evaluation based on the piecewise linear approximation and gives some experimental results on precision and recall.
Finally, Section 5 discusses future work.
2.
Approximation of Time Series Data  Table 1.
The Temperature Relation  2.1.
A Piecewise Linear Approximation Algorithm generate solutions that are not easy to update.
These disadvantages make the algorithms very inefficient for large databases when the data changes frequently.
We develop a new piecewise linear approximation algorithm that is not optimal in the number of pieces (usually returns about 10-20 percent more pieces) but runs in O ( n ) time.
This improves our earlier algorithm in [3] that required O(n2)time in the worst case.
We also show that under some reasonable assumptions, the data compression of the new algorithm is proportional to @ where @ is the error tolerance value.
We also extend the piecewise linear approximation to geographic time series data, that is, we use spatio-temporal approximation.
Geographic and spatio-temporal objects are considered within the European Chorochronos project [5], the Moving Objects Spatio-Temporal model (MOST) [l 1, 131, and object-relationaldatabases such as Oracle% [lo] and PostgreSQL [9].
Grumbach et.
al.
[6] also propose an altemative data model to interpolate spatio-temporal data.
The rest of the paper is structured as follows.
Section 2 describes our linear time piecewise linear approximation algorithm for time series data.
We also give in this section an  The piecewise linear approximation problem of a time series S given some error tolerance value \Ir is the problem of finding a piecewise linear function f such that the endpoints of each piece o f f occur in S and the following holds:  For example, Table 2 is a piecewise linear approximation of Table 1 with \k = 5.
',  Definition2.1 For any two pairs of points ( t b , Y b ) and (te,y e ) where (b < e), we denote by Y b , e the line segment connecting them.
For any given error tolerance value Ik we also define a lower line &,e and an upper line U b , e between the two data points as shown in Figure 1.
Note that &,e could be used as a linear approximation for the sequence of data points between ( t b , y b ) and ( t e , y e ) .
That would introduce at each time instance ti for b < i < e some interpolation error G b , e (ti), where " b , e ( t i ) = I Y b , e ( t i ) - YiI  171  .
(3)  Next, we analyze the computational complexity.
Theorem 2.2 The computational complexity of the piecewise lineu approximation algorithm is O(n)time, where n is the number of points in the time series.
Now we analyze the expected number of points in a piece, assuming that the time series (t 1, y l ) , .
.
, (tn,yn) satisfies the following property, for some constant M and foreachl < i 5 n  I  0  X  Figure 1.
Lines &,e,  Lb,e  =0 Prob(9, - ~ ~ = - M 1 ) = 0.5 P r ~ b ( y-, y Z - 1 = - M ) = 0.5  Y1  (4)  For example, consider the time series which starts with (0,O)and records, at each later time when a coin is flipped, the number of heads minus the number of tails seen since the beginning.
This time series satisfies Property (4) with M = 1if heads and tails have the same probability.
As another example, the daily temperature could be described by a time series that satisfies Property (4), if we use a thermometer in which the adjacent scales are M Fahrenheit degrees apart instead of the usual single Fahrenheit degrees, where M is the largest daily change, and if we record only on those days when there is a change in temperature according to the rougher thermometer.
Let E ( 9 ,M) be the expected number of original points spanned by a single piece of the piecewise linear approximation, including the two endpoints, when the approximation uses the tolerance 9 and the time series satisfies Property (4).
We can prove the following.
and Ub,e-  We propose below an O ( n )time algorithm that finds a piecewise linear function that approximates any time series data s.  PIECEWISE LINEAR APPROXIMATION ALGORITHM: A time series (tl,y l ) , .
.
.
, (tn,yn).
@ the error tolerance value.
Output: A piecewise linear function.
Local Vurs:The b and e are integer variables such that Yb,e-l satisfies Condition (2).
L and U stand for two lines.
Input:  Let L := L 1 , z and U := U1,2.
Letb:=l, e : = 3  Theorem 2.3 If a time series satisfies Property (4), then  while e 5 n do Construct the lines Lb,e and u b , e i f L ( t e )< L b , e ( t e ) then L := Lb,e end-if .
if U ( t e )> U b , e ( t e ) then U := Ub,e end-if if L(te)> U ( t e )then Create a piece Yb,e-l Let b := e - 1 Let L := L b , e and U := Ub,e end-if e :=e+ 1 end-while Create a piece Yb,e- 1.
For example, for the coin flipping time series when = 6 each piece of the piecewise linear approximationfunction is expected to span at least 16 original time series points.
2.2.
Updating Piecewise Linear Functions In this section we consider what happens if we approximated b,y a constraint relation some time series and the user requests an insertion or deletion of a point in the time series.
Note thi3t the user can request insertions and deletions of time series points (i.e., tuples of the relational database) and not the constraint database, because the constraint database representation is hidden from the user.
If the user requests a deletion of a time series data point, then the request can be ignored because the approximation  First, we prove the correctness of our approximation algorithm.
Theorem 2.1 The piecewise linear approximation algorithm is correct for any error tolerance value \k and time series S.  172  INSERTION ALGORITHM:  function still satisfies the error tolerance for the remaining points.
The insertion of points is much more complex.
In this case, we have to update the piecewise linear function.
Consider Figure 2.
In (1) the original piecewise linear function is shown by a solid line and the edges of the error tolerance range are shown by dashed lines.
In (2) the point P I is to be inserted, but the piecewise linear function is not changed since PI is within the error tolerance range.
In (3) the point P2 is to be inserted, and the piecewise linear function is updated by splitting the middle piece into two pieces.
In (4) the point P3 is to be inserted, and the piecewise linear function is updated by splitting the third piece into two pieces.
A piecewise linear function f represented as a sequence of points ( t l ,y1, o ~ ).., .
,(tn,yn, on).
P the error tolerance value.
(t,, v,) the point to be inserted.
Output: An updated piecewise linear function.
Input:  '\  if t, < tl then Add (t,, ,y, false) as the first point in f. else i f t , > tn then Add (t,, ,y, false) as the last point in f. else if f o ( t a )- > y, then ~ d (t,, d $ ( ( f o ( t a ) Q) y,), false) between points with times ti < t , and ti+l > t,.
< y, then else if fo(t,) ~ d ( dt a ,$ ( ( f o ( t a -)Q) y,), f a l s e ) between points with times ti < t , and ti+l > t,.
end-if  + +  +  +  holds.
If(&)  (3)  (4)  .  ''
- Yil I 2for each (ti,yi) +  E S UI  For example, if b = 3*, then the error tolerance for the updated piecewise linear approximation will be 2P for all original and newly inserted data points.
p3  Figure 2.
Inserting Points into a Piecewise Linear Function  3.
Approximation of Geographic Time Series Data Note that a piecewise linear approximation can be represented as a set of endpoints of the pieces.
We also add a Boolean tag o to each point.
The tag will be true if it is a point that is an original point, otherwise it is a point which was inserted and the tag will be false.
This allows us to reconstruct from any updated piecewise linear function f, the original piecewise linear function, denoted f , as the sequence of points with the true tags.
Finally, we assume that for no point (t, y), to be inserted is there already a point with time t,.
Geographic data is usually represented using either the raster or the vector data models.
Triangulated Irregular Networks or (TINs) and Voronoi diagrams are example data structures that are used in the vector data model [ l , 4, 121.
A TIN can be created for any given set of locations in the plane, and ARC/INFO, the most popular GIs software, supplies several functions to generate TINs.
Given a geographic time series data set S = {(h SI),(P2,Sd7 , ( K ,Sn)),where the Pis are the 2D locations of the form ( q , y i ) and each Si is a time series corresponding to Pi, we can use the TIN generation algorithm to transform the set of spatial points { ( ~ 1 , ~ 1 , 0 ) , ( ~ 2 , ~ 2 , O ) , .
.
.
, ( ~ , into ,y~a , oTIN ) } struthue.
Then we convert each TIN triangle to a linear constraint tuple.
For each triangle with vertices Pi, Pi and Pk, we approximate the temporal value of this triangle for each time instance by Equation (5) below.
Theorem 2.4 Suppose that a time series S is approximated by a piecewise linear function f with n "pieces" and error tolerance.
Then any set I of m insertions such that each insertion point is at most some constant S 2 @ distance from f o can be done by the insertion algorithm in O(m1ogn) time such that the updated piecewise linear function f has at most n + m "pieces" and the following  +  173  )9)  Definition 3.1 Given a triangle with points Pi, Pj and Pk, and their corresponding series of temporal data Si, Sj and s k .
The series of the temporal data of the triangle Sijk is defined as follows:  I  #PiecesinHigh  I TemperatureDataset 3,653  # Pieces in LOW Temperature Dataset 3,653  428 197  I 8.0 1 This definition is motivated by the following.
In each TIN triangle, we have a plane within 3D that passes through the vertices P,, PJ and Pk, that are associated with the time series s,,s, and sk.
The time series give the z coordinates of the three comer vertices.
Hence the centroid of the triangle is a time series as defined in Equation (5).
Further, the time series of the centroid of each triangle can be transformed into a piecewise linear function and a linear constraint tuple.
Alternatively, instead of a TIN, we can construct a Voronoi diagram for the P, locations.
For each cell of the Voronoi diagram containing point P, we use S, to approximate the attributeof interest for each point within the whole cell.
This can be also represented in a linear constraint database.
I  335 140  1  I  Let R [ ( d a y , high-temp) be the daily high temperature relation, and R a ( d u y , low-temp) be the daily low temperature relation, and let R ( d u y , h i g h d e m p , low-temp) be the join of RI and Rz.
The following are some query evaluation tests for SQL queries using relation R. In these tests, we evaluated the relational queries in ORACLE and the approximate queries (first translated to a Datalog) in the MLPQ constraint database system.
After the MLPQ evaluation, we converted the output constraint relation to pairs of days, where the values of the days were restricted to be integers.
Example 4.1 Find all pairs of days such that for each the high temperature in one day is greater than or equal to that in the other.
The SQL query is as follows and the test results are shown in Table 4.
4.
Approximate Query Evaluation Methods Instead of querying the original (geographic) time series data, we can query their approximations.
Since the approximations are linear constraint relations, we can use several recent linear constraint database systems.
In this section, we give some sample SQL queries and compare their regular and approximate query evaluations.
We compare the number of tuples, the precision, and the recall of &e output relations.
Precision is the percent of the tuples that are relevant out of those retrieved, and recall - is the percent of the relevant tuples retrieved.
Because the approximation is equivalent to an infinite number of regular tuples, in the calculation of precision and recall, we only counted tuples with integer time values.
select R l .
d a y , R2.day from R as R 1 , R ii.s R 2 where R l .
h i g h - t e m p > R2.high-temp  9  MLPQ Constraints Precision  (6)  Recall  4.1.
Approxirpate Evaluation for Time Series Data We did some experiments using a temporal dataset that contained the daily high temperature and the daily low temperature between January 1, 1987 and December 31, 1996 for weather station number 252820 in Nebraska.
We used different 9 values to restrict the piecewise linear transformation.
We obtained the weather data from the website of the National Climatic Data Center at h t t p :/ /www.
ncdc .noaa .gov and smoothened the data using the running window method with window size 7.
Table 4.1 gives some data compression characteristics of the modified data set using different values of 9.
Example 4.2 Find all pairs of days such that for each the high temperature in one day is greater than or equal to that in the other and the low temperature in one day is also greater than or equal to that in the other.
The SQL query is as follows and the test results are shown in Table 5. select from where and  174  R l .
d a y , R2.day  R as R1, R as R2 R l .
h i g h - t e m p > R2.high-temp R l .
l o w - t e m p > R2.low-temp  (7)  'Ik  1.0 2.0 4.0 8.0  MLPQ  P. K. Agarwal and K. R. Varadarajan.
Efficient Algorithms for ApproximatingPolygonal Chains.
Journul of Discrete & Computational Geometry, 23:273-291,2OOO.
R. Chen, M. Ouyang, and P. Revesz.
Approximating Data in Constraint Databases.
In Proc.
the 4th InternationalSym-  Constraints Precision Recall 6.091.441 100.00% I 100.00% 1,836,631 99.30% I 99.44% 639,797 98.40% 1 98.66% 215,649 96.45% 96.67% 46,449 92.72% 92.68% ,  ,  posium on Abstraction, Reformulation and Approximation, HorseshoeBay, Texas, volume 1864 of Lecture Notes in Artijcial Intelligence, pages 124-143.
Springer-Verlag, July 2000.
B.Dent.
Cartography ThematicMap Design.
McGraw-Hill, 1999.
A. Frank, S .
Grumbach, R. Guting, and et.al.
Chorochronos: A Research Network for Spatiotemporal Database Systems.
SIGMOD Record, 28(3):12-21, 1999.
S .
Grumbach, P. Rigaux, and L. Segoufin.
Manipulating Interpolated Data is Easier than You Thought.
In Proc.
International Conference on VeryLarge Databases, 2000.
S .
L. Hakimi and E. F. Schmeichel.
Fitting Polygonal Functions to A Set of Points in the Plane.
In CVGIP: Graph.
Mod.
Image Proc., pages 132-136, 1991.
P. Kanellakis, G. Kuper, and P. Revesz.
Constraint Query Languages.
Journal of Computer and System Sciences, 51:26-52, 1995.
B. Momjian.
PostgreSQL, Introduction and Concepts.
Addison Wesley, 2000.
J. Sharma.
Oracle% Spatial: Experiences with Extensible Databases.
In An Oracle Technical White Paper, May 1999.
A. Sistla, 0.
Wolfson, S .
Chamberlain, and S .
Dao.
Modeling and Querying Moving Objects.
In Proc.
International Conference on Data Engineering,pages 422433, 1997.
J.
Star and J. Estes.
Geographic Information Systems: An Introduction.
Prentice-Hall,Inc., 1989.
0.
Wolfson, A. Sistla, B. Xu, J. Zhou, and S .
Chamberlain.
DOMINO: Databases fOr MovINg Objects tracking.
In Proc.
ACM SIGMOD Symp.
on the Management of Data, pages 547-549, 1999.
4.2.
Approximate Evaluation of Geographic Time Series Data Approximation can be used in many spatio-temporal applications.
Suppose there are several weather stations in some region, and each weather station records a series of precipitation values for each month.
For each station, we can approximate its precipitationby a piecewise linear function.
We construct the Voronoi diagram for these stations, and for each cell of the diagram we use the precipitation for the station within the cell to approximate the precipitation value of the whole cell.
Example 4.3 We define the relations Precipitation(id,prec, month) and Voronoi(id,cell), where id is the station number, prec is the precipitation at the month month, and cell is the Voronoi cell for station id.
Suppose that we would like to find for month 47 the drought areas, i.e., the areas where the precipitation is lower than 0.5 inches.
This can be expressed by the following SQL query: select cell from Precipitation, Voronoi where Precipitation.id = Voronoi.id and month = 47 and prec < 0.5  (8)  5.
Conclusion and Future Works This work raises the possibility of using approximate query evaluation for large (geographic) time series data.
Remaining open problems include finding an optimal O ( n ) time approximation algorithm, and generalizing the query evaluation method to queries with negation.
References [ l ] N. Adam and A. Gangopadhyay.
Database Issues in Geographic Information Systems.
Kluwer Academic Publishers, 1997.
175