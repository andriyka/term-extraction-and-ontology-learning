Modelling, Specifying, and Verifying Message Passing Systems Benedikt Bollig and Martin Leucker Lehrstuhl fur Informatik: 11.
RWTH Aachen, Germany { bollig, leucker}@ informatik.rwth-aachen.de  Abstract /  We present a modelfor Message Passing Systems unifying concepts of message sequence charts (MSCs)and Lamport diagrams.
Message passing systems may be define& similarly to MSC+without having a concrete communication medium in mind.
Our main contribution is that we equip such systems with a tool set of specification and verification procedures.
We provide a global linear time temporal logic which may be employedfor specifying message passing systems.
In an'independent step, a communication channel may be specified.
Given both specifications, we construct a Biichi automaton accepting those linearisations of MSCs which satisfy the given formula and correspond to a fuced but arbitrary channel.
1.
Introduction Components of distributed systems usually communicate with each other via message passing.
A sender process sends a message over a channel of which the receiver process takes it out.
A prominent formalism to model this kind of systems are message sequence charts (MSCs) [ 71.
They are standardised, can be denoted textually as well as graphically, and are often employed in industry.
Furthermore, they are quite similar-to UML's sequence charts [3].
An MSC defines a set of processes and a set of communication actions between these processes.
In a visual presentation of an MSC, processes are drawn as vertical lines.
A labelled arrow from one line to a second line corresponds to the communication event of sending the label value from the first process to the second.
Since the vertical lines are interpreted as time lines, there is the general rule that arrows must not go "upwards" since this would describe a situation that a message is received before it was sent.
Figure 1 (a) gives an example of an MSC.
When one considers the exact behaviour of an MSC, i.e.
the sequences of actions which may be observed when the system is executed, one distinguishes between the so-called  0-7695-1107-4/01$10.00 0 2001 IEEE  240  visual order semantics and the causal order semantics.
The visual order assumes that the events are ordered as shown in the MSC.
For example, process Q in Figure 1 (a) reads an a before it can read a b.
Within causal order based semantics, read events on the same process line are not ordered unless they are "causality dependent".
For example, read event b may occur before reading a.
Anyway, our approach is based on the visual order semantics, but (with some modifications) it also works wrt.
the causal order semantics.
There has been a lot of effort for analysing, specifying, verifying, and synthesising message passing systems [14, 15, 1, 12,2, 11,6].
However, most of the work was carried out for a fixed communication medium.
But channels can be designed in a FIFO manner, they can behave as a stack or as a multiset, and may have a fixed capacity or not.
They can be reliable or lossy.
From the practical point of view, all types of channels are useful.
Thus, it does not seem to be appropriate to provide dedicated analysation methods for every type of channel but rather to provide procedures where the channel is just a parameter.
Meenzkshi and Ramanujam [ 111 provide specification and verification methods for a variant of MSCs and a whole class of channels.
They consider channels which are either bounded or implicit.
Our work can be understood as a generalisation of their approach by allowing arbitrary finite deterministic channels.
A minor difference is that we provide a global logic while they employ a local one.
In this paper, we first give a definition of MSCs which is a slightly modified version of the standard definition.
It captures some ideas of Lamport diagrams [8,9] viz, for example, send events may lack a corresponding receive event (natural EURor lossy channels).
We introduce a (global) linear time temporal logic LTML which is interpreted over MSCs and may be employed for specifying sets of MSCs.
Lineartirne Temporal Logic over sequences has gained a lot of attraction for the specification of concurrent systems [lo], and we believe that LTML provides a similar simple method for specifying MSCs.
A channel may be understood as a process that determines which send events and receive events are associated.
I  R m  (4  -  S m  (b)  Figure 1.
An MSC and its formalisation  executions of the system can finally be considered as MSCs.
We show that a channel may be described as a Mealy automaton, a finite automaton with input and output.
We give characterising examples that this is an adequate approach for specifying channels.
Now, given a specificationof an MSC and a channel, we provide a procedure for constructing an automaton which accepts all linearisations of MSCs that meet the specification and correspond to the channel.
This automaton may be checked by standard techniques for emptiness to decide whether the given specificationis satisfiable under the specified type of channel.
Now, one may change the specification of the channel, take, for example, one with a smaller capacity, and redo the satisfiability test.
Another application would be model checking specifications.
Given a set of MSCs, the question is whether these MSCs meet their specification (under the given specificationof the channel).
This can easily be done by checking emptiness of the intersection of two languages (cf.
Section 5).
The logic we present for aforesaid purposes has the property not to distinguish models from one and the same equivalence class (i.e.
which are linearisations of one and the same partial order) such that one has to check a specified property for just one member of each equivalence class.
Thus, it is possible to employ so-called partial order reduction methods [13, 181.
Acknowledgement: We would llke to thank the reviewers for helpful comments.
2.1.
Message Sequence Charts Let PN := { 1,. .
.
,N } be a non-empty set of processes and A a message alphabet.
Let further Cs := { S:(X) Jp,q E PN, P # Q , E A} and ER := '&(A) I p , q E PN, P # q, X E A} denote the sets of send and receive actions, respectively, and C := CS U &, the set of actions.
An action SE(X) stands for sending a message X from process p to process q, an action R;(X) for the corresponding receive action, which is executed by process q.
Definition 1 A message sequence chart (MSC) wrt.
PN and A is a tuple M = ( { E p } p ~{ ~d p N} p m ,f , L ) such that e  { E p } p E p Nis a family of painvise disjoint countable nonempty sets of so-called events (let E := UPEPN  e  0  EP}?
for each p E PN,llPC Ep x Ep is a well-founded total order (sometimes considered as a relation on E x E ) , there is a partition of E into send events ( S ) ,receive events ( R ) ,and events without communication partner (G} such that f is a bijective mapping S -+ R satisfying the following (where we let P : E U C + PN yield the process an event or an action belongs to, i.e., P ( e ) = p iff e E E p ,P(S:(X))= p , and P(R:(X))= 4):  2.
Message Passing Systems  - There is no sequence e l , .
.
.
, e,  This section deals with general properties of what we understand by a message passing system.
Such a system can be represented by several local components modelled as a family of automata and synchronising their actions by means of a channel.
A channel is likewise an automaton but enriched by an output function.
This output function unambiguously relates send to receive events and makes sure that  of events such thatf(e,) = e l a n d f o r a l l i E (1, ..., 12-11), either f (ei) = ei+l or ei 5 ~ ei+l.
( ~ ~ )  - L : E -+ C such that e E S implies both L ( e ) = s P~( e()~ ( ~ ) and ) ( xL) ( f ( e ) ) = R:;:;~))(X) for any X E A, and e E G implies P ( L ( e ) )= P ( e ) .
241  01;  The mapping f associates each send event with a receive event, whereas L provides information about the messages being interchanged by such communicating events.
For example, Figure 1 (b) presents a formal definition of the MSC depicted in Figure 1 (a).
From now on, all premises and definitions are made wrt.
a fixed set Phi of processes and a fixed message alphabet A.
C will denote the corresponding set of actions.
The visual order of an MSC M is denoted by Ij E x E and is defined to be the reflexive and transitive closure of UpEpNPNp U { ( e ,f(e)) I e E S}.
Obviously, 5 is a partial order.
- A partial execution (configuration) of an MSC can be described by a downwards closed subset of events, the events occurred so far.
So let M be an MSC as above.
A configuration of M is a finite subset E' of E satisfying E' = { e I 3e' E E' : e 5 e'}.
Let C o n f ( M ) denote the set of configurations of M .
The execution of an MSC may be described by a transition relation over its configurations.
-+M C Conf ( M ) x C x C o n f ( M ) is defined according to C--%MC' iff 3e E c' - c : L ( e ) = o and c' = c U {e}.
In order to relate MSCs to the rich theory of automata over words, the concept of linearisations of an MSC is essential.
As usual, for an MSC M with labelling function L , set of events E , and corresponding partial order 5 , let Lzn(M) := { L ( u )I U is a linearisation of ( E ,5 ) }denote the set of linearisations of M where L is used as expected.
Furthermore, for a set M of MSCs, we canonically define L i n ( M ) := U { L i n ( M ) I M E M } .
S', 1  s1 s,2R,2R, 1 s12 S2l  @  S,1R, 1 s2  s2  runpN(w) isthesequence51N(s,,,61)51N(stn,~102).. .
E IN".
We say p(w) is accepting iff both in p(w) fail does not occur and p(w) E AC,,.
p ~ ( wis) accepting as soon as it is contained in AC,,.
L ( G ) := {w E C" I p(w) and p ~ ( waxe ) accepting} associates with C a word language.
Finally, we may call C finite iff S is finite.
Example 1 Have a look at the finite flFO channel C1 given by the left transition graph in Figure 2 and the acceptance condition AC = (S", {z E IN" I each number occurs either even or infinitely often}).
For the sake of clarity, we omit exactly those transitions leading to fail.
Furthermore, let S startd for S:(a) and R for R:(a).
Hence, our channel only permits process 1 to send and process 2 to receive a message.
In order to depict the acceptance condition, we suggest lhat every message deposited with the channel is taken out sometime.
The channel on the right hand side of Figure 2 works in a stack-based manner for the same setup.
A natural approach is to model channels as state machines in which every state represents (an equivalence class of) the channel's configuration.
The key idea for signalising matching send and receive events is to employ, besides the transition function, a further output function.
To be able to handle channels algorithmically, it is useful to restrict our considerations to channels with finitely many states and a decidable acceptance condition AC.
Only to simplify our presentation, in the following, we consider the acceptance condition (S", IN") and say it is satisfied.
Let in the following U and w rakge over E", o and o, over E. Furthermore, we shall let z, y range over IN" and 7r, rzrange over IN.
We bring out the relation between channels and MSCs.
For words w = 0 ~ ~ 7 2 .
..E Cm and 2 = rlr2.
.
.
E IN" of equal length, we call !
'$ E (E x IN).
well-formed iff 7rt = 7r3 implies 0,= r i ( X ) and oj = R;(X) for any p , q E P', X E A.
The set of well-formed words is denoted by WF, the set of finite well-formed words by f WF.
A word $ E WF determines an MSC M Z := ({E p } p E p N{ ,5 p } p G p Nf,, L ) where  Definition 2 A channel C (wrt.
the set of processes and the message alphabet), is a (kind of) Mealy automaton ( S ,S,SIN,s,, ,AC) where S is its set of states containing a state fail, S : S x C -+ S its transition function with S(fai1,o) = fail for all o E C, 6~ : S x C + IN its output function, szn E S the initial state, and f i nally AC = (AC,,AC,,,), AC, C S" and AC,,, C IN", an acceptance condition.
Furthermore, whenever ~ I N ( s I , ~ ; ; = ( ~ S) I) N ( S ~ , R ~ (thenpl X ~ ) ) = ~ 2q1, = 4 2 , and XI = X2.
-  c2:  R,2  Figure 2.
A FIFO channel and a stack  2.2.
Channels  .
@  Cl :  Let 5 : S x C* + S and 5~ : S x C* + IN extend the above functions in the canonical way, respectively.
In particular, & ( s , vo) = bw(5(s,w),o).
The - state run p(w) of C on w = o 1 ~ 2 ... E C" is sZnb(sZn,01)8(szn, 0 1 0 2 ) .
.
.
E S".
The respective output  E p = { n E (1,.. .
,1w1} I P(on)= P } , S = {TII on E C s and 3m > TI : r m = 7rn and om E C R and'di = n + 1,.. .
,m-- 1 : 7rz # rn},  242  R = {TZI gm  gn  G = {nI n 0  E C ~ m d 3 m<  E CsandVli=m+l,  r m= r n ~ d :.iri # .
i r n } ,  # S and n # R},  md,niffm,nE E,andm<n, f(n)= min{m  0  TZ:  ...,n - 1  I m > nand .irm  = .irn}, and  L(n) = u ~ .
0  Let C be a channel.
Since for w E L ( c ) with corre, word is obviously sponding output run p ~ ( w )the well-formed (remember the further demand we made on a channel), we may assign to w and C an MSC MF := M,Zm(,) satisfying w E Lin(M$).
As to a word language, we canonically link a channel C to an MSC language M ( C ) := U{M$ I w E L(C)}.
An equivalence relation W F x W F will tum out to be important.
Let first x f W F x f W F be the least equiv: gi, alence relation satisfying that if p = g; : 1 : p - 01 .
.-...iri+I.iri.. ~ i + l .~ - ...ire iU [ , P(UJ # P ( U ~ + ~and, ) , xi # .iri+l,then p x p'.
For infinite well-formed words a , a', let furthermore a a' iff for every finite prefix p of a , there is a prefix p' of a' and a p" such that both p' x p" and p is a prefix of /3".
Finally, a a' iff either a , a' E f W F and a x a' or a 9 a' and a' a.  c  a  (3,t ) P i A (SI, t') iff S [ P ( U ) ] +Jyb) S'[P(O)],S[p] = S'[p]forallp E P~-{P(~)),andfurthermored(t,~) = t'.
A run of A o n a word w = ~ 1 0 2 .
.. E C"" is amapping 5 : P r f ( w ) + QA from the set of finite prefixes of w to the set of global states such that t ( ~ E Qin ) and e(v) a d [ ( V U ) for all w E C' and E C with V U E Prf(w).
5 is called accepting iff for all p E PN,it holds  0  <(w)[p]  E Fp for a w E P r f ( w ) with w rp = w rp, if w rp is finite,  5 ( v ) [ ~E] Fp for infinitely many w E ~ r f ( w if ) ,w rp is infinite,  and furthermore both p( w ) and p~ (w ) , the respective runs of channel C on w, are accepting.
A defines a word language C(A) := {w E C" I there is an accepting run of A on w} and an MSC language M(A) in exactly the same way as a channel.
And obviously, we have both L(d) L ( C ) and L i n ( M ( A ) ) Lin(M(C)).
-  $2;  c  3.
A global logic for MSCs  -  The logic LTML-is given by  2.3.
Message Passing Automata  where U E C and r E C s .
LTML- is LTL- over Mazurkiewicztraces but enriched by an operator (.
E S ) specifying that a sending event is eventually answered by a corresponding receiving event.
Due to lack of space, we only suggest that we could likewise employ operators (.
E R ) and (.
E G) with the obvious meaning.
An LTML--formula is inductively interpreted over an MSC M wrt.
one of its configurations c E Conf(M)-like LTrL for Mazurkiewicz traces [17].
While the Boolean operators are defined as usual, let  We now propose the automata model for distributed systems.
It allows to describe a set of MSCs in terms of a finite device and consists of components communicating with each other via channels.
Dealing with one possibility of modelling such a system, it is proposed to be a kind of a product automaton [16].
Components synchronise in a local manner, i.e.
only execute actions accompanying a corresponding activity on the part of the channel.
Definition 3 A message passing automaton (MPA) is afamily A = ({d,},,pN, C, Q z n )of so-called local automata, each of which is of the form A, = (Q,, +, F,, $,), together with a set &in of initial states and a channel C = ( S ,6, SN, sin , AC).
Q p denotes the nonempty finite set of local states, -+, C Q p x C, x Q, the local transitions (E, contains the actions belonging to process p), and F,, Fp C Q, denote sets of local final states.
The set of initial states is a subset of QA = ( X p E p NQ,) x S , the set of global states.
0  0  t=  M,c (a)cp iff 3c' E Conf(M) : M,*c'l=cp,  C-%MC'  and  +  ( U E S)cp iff 3c' E Conf(M), e' = c U{e}: cqMc'andeESandM,c'kcp,  M, c  Instead of M, 0 cp, we also write M cp.
In principle, we may also make use of full LTML permitting until-formulas (PUGsuch that  Let S b ] denote the pth component of a tuple 3, and let  w rp yield the word we get by omitting in w E Cm exactly  0  those actions which do not belong to process p. We define a transition relation C x C x according to  M ,c  t=  (PUG iff IC' E Conf(M) p.  243  :  c 2 c' and  + and for all e'' E C o n f ( M )with c C e'' c e', it holds M , e" M, c'  But for readability, we only provide a decision procedure for LTML-.
In order to get an impression how to adapt the procedure to full LTML, see [4].
We will freely use abbreviations I = l T , cp A I) = - ( yV -I)),Ocp = -O-cp, and so on.
To shortly give a feeling in which way our logic may be employed for specification, let us consider the formula  O((S:(request))T  + O (S i (re p 1 y ) E S)T).
It requires that every request of client process 1 is finally and successfully answered by server process 2.
Looking towards a decision procedure, it is advisable to additionally interpret LTML--formulas over words $ E .WF interpreting T, negation, and disjunction as usual and furthermore (let Y PN and 2 N be finite sets)  s  4.
Alternating Biichi Automata In a nul,shell, we will go into the so-called alternating automaton, t he instrument for our decision procedure, which extends nondeterministic automata by universal choices.
We recall the notion of alternating automata along the lines of [19] where alternating Buchi automata are used for model checking ILTL over words.
For a finite set X of variables, let B + ( X ) be the set of positive Boolean formulas over X , the smallest set such that X C B f ( X ) and for cp,$ E B + ( X ) , cp A I) E B + ( X ) as well as cp v $J E B + ( X ) .
A set Y X is a model of a formula cp E B + ( X ) iff cp evaluates to true when the variables in Y are assigned to true and ithe members of X\Y to f a l s e .
An alternatingBiichi automaton over C is a tuple A = (Q, C, q2n,F, F ) where Q is its finite nonempty set of states, ql, E Q is the initial state, F, @ 2 Q are the sets of final states and x : Q x C + B+ (Q) is the transition function.
A run of A on a word w = a(O)u(l).. .
E Coo is a pair ( t , T ) where t is a complete tree of height (wI and T : nodes(t) + Q a labelling function such that the root of t is labelled by qZn and for every internal node v E nodes(t), it holds {T(w') I U' E children(v)} x ( T ( v ) cr(height(w))).
, Let thereby height(v) = 0 if U is root, height(v) = height(parent(v)) 1, otherwise.
( t , T ) is accepting iff for every leaf node U , it holds T ( v ) E F and every infinite branch o f t hits an element of 3 infinitely often.
The language C(A) is determined by all words for which an accepting run of A exists.
x,  k  +  e  5.
A decision procedure Given a formula and a finite channel, we now construct an alternating Buchi automaton which accepts those linearisations OF MSCs satisfying the formula and corresponding to the channel.
5.1 Thie automaton In general, given an LTML--formula cp, we will not be able to construct a finite automaton recognising Lin((A4 I M k c p } ) , since it is not a regular language.
We rather build an alternating Biichi automaton A$ wrt.
a finite channel C , such that C(A$)= {w I w E C ( C ) and MF'(.w) cp}.
We now illustrate the ideas the procedure is based on.
The states of the alternating Buchi automaton to be constructed will be formulas that are Boolean combined within a run to iobligations we still have to meet wrt.
bw.
Faced with an obligation cp1 V cp2 and reading an action, the automaton employs the action to prove either cp1 or cp2 choos-  We will illustrate the extended modalities introduced here later on.
By the way, note that W F is suffix-closed, i.e., every suffix of a word contained in W F is again in WF.
The following proposition is a consequence of well-known results in Mazurkiewicz trace theory.
Proposition 1 Given cp E LTML- and a word $bWcpiffM,wl=cp.
E WF,  244  ing in a run the respective successor node for cp1V q 2 .
Negation is treated by means of the so-called dual of a formula, which is defined further below.
At this point we should mention that the current channel state is carried along while rewriting the obligations.
Reading an action, we simultaneously access the corresponding output value.
In this way, we are able to unambiguously relate send and receive actions and consequently to reason about configurations.
Let us turn towards the more involved cases of suitably handling the temporal operators ( a ) and 0$.
We first suppose to face a formula ( 7 ) ' ~reading an action a = S:(X) that yields the output n in return.
It tums out that three cases have to be distinguished.
containing all subformulas as usual as well as I, ev(a, n) (where c E ES and n is an output value of C), and fail, being closed under positive Boolean combination, containing all those formulas we obtain from $ E e& (9) when we  - negate any of its subformulas identifying  '  ~l$'  with $', or  - replace a subformula (a)$' of $ with  (U)'$' or a subformula O$' with O$$' (YG'PNand Z is a set of output values of C), or  - replace any of its subformulas $' with a subfor-  Assume that ?- = a.
Indeed, we have realised ?- in the current configuration, and the further obligation can be reduced to cp.
mula of q!+.
We assume all positive Boolean formulas to be in disjunctive normal form and reduced wrt.
idempotence and commutation, and we maintain the following proposition (see also [4]).
According to the definition of F w , the automaton will rewrite the obligation to I if though P ( T ) = p but 7 # a, because then a 7-step is no more possible in that configuration in which we wanted to see it.
Proposition 2 For cp E LTML-, ecZc(cp) is afinite set.
Consider the case that P ( r ) = p does not hold.
Even if it did not occur so far, a ?--stepmight be hypothetically possible further on in the configuration we just left.
But in case that ?- is a receive action, we have to take into account that a further action a' = 7 which we read afterwards must not correspond to a as the suitable receive event.
r would have occurred too late, i.e.
not in the original configuration.
We therefore add T to the indexing set of the (?-)'-modality resulting in the further obligation ( ~ ) ' + ~ pwhere ' cp' arises from inductively applying a to cp (here 2 T means Z U {n}).
The decision procedure will also make use of the socalled dual of a formula p, which we obtain by pushing negation inwards as far-as-possible according to T = I, l p = cp, p V $ = F A $, (a)p = -(a)cp, and so on.
Wrt.
a formula cp E LTML- and a finite channel C = (S,6 , 6 ~szn, , A C ) , we now propose the core of our decision procedure.
The rewrite function y : e c l c (p)x S x C -+ ecZc(cp)) implements the ideas we illustrated before and subsequently provides (a little modified) the transition function of the automaton in demand.
We write ys(77, a ) instead of y(y, s, IT), and for fixed s, ys(q,a ) is inductively defined as shown in Figure 3.
Without loss of generality, we now assume an LTML-formula 'p to satisfy p = i.e., negation is already pushed inwards as far as possible.
a+(  +  Thus, in case of U E ER, we furthermore have to pay attention that the action the automaton reads conforms to'the condition attached to 2.
Rewriting the other temporal obligations is quite similar.
Supposed to face Ogcp, for example, and reading a send action U together with n, we may employ U to prove p assuming that the future configuration in demand is at least partly reached.
Further actions that depend on a, i.e.
a corresponding receive action or actions from the same process, necessarily have to prove the obligations emerging from p, too.
We therefore undertake the appropriate incrementation of the respective indexing sets resulting in OFSc,,p'.
But reading a , we could likewise decide either to be already completely in the required configuration or that a does not have to be employed to prove p. The state space of our automaton consists of all subformulas obtained by transformations as described above combined with the current channel state.
The extended closure of p (eclc(p)) is defined wrt.
a channel C as the least set  7,  Definition 4 Given an LTML--formula cp and a channel C = ( S ,6 , 6 ~sin, , AC), the alternating Biichi automaton A: is defined by its components as follows: 0  Q = ecZc(cp) x S. x(($,s),a)= @6(s,CT)(Ys($,4) where @st distributes s' among the atoms Boolean combined in its argument, i.e., A 'pij becomes A(pij,s').
v  0  0  4zn  v  = (p,szn).
F contains a state (+, s ) iff $ does not constitutefurther obligations (for example $ = 7(o)T).
Furtherh  more, F = { ( ~ $ J , S )1b,.-  245  E ecZc(p)} U {T}.
Theorem 1 finally records the correctness of our con?
struction meeting decidability of the model checking problem and satisfiability wrt.
a channel.
CorolLary 1 now justifies the application of partial order  reduction methods.
Corollary 1 d$ is closed in thefollowing sense.
rfw, w' E C(C) and p$(wt) then w E C(d$) i f S W ' E  pg(w)-  W$).
Given an MPA d = ( { d p } p E p N , C , Q land n ) a formula cp :< LTML-, we are now able to decide satisfiability wrt.
C by testing whether C(dg) # 8 and to decide the model checking problem by testing whether C ( d ) 5 {w I w E C(C) and cp}.
The latter is the case iff C ( d ) C C(d$)and iff C ( d x dzp)is empty.
d x d:p, which to construct is a simple task, is the product automaton accepting all those words accepted by both d and d2v.
Our procedure for full LTML is nonelementary, which is unavoidable, but only in the number of nested untilformula:<which are seldom in practice.
Some .fragments of LTML show more positive complexity.
See [4] for a detailed analysis.
Proof The theorem is a final consequence of the correctness of our construction presented in [4].
Assumed a certain familiarness with the notion of Mazurkiewicz traces, we want to shortly go into the relation between them and MSCs.
Wn.
Mazurkiewicz traces, the relation is defined wrt.
a dependency relation which declares actions interdependent rather than pairs of actions and natural numbers.
Within our framework, we must have a look at the channel when verifying interdependency of positions at a given configuration.
This illustrates why we have to carry along the 0 current channel state.
+  -  246  5.2 A note on the use of nondeterministic channels  [5] B. Bollig, M. Leucker, and T. Noll.
Regular MSC Languages.
Technical Report AIB-05-2001, RWTH Aachen, Apr.
2001.
[6] J. G. Henriksen, M. Mukund, K. N. Kumar, and P. S. Thiagarajan.
Regular collections of message sequence charts.
In Proceedings of 25th International Symposium on Mathematical Foundations of Computer Science (MFCS'2000).
volume 1893 of Lecture Notes in Computer Science, pages 405414.
Springer-Verlag, 2000.
[7] ITU-TS.
ITU-TS Recommendation 2.120 Message Sequence Chart 1996 (MSC96).
Technical report, ITU-TS, Geneva, 1996.
[8] L. Lamport.
Time, clocks, and the ordering of events in a distributed system.
Communications of the ACM, 21(7):558-565, July 1978.
[9] L. Lamport and N. Lynch.
Distributed computing: Models and methods.
In J. van Leewen, editor, Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 19, pages 1157-1 199.
The MIT Press, New York, NY, 1990.
[lo] Z.
Manna and A. Pnueli.
The Temporal Logic of Reactive and Concurrent Systems.
Springer, New York, 1992.
[ l l ] B. Meenakshi and R. Ramanujam.
Reasoning about message passing in finite state environments.
In Proceedings of 27th International Colloquium on Automata, Languages and Programming (ICALP'2000), volume 1853 of Lecture Notes in Computer Science.
Springer-Verlag, 2000.
[12] A. Muscholl, Z. Su, and D. Peled.
Deciding properties for message sequence charts.
In Foundations of Software Science and Computation Structures (FoSSaCS'98),volume 1578 of LNCS, Lisbon, Portugal, 1998.
Springer Verlag.
[13] D. Peled.
Ten years of partial order reduction.
In CAK Computer Aided Verification, number 1427 in LNCS, pages 1728, Vancouver, BC, Canada, 1998.
Springer.
[14] A. P. Sistla, E. M. Clarke, N. Francez, and A. R. Meyer.
Can message buffers be axiomatized in linear temporal logic?
Information and Control, 63(1/2):88-112, Oct./Nov.
1984.
[15] A. P. Sistla and L. D. Zuck.
Automatic temporal verification of buffer systems.
In K. G. Larsen and A. Skou, editors, Proceedings of Computer Aided Verification (CAV'91), volume 575 of LNCS, pages 59-69, Berlin, Germany, July 1992.
Springer.
[16] P. S. Thiagarajan.
PTL over product state spaces.
Technical Report TCS-95-4,School of Mathematics, SPIC Science Foundation, 1995.
[17] P. S. Thiagarajan and I. Walukiewicz.
An expressively complete linear time temporal logic for Mazurkiewicz traces.
In Proceedings, Twelth Annual IEEE Symposium on Logic in Computer Science, pages 183-194, Warsaw, Poland, 29 June-2 July 1997.
IEEE Computer Society Press.
[18] A. Valmari.
A stubbom attack on state explosion.
In E. M. Clarke and R. P. Kurshan, editors, Proceedings of ComputerAided Verification (CAV 'go), volume 531 of LNCS, pages 156-165, Berlin, Germany, June 1991.
Springer.
[19] M. Y. Vardi.
An Automata-Theoretic Approach to Linear Temporal Logic, volume 1043 of Lecture Notes in Computer Science, pages 238-266.
Springer-Verlag Inc., New York, NY, USA, 1996.
In our presentation, we required channels to behave deterministically.For practical applications though, it is desirable to extend our approach towards nondeterministic channels.
Unfortunately, one and the same word defined by a nondeterministic channel may stand for different MSCs.
That way, the unambiguous mutual assignment of MSCs and their sets of linearisations,which our procedure is based on, gets lost.
Nevertheless, we can solve this problem by likewise introducing linearisations as well-formed words in such a way as we regain aforesaid unambiguousness [5].
6.
Conclusion We presented a way to formally deal with message passing systems and have given a slightly adapted presentation of message sequence charts (MSCs) which may be used to describe scenarios of an underlying message passing system.
We presented a model for channels employed for communication which is applicable for a broad range of different channel types.
We introduced message passing automata as a finite description for sets of MSCs.
To specify message passing systems in the light of the powerful approach via temporal logic formulas, we proposed a version of the prominent linear time temporal logic (LTL) adapted towards MSCs.
To support automatic verification of specified systems, we developed a corresponding decision procedure which makes it possible to reason about finite state message passing systems using fixed but arbitrarily modelled deterministic channels.
Altogether, we presented a framework for modelling, specifying, and verifying message passing systems.
References R. Alur, G. Holzmann, and D. Peled.
An analyzer for message sequence charts.
Software: Concepts and Tools, 17:7077, 1996. also appeared in TACAS'96, Tools and Algorithms for the Construction and Analysis of Systems, Passau, Germany, LNCS 1055, Springer-Verlag, 1996, 35-48.
R. Alur and M. Yannakakis.
Model checking of message sequence charts.
In Proc.
10th Intl.
Con5 on Concurrency Theory, volume 1664 of Lecture Notes in Computer Science, pages 114-129.
Springer Verlag, 1999.
J. Arahjo.
Formalizing sequence diagrams.
In L. Andrade, A. Moreira, A. Deshpande, and S. Kent, editors, Proceedings 06 the OOPSLA'98 Workshop on Formalizing UML.
Why?
How?, volume 33, 10 of ACM SIGPLAN Notices, New York, 1998.
ACM Press.
B. Bollig and M. Leucker.
Deciding LTL over Mazurkiewicz Traces.
In Proceedings of the Symposium on Temporal Representation and Reasoning (TIMEOI).
IEEE Computer Society Press, 2001.
247