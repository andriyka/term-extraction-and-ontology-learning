Department of  Computer Science  Research Report No.
RR-01-02  ISSN 1470-5559  The Event Calculus Assessed Sergio Brandano  March 2001  The Event Calculus Assessed Sergio Brandano Department of Computer Science Queen Mary College University of London sb@dcs.qmw.ac.uk  Abstract  implements temporal inertia.
In this paper, the range of apclass in the plicability of FEC is proven to be the K Features and Fluents taxonomy.
The proof is given with respect to the original definition of this preference logic, where no adjustments of the language or reasoning method formally captures all of the were necessary.
As K above characteristics, this assessment result implies that the claims on the expressiveness and problem-solving power of FEC were indeed correct.
The general meaning of this assessment result is that the assessed logic is guaranteed, or certified to be correctly applicable to all reasoning problems in the class, i.e.
the logic always gives the correct, intended set of conclusions when applied to any reasoning problem in that class.
As the Full Event Calculus is the first of a family of other similar definitions, also involving important implementation issues, this assessment result discloses knowledge on how to certify the expressiveness and problem-solving power of these logics.
Assuming the given implementation is correct, the final user would then be guaranteed on its fitness for a particular purpose 1 , unlike all other products of similar nature.
Finally, a word on the Frame Problem.
K ad, obtained by remits an important sub-class, K stricting K to the case of purely deterministic actions.
In 1986 [4, 5] Hanks and McDermott pointed out that none of the reasoning methods developed so far, including predicate circumscription, were correctly addressing the Frame Problem.
They used the Yale Shooting Problem as a diagnostic example.
In 1994 [14, page 168] Sandeclass wall classified this problem, for which the K resulted to be the smallest class including a correct solution for it.
As FEC is correctly applicable to K - , and K  K - , then FEC implements a provably correct solution to the Hanks-McDermott problem.
sp IA  The range of applicability of the Full Event Calculus is proven to be the K class in the Features and Fluents taxonomy.
The proof is given with respect to the original definition of this preference logic, where no adjustments of the language or reasoning method were necessary.
The result implies that the claims on the expressiveness and problem-solving power of this logic were indeed correct.
sp IA  sp IA  1 Introduction We consider two well established approaches to Nonmonotonic temporal Reasoning about Actions and Change: the Event Calculus approach by Shanahan [16] and the Features and Fluents approach by Sandewall [14, 15].
It turns out that, although the design of suitable preference logics is a common task to both approaches, Sandewallas approach emphasises the systematic classification of these logics, via formally proven assessments of their range of applicability, while Shanahanas approach does not use any similar methodology.
The aim of this paper is to extend the benefit of Sandewallas systematic methodology to Shanahanas approach.
As a case study, we show that the most useful among all definitions of the Event Calculus, the Full Event Calculus (FEC), is a preference logic to which Sandewallas systematic methodology applies.
Shanahan originally proposed FEC as suitable, i.e.
adequate in expressiveness and problem-solving power, for correctly solving a number of NRAC reasoning problems with the following characteristics.
The information about actions is accurately and completely specified, actions succeed only if their preconditions are satisfied, successful actions may have a nondeterministic effect, state variables are truth-valued, the initial state of the world is accurately and completely specified, and there is no information at any later state than the initial one.
The time structure consists in the set of natural numbers with their standard order relation.
The reasoning  sp IA  sp IAd  sp IA  sp IAd  sp IA  sp IAd sp IA  1 Any software licence agreement includes the following clause: THE SOFTWARE IS PROVIDED AS-IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
1  2 Preliminaries We assume the reader familiar with the Features and Fluents systematic methodology.
Readers with no preliminary knowledge in the topic are invited to consult [1, 15, 14].
Any concept not explicitly defined in this paper refers to [1].
The research task in this paper is precisely described as follows, with some preliminaries.
Definition 2.1 (Preference Logic) [20, pages 73-77] Let L be a standard logic, i.e.
a logic with the usual compositional model-theoretic semantics.
   Let  be a strict partial order on interpretations for L. Intuitively, I1  I2 means that the interpretation I2 is preferred over the interpretation I1 .
L and  define a new logic L .
We call such logics preference logics.
;  be in L.  preferentially entails  , written    , if for any M , if M   then M   or, Let  equivalently, if the models (preferred and otherwise) for  are a superset of the preferred models for .
 L is monotonic if for all ; ;  2 L, if    then also  ^    .
fi Definition 2.2 (Range of Applicability) [1, definition 2.9] Let L be a preference logic, let  be a scenario description and let  be the mapping defined in terms of  that selects those members of the classical model set [ ]] which are minimal according to , so that the maximally preferred models are the selected ones.
We say that aL is correct for a iff the preferred model set for  and the intended model set for  are identical, i.e.
iff 2  ([[]]) =  ().
We call arange of applicability of L a the class of all  such that L is correct for .
We call aclassification of L a the formally proven assessment of the range of applicability of L .
fi Within model-theoretic AI, Shohamas 1986 [19] notion of model preference is a generalisation [20, pages 83-85] of McCarthyas 1980 [10] predicate circumscription, which in turn is a generalisation [12] of Clarkas 1978 [2, 3] predicate completion.
Shanahanas Full Event Calculus is a preference logic; in fact, as summarised in definition 3.1, it uses classical first-order logic as base logic and predicate circumscription as model-preference criterion.
As Shanahanas Full Event Calculus is a preference logic, the research task in this paper then consists in formally assessing its range of applicability.
However, it is required by definition 2.2 that  and  use the same language for .
As meeting this requirement is not possible in the present note that  and  are defined in terms of , hence they speak the same language.
2 Please  case, we extend the notion of correctness by redefining it in terms of an immersion operator.
We then say that aL is correct for a iff  ([[T ()]]) =  (), where  is written in the underlying language and T () is the translation of  in the language of L .
If T is the identity operator, then T ()   and the previous definition of correctness applies.
The following is the underlying language for .
Definition 2.3 (Underlying Language) [1, section 3.1.3] Let T be the time-point domain [1, section 3.1.1], F the set of all feature symbols, V the domain of all feature values, and E the set of all action symbols.
Let hH; vi be the lattice whose elements, called observations, are members of H = T  F  2O  V and the order relation v applies as follows: ht1 ; f1 ; f: : :g; v1 i v ht2 ; f2 ; f: : :g; v2 i iff t1 v t2 .
The tuple ht; f; f: : :g; unknowni is an abbreviation for i ht; f; f: : :g; vi i, varying i over all possible tuples ht; f; f: : :g; vi i in H. Let hD; vi be the lattice whose elements, called rigid occurrences of actions, are members of D = TTE and the order relation v applies as follows: hs1 ; t1 ; A1 i v hs2 ; t2 ; A2 i iff s1 v s2 .
The order relation @ is an abbreviation for v ^ 6=.
The relation hs1 ; t1 ; A1 i = hs2 ; t2 ; A2 i simply means that A1 and A2 start at the same time-point, while hs1 ; t1 ; A1 i @ hs2 ; t2 ; A2 i means that A1 starts earlier than A2 .
Let  be a scenario description.
W      The OBS part of  is a sub-lattice of hH ; vi, whose elements are members of H = T F 2O V  H, where F is the set of all features explicitly occurring in .
The SCD part of  is a sub-lattice of hD; vi.
Each tuple in SCD specifies the starting time, the ending time and the action symbol of an action scheduled for execution.
The function V : D !
2H maps each scheduleas occurrence in a set of non-empty lattices of observations.
The function V is parametric on the action type, and the LAW part of  consists in the definition of V as a set of action-laws in Full Trajectory Normal Form, one law for each action type.
The Full Trajectory Normal Form for the action-laws is a mapping hs; t; Ai V ni=1 mj=1 Sij for which the action occurrence hs; t; Ai is expanded into a formula in Full Disjunctive Normal Form, that is into a disjunction of conjunctions of trajectory formulas Sij , each of which corresponds to the feature fj in the alternative i.
A trajectory formula for a given feature fj in F is the firstorder formula 8  2 [s; t]  T : [ ]fj =  'j ( ) where 'j is a partial fluent defined over D  [s; t]  T , and s 6= t. fi  W V  The underlying language is very expressive.
The assessment will reveal how much of that expressivity the specific logic is capable of using.
3 Definition  4 Classification  The following definition first appeared in [17, section 3] then in [18, page 209].
The definition extends [16, chapter 16] and [17, section 1] to the case of actions with duration, and derives from Kowalskias 1992 [6] simplification of the 1986 [7] Kowalski and Sergot original Event Calculus.
We shall now proceed to the assessment of the range of applicability of this logic.
Are the underlying semantics and the logicas semantics equivalent?
Is the intended model set for  equal to the set of logical consequences EC (T ())?
Let the relation ht; f; v i 2  () be a shorthand for aexists an interpretation hM; H i such that hB ; M; H; P ; Ci 2 Mod() and H (t; f ) = va, according to the known definition of intended model set.
Let the relation ht; f; truei 2 EC (T ()) be a shorthand for  ^  HoldsAt(f; t), and the relation ht; f; falsei 2 EC (T ()) be a shorthand for  ^  :HoldsAt(f; t), where (1)  is the conjunction of axioms A1 : : : A7 (def.
3.1), (2) is the conjunction CIRC [S1 ; Initiates; T erminates; Releases] ^ CIRC [S2 ; Happens] ^ S3 (def.
3.1), and (3) all formulae in S1 and S2 are in T () (definition 4.1).
Definition 3.1 (Full Event Calculus) The calculus uses classical first-order logic as base logic, augmented with the formulas in table 1 and axioms in table 2 for representing the specific problem domain of interest and for controlling deduction, and uses McCarthyas 1986 [11] predicate circumscription 3 with forced separation as modelpreference criterion.
The language of the calculus is defined in table 1.
Let S1 be a conjunction of Initiates, T erminates and Releases formulae, let S2 be a conjunction of InitiallyP , InitiallyN , Happens and temporal ordering formulae, and let S3 be a conjunction of Uniqueness of Names Axioms for actions and fluents.
The set of logical consequences of the calculus are defined as being the set of logical consequences of  ^ , according to the classical, Tarskian definition of logical consequence, written f :  ^  g, where  is the conjunction of axioms A1 : : : A7 in table 2, is the conjunction CIRC [S1 ; Initiates; T erminates; Releases] ^ CIRC [S2 ; Happens] ^ S3 where CIRC is the circumscription of the given predicates, and  is either a positive or negative HoldsAt formula.
The minimisation of Happens corresponds to the default assumption that there are no unexpected event occurrences.
The minimisation of Initiates, T erminates and Releases corresponds to the default assumption that actions have no unexpected effects.
fi As the essence of the Frame Problem is how do we use logic to represent the effects of actions without having to explicitly represent all their non-effects, the above method is a solution to the Frame Problem.
The conceptual basis of the above model-preference criterion is the partitioning of the set of premises and the application of different selection functions to the classical model set of the resulting and distinct sets of premises.
The set of selected models is then chosen by filter preferential entailment, using predicate circumscription as selection function.
The filtering technique was first described by Sandewall in 1989 [13], and occurs within the Event Calculus literature as the principle of forced separation [16, chapter 16 and page 81].
3 The generalisation of the 1980 [10] definition, allowing predicates, functions and constants to vary, and allowing many predicates to be minimised in parallel.
Definition 4.1 (Immersion Operator) Let L1 be the underlying language (definition 2.3), and let L2 be the language of the logic (definition 3.1).
The immersion operator T : L1 !
L2 is defined as follows:   T (h0; f; truei) = InitiallyP (f ) and T (h0; f; falsei) = InitiallyN (f );  T (hs; t; Ai) = Happens(A; s; t);  T (hs; t; Ai V Wni=1 Vmj=1 Sij ) is translated into a set  of formulas, one Initiates(A; f; s) formula for any fluent f becoming true as the effect of a deterministic action A, one T erminates(A; f; s) formula for any fluent f becoming false as the effect of a deterministic action A, one Releases(A; f; s) formula for any fluent f becoming randomised (true or false) as the effect of a non-deterministic action A, one HoldsAt(f; s) formula for any positive precondition (hs; f; truei) to the successful execution of the action A, and one :HoldsAt(f; s) formula for any negative precondition (hs; f; falsei) to the successful execution of the action A. Preconditions are explicit conditions for the truth of Initiates, T erminates and Releases formulae.
fi  The following two propositions by Lifschitz [8] are needed for the assessment.
We reproduce them as in Shanahan [16, page 280].
(x); ] is equivProposition 4.1 CIRC [ ^ 8 x:(x) alent to  ^ 8 x:(x) $ (x) if  and (x) do not mention the predicate .
Proposition 4.2 [8, page 341, proposition 7.1.1] Let  be the tuple of predicate symbols 1 ; : : : ; n .
If all occurrences  in  of the predicate symbols in  are positive 4 , then  CIRC [; ] = CIRC [; 1 ] ^ : : : ^ CIRC [; n ]  Theorem 4.1 (assessment) For all  2 K ht; f; vi 2 H , the following relation holds: EC (T ()) , ht; f; vi 2 K - ().
sp IA  sp-IA  and  ht; f; vi 2  P ROOF.
The following standard reduction applies.
By proposition 4.2, the second-order formula CIRC [S1 ; Initiates; T erminates; Releases] reduces to the second-order formula CIRC [S1 ; Initiates] ^ CIRC [S1 ; T erminates] ^ CIRC [S1 ; Releases].
By proposition 4.1 each CIRC minimisation, including CIRC [S2 ; Happens], reduces to first-order predicate completion.
In what follows, this reduction is used at each EC-evaluation, and the reference to an EC-axiom involves the application of the Uniqueness of Names Axioms in S3 .
The proof is by induction.
(a) If all preconditions for the action E are successfully met (i.e.
all HoldsAt and :HoldsAt test conditions for Initiates, T erminates and Releases clauses are met by axioms A3 and A6), or no precondition exists at all (in which case the above tests are trivially met), then action E is successfully executed.
Only one of the following three situations may then occur.
t    1.
The ego-world game starts at time  = 0.
The initial state of the world is represented by means of tuples h0; f; truei or h0; f; falsei in the OBS part of .
This results either in HoldsAt(f; t) 2 EC (T ()) by axiom A1, or in :HoldsAt(f; t) 2 EC (T ()) by axiom A4.
  2.
The world player persists until the ego player communicates its intention to perform an action, so that no tuples occur in SCD whose starting time is the present time  .
This trivially results in temporal inertia, by either axiom A1 or A4 depending on how f was initialised, or by axiom A2 or A5 depending on how was it last modified.
3.
The ego player, suddenly, adds the tuple h; E i to the current-action set C , where  is the point in time where this update occurs.
Then the world player executes the action and terminates it at  0 by removing the tuple h; E i from C and adding the tuple h;  0 ; E i to the past-action set P .
The ego may also decide to terminate E earlier, let say at  00 2 (;  0 ), so that it may autonomously remove the tuple h; E i from C and add h;  00 ; E i to P .
Let show what are the corresponding logical consequences of EC, pointwise.
By definition 4.1, we know it exists a single formula Happens(E; ;  0) (or Happens(E; ;  00 )) to refer to.
If the feature f does not belong to the set of those features which would be modified by a successful ex= Infl(E; t)), then the feature ecution of E (i.e.
f 2 is neither Clipped nor Declipped, and the situation described at point 2 then occurs up to  0 (or  00 ).
Otherwise, occurrence of a predicate symbol in a formula  is positive if it is in the scope of an even number of negations in the equivalent formula that is obtained by eliminating the connectives and from .
4 An  !
$  =  : then is either InitiallyP (f ) by T (), :Clipped(0; f; t) by axiom A3 and HoldsAt(f; t) 2 EC (T ()) by axiom A1, or InitiallyN (f ) by T (), :Declipped(0; f; t) by axiom A6 and :HoldsAt(f; t) 2 EC (T ()) by axiom A4.
< t <  0 : then is either Declipped(; f;  0) (if Initiates(a; f;  ) _ Releases(E; f;  )), or Clipped(; f;  0 ) (if T erminates(a; f;  ) _ Releases(E; f;  )), so that it is neither HoldsAt(f; t) 2 EC (T ()) by axiom A2, nor is :HoldsAt(f; t) 2 EC (T ()) by axiom A5 respectively, i.e.
inertia is not assumed in (;  0 ) (occlusion).
t =  0 : then is either (1) Initiates(a; f;  ) by T (), then is HoldsAt(f;  0 ) by axiom A2, (2) T erminates(a; f;  ) by T (), then is :HoldsAt(f;  0 ) by axiom A5, or (3) Releases(a; f;  ) by T (), then is both Declipped(; f;  0 ) and Clipped(; f;  0 ), so that it is neither HoldsAt(f; t) 2 EC (T ()) by axiom A2, nor is :HoldsAt(f; t) 2 EC (T ()) by axiom A5, i.e.
inertia is not assumed after  0 (nondeterminism).
The case for  00 in place of  0 is identical.
(b) If there is at least one precondition which is not met, then the action is executed without any effect, and the situation described at point 2 occurs up to  0 (or  00 ).
4.
The ego-world game ranges to infinity, where the intended-model set is defined.
Due to the choice of assumptions, the situations described at point 2 and 3 repeat themselves to the infinity, for both semantics, the semantics mirroring the underlying semantics.
fi Corollary 4.1 For all  2 K P ROOF.
[ ]].
fi  sp-IA, is EC (T ())  [ ]].
EC (T ()) = Ksp-IA ()   K-IA ()   The use of this preference logic for solving the HanksMcDermott [4, 5] problem and the Russian Shooting Problem is explained in [17, 16].
Theorem 4.1 gives a more general insight into how this is done, and guarantees that the reasoning method indeed gives the correct answers for these specific reasoning problems, as well as for all other class.
problems in the K -  sp IA  5 Conclusion In this paper, the range of applicability of Shanahanas Circumscriptive Full Event Calculus is proven to be the K - class in the Features and Fluents taxonomy.
The assessment is proven by referring to the original definition of this preference logic, where no adjustments of the language or reasoning method were necessary.
The result implies that the claims on the expressiveness and problemsolving power of this logic were indeed correct.
class is that subclass of Kwhere acThe K curate and complete information about actions (K), complete knowledge about the initial state of the world ( ) and no information at any later state than the initial one ( ), together with strict inertia in integer time ( ) of possibly non-deterministic actions ( ), are the assumed characteristics.
Time-points are natural numbers, and features are truth-valued ( ).
The extension of the Full Event Calculus so to encompass the full Kclass, which is the broadest class defined in [14], involves allowing backward (abductive) reasoning.
This extension is already available, it is called Abductive Event Calculus [18] [16, chapter 17], and its range of applicability is currently being investigated.
sp IA  sp IA  IA  s  A  I  I  p  IA  Acknowledgements We are grateful to Murray Shanahan for the helpful clarifications.
References [1] S. Brandano.
On the meta-theoretic approach to nonmonotonic reasoning, its extension to the continuum case and relation with classical Newtonian Mechanics.
LinkoEping Electronic Articles in Computer and Information Science, 5(42), 2000. http://www.ep.liu.se/ea/cis/2000/042/.
[2] K. L. Clark.
Negation as Failure.
In H. Gallaire and J. Minker, editors, Logic and Data Bases, Proceedings of the Workshop, pages 293a322.
Plenum Press, New York, 1978.
[3] K. L. Clark.
Predicate Logic as a Computational Formalism.
PhD thesis, University of London, Queen Mary College, Department of Computer Science, 1980.
Partially published as [2].
[4] S. Hanks and D. McDermott.
Default Reasoning, Nonmonotonic Logics, and the Frame Problem.
In Artificial Intelligence, Proceedings of the National (USA) Conference, pages 328a333, 1986.
Best Paper Award.
[5] S. Hanks and D. McDermott.
Non-monotonic Logic and Temporal Projection.
Artificial Intelligence, 33:379a412, 1987.
[6] R. A. Kowalski.
Database Updates in the Event Calculus.
Journal of Logic Programming, 12:121a146, 1992.
[7] R. A. Kowalski and M. Sergot.
A Logic-based Calculus of Events.
New Generation Computing, 4(1):67a95, 1986.
[8] V. Lifschitz.
Circumscription.
In D. M. Gabbay, C. J. Hogger, and J.
A. Robinson, editors, Handbook of Logic in Artificial Intelligence and Logic Programming, volume 3, chapter 6.
Oxford University Press, 1994.
[9] V. Lifschitz, editor.
Formalizing Common Sense: Papers by John McCarthy.
Intellect, Exeter, England, 1998.
[10] J. McCarthy.
Circumscription a A form of Non-Monotonic Reasoning.
Artificial Intelligence, 13(1-2):27a39, 171a172, 1980.
Reprinted in [9].
[11] J. McCarthy.
Applications of Circumscription to formalising Common Sense Knowledge.
Artificial Intelligence, 28(1):89a116, 1986.
Reprinted in [9].
[12] R. Reiter.
Circumscription implies Predicate Completion (sometimes).
In Artificial Intelligence, Proceedings of the National (USA) Conference, pages 418a420, 1982.
[13] E. Sandewall.
Filter Preferential Entailment for the logic of action in almost continuous worlds.
In Artificial Intelligence, Proceedings of the International Joint Conference (IJCAI), pages 894a899, 1989.
[14] E. Sandewall.
Features and Fluents: The Representation of Knowledge about Dynamical Systems, volume 1.
Oxford University Press, 1994.
[15] E. Sandewall and Y. Shoham.
Non-monotonic Temporal Reasoning.
In D. M. Gabbay, C. J. Hogger, and J.
A. Robinson, editors, Handbook of Logic in Artificial Intelligence and Logic Programming, volume 4, chapter 7.
Oxford University Press, 1994.
[16] M. P. Shanahan.
Solving the Frame Problem: A Mathematical Investigation of the Common Sense Law of Inertia.
MIT Press, 1997.
[17] M. P. Shanahan.
The Event Calculus Explained.
In M. Wooldridge and M. Veloso, editors, Artificial Intelligence Today: Recent Trends and Developments, volume 1600 of Lecture Notes in Artificial Intelligence, pages 409a 430.
Springer-Verlag, 1999.
[18] M. P. Shanahan.
An Abductive Event Calculus Planner.
Journal of Logic Programming, 44(1-3):207a239, 2000.
[19] Y. Shoham.
Reasoning about Change: Time and Causation from the Standpoint of Artificial Intelligence.
PhD thesis, Department of Computer Science, Yale University, 1986.
Published as [20].
[20] Y. Shoham.
Reasoning about Change: Time and Causation from the Standpoint of Artificial Intelligence.
MIT Press, second edition, 1988.
Table 1.
The Language of the Event Calculus Formula  Meaning What is true when (OBS):  InitiallyP (f ) InitiallyN (f )  Fluent f holds from time 0 Fluent f does not hold from time 0 What happens when (SCD):  Happens(a; t1; t2)  Action a starts at time t1 and ends at time t2 What actions do (LAW):  Initiates(a; f; t) T erminates(a; f; t) Releases(a; f; t)  Fluent f starts to hold after action a at time t Fluent f ceases to hold after action a at time t Fluent f is not subject to inertia after action a at time t Temporal Constraints:  t1 < t2, t1  t2 HoldsAt(f; t) Clipped(t1; f; t2) Declipped(t1; f; t2)  standard order relations between natural numbers Logical Machinery: Fluent f holds at time t Fluent f is terminated between times t1 and t2 Fluent f is initiated between times t1 and t2  The intuition behind Initiates(A; f; s), T erminates(A; f; s) and Releases(A; f; s) formulae is that the effect of the action A, starting at time s and ending at time t, is exerted on the fluent f at time t only.
Note.
Table 2.
The Axioms of the Event Calculus  HoldsAt(f; t) HoldsAt(f; t) Clipped(t1; f; t4)  :HoldsAt(f; t) :HoldsAt(f; t) Declipped(t1; f; t4) Happens(a; t1; t2)  InitiallyP (f ) ^ :Clipped(0; f; t) t2 < t ^ Happens(a; t1; t2) ^ Initiates(a; f; t1)^ :Clipped(t1; f; t) !9 a; t2; t3 [ t1 < t3 ^ t2 < t4 ^ Happens(a; t2; t3)^ [T erminates(a; f; t2) _ Releases(a; f; t2)]] InitiallyN (f ) ^ :Declipped(0; f; t) t2 < t ^ Happens(a; t1; t2) ^ T erminates(a; f; t1)^ :Declipped(t1; f; t) !9 a; t2; t3 [ t1 < t3 ^ t2 < t4 ^ Happens(a; t2; t3)^ [Initiates(a; f; t2) _ Releases(a; f; t2)]] !t1  t2  (A1) (A2)  (A3)  (A4) (A5)  (A6)  (A7)