Contingent Durations in Temporal CSPs: from Consistency to Controllabilities H6lkne FARGIER IRIT Universitk Paul Sabatier 118, rte de Narbonne F-31062 Toulouse, France e-mail: fargierQirit .fr  Thierry VIDAL* Dept of Computer and Information Science (IDA) Linkopings Universitet S-581 83 Linkoping, Sweden e-mail: thivi@ida.liu.se  Abstract  ables and constraints between them, and the main reasoning issue, on which this paper will focus, is then to check the consistency of the whole (i.e.
check that one can find a complete assignment of the variables, called a solution, that satisfies the constraints).
We should distinguish here between symbolic constraint algebras [l, 191, models dealing with numerical constraints [4],and some advanced proposals combining both [16, 11, 71.
We will focus in this paper on numerical temporal constraints, relying on the Temporal CSP (TCSP) graph-based formalism [4]that expresses them as intervals of possible values.
A duration will be used in the following to designate one such value "assigned" [16] to a constraint (within its bounds), whereas a date will be classically a value assigned to a variable.
This model has proven to be useful in such domains as scheduling [8],supervision [6], diagnosis and temporal databases [3], multimedia authoring environments [13], or planning.
In this latter domain, the incremental planner IxTet [ll]used the polynomial restriction of TCSP (namely STP) to check the temporal consistency of the plan (i.e.
a partially ordered set of tasks allowing an agent to reach a given goal).
The next step [18]was to take into account the inherent uncertain nature of durations of some tasks in realistic applications, distinguishing between contingent constraints (whose effective duration will only be observed at execution time.
e.g.
the duration of a task) and free ones (which instanciation is controlled by the agent, e.g.
a delay between starting times of tasks).
This will be recalled in Section 2.
Then the classical concept of consistency has to be redefined in terms of controllability: intuitively a network is controllable if it is consistent in the classical  Temporal Constraint Networks (TCSP) allow t o express minimal and maximal durations between t i m e points.
Though being used in m a n y research areas, this model disregards t h e contingent nature of some constraints, whose effective duration cannot be decided by t h e system but i.s provided by t h e external world.
W e propose a n extension of TCSP in which t h e classical network consistency property m u s t be redefined in t e r m s of controllability: intuitively, w e would like t o say that a network i s controllable iff it is consistent in a n y situation (i.e.
a n y assignment of t h e whole set of contingent intervals) t h a t m a y arise in the external world.
Three levels of controllability m u s t be distinguished, namely t h e Strong, t h e Weak and t h e Dynamic ones.
T h i s preliminary report mainly stresses t h e representation and concept issues, discussing their relevance in dynamic application domains, and partially tackles t h e reasoning issues (complexity, algorithms and tractable subclasses).
1  Background and overview  A large number of research areas in Artificial Intelligence are faced with the necessity of handling time in an explicit and highly expressive manner.
Apart from studies dealing with logics of time, researches have been carried out on temporal algebras, i.e.
formalisms solely capturing the time entities (points or intervals) and the relations among them.
Constraint Satisfaction Problems [12] model them in terms of vari*Supportedby the Excellence Center for Computer Science and Systems Engineering in Linkoping (ECSEL)  0-8186-7937-9197$10.00 0 1997 IEEE  78  2.2  sense in any situation that may arise in the external world, i.e.
however the "nature" will decide to assign the contingent intervals.
Inspired by the thorough study carried out in the framework of discrete CSPs [9] on the same kind of distinction, we exhibited two distinct properties, namely the Strong controllability (i.e.
there exists at least one solution, that will satisfy the whole set of constraints in any situation) and the Weak controllability (i.e.
in any situation, there exists at least one solution that satisfies the constraints in that context).
But these notions fail unfortunately to encompass the reactive nature of the solution building process in dynamic domains like planning, which Section 3 will explain and argue, eventually issuing the thorough definition (which is the main contribution of this article) of a third level of controllability, the Dynamic one.
Section 4 will only partially tackle the on-going work on theoretical complexity and practical algorithms, extended in Section 5 by a first attempt to design tractable subclasses.
2 2.1  The STPU model  The TCSP and STP models suit well the cases in which effective durations are under the control of the agent.
If not, the problem has to be redefined in the following way [18].
Definition 2.1 (Types of constraints/variables) A free constraint c, (referred as Free in the following) is a numerical constraint of type (x-y) E [l,,u,] that will be instanciated by the agent in the domain [ l a , %I * A contingent constraint g, (referred as Ctg in the following) is a numerical constraint of type (e,-b,) E [l,,u,] that will be instanciated by the external world in the domain [&,U,].
T h e activated time-points b, are those which date is assigned by the agent.
T h e received time-points ei are those which unpredictable date is assigned by the external world.
Hence the domain of a Free can be reduced by propagation (removing values that are inconsistent with other contraints [4]) while the domain of a Ctg should NOT (as it would remove possibly occurring values).
Anyway, considering restriction of contingent domains as a failure (as in [5], where similar distinctions are made with respect to Allen's algebra [l])is not sufficient as a satisfiability checking process, as it will be illustrated in next section.
The previous distinctions allow us to define a new model called Simple Temporal Problem under Uncertainty ( S T P U ) .
Representation issues The Temporal CSP and its STP restriction  In the time-point continuous algebra [19], time is represented through a set of time-points related by a number of relations, that can be be represented through a graph where nodes are time-points and edges correspond to precedence ( 5 )relations [lo].
Definition 2.2 (STPU) = (G,V,, R,, R,) represents a STPU with vb = { b l , .
.
.
,bB}: set of the B activated timepoints, V, = { e l , .
.
,e E } : set of the E received time-points, R, = {cl,.
.
.
,CC}: set of the C Frees, R, = (91,.. .
, g G } : set of the G Ctgs, whith v g , = [L Ii.
,1, > 0.
N  One can also use time-point graphs to represent numerical constraints, thanks to the TCSP formalism [4].
Here continuous binary constraints define the possible durations between two time-points by means of temporal intervals.
The STP (Simple Temporal Problem) restriction of general TCSPs applies when those are only non-disjunctive intervals: ci= [Zi,ui] between x and y expresses that the values of x and y must be such that ( 9 - 2 ) E [li,ui].A TCSP is said to be consistent if one can CHOOSE for each time point a value such that all the constraints are satisfied, the resulting instanciation being one solution of the TCSP.
Consistency checking of a general TCSP is NP-complete, but for some restrictions such as the STP, polynomial-time polynomial (e.g.
the PC-2 3-consistency checking algorithm [14]) are complete.
Should the reader be interested in the overall temporal structure developped for the IxTeT planner, we suggest to have a look at [ll],  .
So a Ctg encompasses the notion of an activity (e.g.
a task) which (non-null) duration is contingent.
One can notice that those definitions entail the basic property that a Ctg always relates an activated time-point ("begin") to a received one ("end"), and that hence two activated [resp.
received] time-points will always be related by a Free.
Please note that in the following we will use the terms decision to refer to the effective date of some activated time-point bi, and observation for the effective duration wi (received by the system at time-point e i ) of the contingent interval between bi and ei.
79  3  Consistency revisited: 3 levels of controllability  3.2  Definition 3.5 (Strong controllability)  n/ i s Strongly controllable if 3 a control sequence 6= { b l , ..., b B } such that V w E 0 , s is a solution of N, .
Notice that in order to ease the formulation, we adopt in the following the usual misuse of merging variables and values into one unique notation.
3.1  The Strong controllability  This first definition of STPU properties tells that the STPU is Strongly controllable iff there exists at least one "universal" solution that fits any situation (and that hence, as far as dynamic applications are concerned, might be computed off-line beforehands).
We will illustrate this property and the next ones through some small toy examples that may arise in everyday life common-sense planning.
Preliminary definitions  Definition 3.1 (Complete/partial assignments) A control sequence 6 of the S T P U is a n assignment of the sole activated time-points: 6 = { b l , .
.
.
,b B } .
A current-solution at time-point i i s a partial control sequence 6,i = { b l , ..., b p } , B ' < B, such that V j = l .
.
.
B ' , bj i.
Examples  Hence, in planning for instance, where the solution is built reactively, a current-solution defines that part of a control sequence (i.e.
a starting time for each task) currently developped until point i.
This entails that V6 and Vi= 1 .
.
.
B , 3!6,i 2 6.
Definition 3.2 (Situation) Given that V i = 1 .
.
.
G, gi= [li,ui], 0 = [11,ul]X .
.
.
X [ l ~u G, ] will be called the space of situations, and w = {Wi E [ll,U1],.. .
, W G E [ ~ G , U G ] } E 0 Will be called a situation of the S T P U .
Figure 1: Strong controllability in practice The two first drawings in Figure 1 show a duringlike relation [l]between two Ctgs g1 and g2.
Imagine for instance that you need some food to go and purchase downtown (task g z ) , knowing that the supermarkets will be closing in 30 up t o 40 minutes (contingent interval 91).
Going shopping in supermarket a will take you between 30 and 35 minutes, but if you go to supermarket b it will in any case not take you more than 25 minutes.
Then it should not be so hard for you to deduce that going to supermarket b is the only way to be sure to make it on time.
In other words, the first case (a) is not Strongly controllable (even though no contingent domain has been restricted, see previous section), since there exists at least one situation {w1=30, w2=35} that violates the during relation.
The second case (b) is Strongly controllable since deciding for instance to have b2 = bl (i.e leaving now) leads to a valid solution whatever values are taken by w1 and w2.
The third case in Figure l(c) exhibits a simple before-like relation [l]between two Ctgs in which the delay between the reception of el and the activation of bz is constrained.
Consider for instance that g1 is the task Cooking and g2 is the task Having-dinner, and you don't want to eat your dinner cold.
The example  In other words, a situation represents one possible assignment of the whole set of contingent constraints.
As we will argue further on, our problem can be interpreted as a "game against the nature", in which case a situation corresponds t o one possible strategy carried out by the nature.
Definition 3.3 (Projection) 'dw E R, Nu i s called the projection of the STPU hf in the situation w , and is constructed by replacing every Ctg gz = [l,, U,] inn/ by the singleton g, = ( w i } , with w, E w .
Property 3.1 A projection STP [18].
N, defines a classical  The proof is immediate as a constraint in a projecFree (i.e.
the classical form of a STP constraint) or a singleton.
t i o n is either a  Definition 3.4 (Partial situations) In the same way as we have defined a current-solution, we can define the past-situation at point i: w,, E R,, R i s the set of observations prior t o i. the situation-to-come at point i: w+, E R+, C_ R is the set of observations subsequent t o i.
80  would be rejected by a Strong controllability checking algorithm, since one cannot fix beforehands one unique date for b2 that will be valid in any situation: the instanciation of b2 depends on w1.
Which means that you cannot decide in advance at what precise time you will sit down to table, this depends on the time you'll need t o cook: if it takes you only 20 minutes, then you'll necessarily start the dinner within 30 minutes after b l .
But if g1 takes 40 minutes, then dinner will only begin at least 40 minutes after bl.
But one should notice that this example looks controllable from a planning point of view since one will have no problems deciding when to activate the second task g2 once the first one g1 is achieved.
Hence, Strong controllability appears to be a too demanding property, calling for a "weaker" one .
.
.
Anyway, Strong controllabilty may be relevant in specific applications where the situation is not observeable at all or where the complete control sequence must be known beforehands (e.g.
when other activities processed by other agents depend on it, which for instance may arise in the production planning area).
3.3  should be added before the end of the dish mix, hence you must send somebody t o buy it at the supermarket (task 92).
All durations of the three tasks being contingent, the question is: can you be sure to make your dish correctly and on time ?
This example can in fact be shown t o be Weakly controllable (this will not be proven here).
But let's have a closer look at it.
If we assume for instance that bl = b2 = 0 (which is in any case an optimal choice), then the sequence to find is reduced t o the simple decision of instantiating b3 (i.e.
: when should you start cooking once you have sent somebody go shopping ?)
The table next t o the figure exhibits two distinct kinds of situation.
The first one is when g1 and 93 both lasts 30 time units (no matter what value takes 92).
There is one solution in those cases: t o satisfy the duringlike relation between them, one is compelled to assign the value 0, and only it, t o b3 (i.e.
you must start cooking now).
We let the reader look into the second situation t o reach the same kind of conclusion, namely in that case that the sole value 10 can be assigned to b3 (i.e.
you must wait exactly 10 minutes before starting cooking).
Comparing the two situations, one can see that the decision to be taken depends upon the observation of w3 (i.e.
on the duration of the dish making), which is necessarily unknown when b3 is activated.
Therefore in dynamic domains we would like to conclude that the network is "not controllable" (i.e.
you have t o choose between making sure of making a good dish, or of making it on time, but you cannot be certain of meeting both requirements ...) Hence the property that we seek for our planning application is not Weak controllability either.
But again, this property may be relevant in specific applications where the situation will be known JUST BEFORE the execution starts (consider for instance delivering delays in production planning), but one wants to know in advance that there will always be at least one feasible solution.
The Weak controllability  Definition 3.6 (Weak controllability) i s Weakly controllable if Vw E 0, 36 = { b l , .
.
.
,b B ) S'ILch that 6 is a solution of  Nu.
In other words, the STPU will remain Weakly controllable as far as in any given situation, there exists at least one solution (which holds in the case of Figure l(c)).
Hence, as soon as one knows the situation, one can pick out and apply the control sequence that matches the situation.
But this property proves to be not so useful in planning, as we will state it hereafter.
Example  3.4  The Dynamic controllability  As illustrated in last paragraph, in dynamic application domains such as planning, the solution is built in the process of time, as far as one "observes" the situation at hand.
Which means that decisions are to be taken whereas the situation remains partially unknown.
Figure 3 illustrates it, stating that at each point in time the situation splits into the past-situation that is known (represented by w+) and the situation-to-come that remains unknown (and is still to be picked out from a partial space of possible situations-to-come R+i C Q).
This leads to the definition of a third level of controllability.
Figure 2: Drawbacks of the Weak controllability Figure 2 exhibits a possible 3-Ctgs network.
Consider for instance that g1 represents the waiting time until your guests arrive, and g3 your cooking activity, that should be finished before the bell is ringing.
Then you realize that some ingredient is missing that  81  report, because of the limited length and also because it refers t o already published or on-going work.
4.1  For an in-depth analysis of the Strong controllability checking, we invite the reader t o refer back to the Decision Graph method described in [18].
We will only recall hereafter the basic tractability property.
Figure 3: Dynamic observation of the situation  Definition 3.7 (Dynamic controllability)  N is Dynamically controllable i f  Property 4.1 (Complexity of the Strong) Checking t h e Strong controllability is polynomial.
Vw E R, 36 = { b l , ...,b B } such that \Ja E with past-situation w+ C w , v possible situation-to-come w:, E Cl+%, 3 6' such that t h e current-solution 6+, C 6' and 6' is a solution of  vb  Sketch of proof: The problem of deciding Strong controllability of a STPU can be represented by means of a classical STP such that the STPU is Strongly controllable iff the STP is consistent in the classical sense.
The idea is to consider the relationships between tasks in the worst case, assuming that a contingent duration di E [ Z i , ~ iis ] equal to ui in any constraint of the form x -y > d , and equal to li in any constraint of the form x - y < di.
Hence, since determining whether a STP is consistent or not is a polynomial problem, so it is for deciding Strong controllability.
0  Nu +, vu;, .
In other words, each successive decision is ensured to extend t o a global solution whatever occurrences remaining to be observed.
Planning is not the only domain in which this applies: in multimedia authoring environments research [13], one needs make the same distinction betwen contingent and free constraints t o model the temporal structure and dynamic presentation of a document.
It appeared recently that our D y n a m i c controllability was the one to be considered in this framework.
4.2 3.5  The basic property relating the three levels  Property 3.2 (Implication rule) Strong controllability + D y n a m i c controllability Weak controllability.
Checking the Weak controllability  Conjecture 4.1 (Complexity of the Weak) Checking t h e Weak controllability i s CO-NP-complete.
+  Sketch of proof: The CO-problem of checking Weak controllability is: is there a situation w E R such that Nu is an inconsistent STP ?
Since checking that a STP is inconsistent is a polynomial problem, this co-problem belongs t o NP.
Hence, Weak controllability belongs to CO-NP.
The difficulty of the problem (CO-NP-complete) remains to be proven.
0  Sketch of proof: The first implication is straightforward: if there exists a "universal" control sequence 6, then of course in any situation, we can choose to develop this one, and at any point in time, the current solution extends to 6 itself in any possible situation-to-come.
The second implication is even more trivial: for any situation w , if a current-solution can be extended to any situation-to-come, then it will be the case in the situation w itself.
0  Property 4.3 (Weak controllability on bounds) A STPU is Weakly controllable iff f o r any wbnd E {Zl,ul} x .. .
x { Z G , u G } , Nuand is a consistent STP.
In other words, when trying to satisfy the Dynamic controllability requirement, checking the Strong one will be a complete but not sound process, whereas Weak controllability checking will issue sound but uncomplete answers.
4  Checking the Strong controllability  If Weak controllabilty proves to be CO-NPcomplete, one can now imagine an enumerative algorithm which checks the consistency of the projection Nubn,for every wbnd E (11, U I } x .
.
.x {ZG, U G } .
It can be processed recursively:  Complexity and algorithmic issues  This section will not be deeply developped (and some proofs will not be provided) in this preliminary  82  Sketch of algorithm: Consider N as a classical STP, and propagate the constraints by 3consistency: if a Ctg gi = [ l j , ~ j ]is reduced, it means that at least one projection Nuandis inconsistent and therefore the STPU is not Weakly controllable.
Otherwise, choose one gi and work recursively on the two simplified STPUs obtained for gi = {li} and for gi = {ui} (notice that in a look-ahead approach one can propagate the constraints after each instanciation).
The resulting complexity of this (probably non-optimal) algorithm is in 0(2G).
4.3  Interestingly enough those parameters appear to remain constant if one considers the already mentioned multimedia application area [13], for which one can hence expect to obtain efficient algorithms in practice.
This part of the work, only sketched hereabove, is more widely described in a technical report not yet published at the time this paper is being written.
Should the reader be interested in those aspects, we suggest to contact the authors.
Tractable equivalence classes  5  Assuming that Weak and Dynamic controllabilities are more than polynomial, and that the conjecture NP # P is true, then it is always useful to track maximal restricted representations in which the problem becomes polynomial again [17, 2, 71.
In our framework, it amounts to find the maximal equivalence classes between Weak [resp.
Dynamic] and Strong controllabilities.
In [18], we have defined an algebra of the possible symbolic relations linking two Ctgs (for instance in Figure 1, the during-like relation will be written g2Rsgl and the before one will be glR492) that was useful not only for building our Decision Graph, but also for proposing a first equivalence class between Weak and Strong controllabilities, restricting the possible set of relations Ri.
This first attempt suffered from uncorrect approximations, that called for a deeper analysis not yet fully achieved.
Checking the Dynamic controllability  Characterizing the complexity of Dynamic controllability checking is a non-trivial task, that is still under process.
Anyway, as a first step, it might be interesting to prove at least that this problem is not polynomial, by merely proving that the Dynamic property is more difficult to establish than the Weak one.
Then, assuming the hardness of the problem, there is a need to look for some practical method to deal with it.
If one requires a complete algorithm, then it will behave exponentially in the worst case, which is undesirable in dynamic applications.
But then two research tracks are worth investigating.
The first one consists, in planning for instance, in using such a complete algorithm only during the execution, and only in the short-range (to keep the complexity within bounds), in a reactive manner.
This of course should be combined with uncomplete methods capable of maintaining an evaluation of the feasibility of the whole plan in the long-range (before and during the execution).
The second track consists in characterizing which parameters contribute to the complexity of the method in order to exhibit restricted frameworks and/or applications in which such parameters are strictly confined under some constant threshold.
This is this second track that we have chosen to investigate first.
Inspired by the real-time controllers community [15], we have first designed an exponential algorithm based on the transformation of the STPU into an equivalent timed automaton encompassing all the possible execution paths.
Then, considering the problem as a continuous "game against the nature", it is possible to search in the automaton, producing conditions on decision variables that must be enforced to be sure to always reach the "winning" state.
If those conditions are satisfiable, then the original problem is Dynamically controllable.
Characterizing the algorithmic complexity allows to extract the primary graph parameters that influence the hardness of this method.
5.1  Weak  /  Strong equivalence class  We have mainly focused on the Weak G Strong equivalence classes, still relying on our definition of a precedence constraint between time-points as being 5 (before or equals) [19].
Definition 5.1 ( U p p e r / Lower Ctgs) A Ctg gi = [lj,uj] is said to be lower iff V6 6 is also a solution of solution of Niwl ,...,1,,..., N{Wl,...,U,,...,WG}.
A Ctg gi = [lj,uj] is said to be upper iff V6 solution of N{wl,..., ,,...,w G ) , 6 is also a solution of N{lOl,...,la,...,WG}'  Recall (section 2) that a Ctg always relates an activated time-point ("begin") to a received one ("end"), and that hence two activated (resp.
received) timepoints will always be related by a Free.
A Ctg is always of the form: ei -bi = w j with wi E [Zi, ui]  And we only have 3 kinds of Frees:  83  5.2  ck : bj-bi E [lk,uk] ck : bj-ei E [ I k , u k ] i.e.
bj-bi-wi E [ l k , u k ] ck : e j - e i E [lk,uk] i.e.
bj+wj-bi-wi E  On-going work  We have begun to investigate the design of maximal tractable subclasses as well for the Dynamic controllability, trying t o exhibit equivalence classes between it and the Strong controllability, but this part of the work is not mature enough to be reported here.
One interesting track of research that we have been starting to look upon.
consists in redefining the precedence relation between time-points as being now < (strictly before) [19].
Not only this defines an algebra closer to Allen's one [l],but it seems to permit the design of more interesting classes both for the Weak and the Dynamic controllability, that one could call PWeak, and PDynamic,.
[ik u k ]  A Ctg gi is typically lower when any Free related to it have one of the following forms: ck : bj-bi E [ I k t U k ] ck : bj-ei E ( - C O , U k ] ck : e j - e i E ( - C O , U I C ] And gi is typically upper when any Free related to it have one of the following forms:  ck : bj - bi E [lk,U k ] Ck : bj-ei E [ l k , - k 0 0 ) Ck : ej-ei E [ l k , + o O )  6  This allows us to exhibit the following characterization of the polynomial classes P Weak< entailed by an equivalence relation with Strong controllability.
Conclusion  This preliminary report presented extensions of the STP model to take into account contingent durations (i.e.
assignments provided by the external world).
Of special interest is the new consistency property called D y n a m i c controllability, that suits well those application domains in which the solution is built in a reactive manner.
If the model and the concepts are now clear, it remains to complete the theoretical complexity study.
Considering the assumed hardness of the problem, and efficiency being a key issue in dynamic applications, a special interest is given in our current on-going work on completing as well the thorough characterization of maximal tractable classes and the design of efficient algorithms (uncomplete or possibly complete ones in specific applications, like in [13])for checking the Dynamic controllability.
Property 5.1 (PWeak, equivalence class) all the Ctgs gi are lower [resp.
upper], a n Strong controllability i s equivalent t o Weak controllability.
If  Sketch of proof: Strong controllability + Weak controllability has already been proven in the general case.
Conversely, suppose that the STPU is Weakly controllable.
Consider the situation w* where wi = li for any lower gi and wj = uj for any upper gj (for Ctgs which are both upper and lower, one can equally choose li or ui).
Since the STPU is Weakly controllable, there exists a solution 6 of the STP Nu..
It is also a solution of any Nu such that w R, by definition of upper and lower cgts.
Hence, the STPU is Strongly controllable.
References  We finally obtain two distinct classes.
Those, together with the proof that they constitute maximal subclasses, will not be reported here but is t o be developped in a longer forthcoming version of this paper.
One should just be aware that expressiveness is much restricted in those classes since for instance the during relation must be excluded in both, and in the larger one even the before relation has t o be discarded.
On another hand, this notion of lower and upper Ctgs is useful to enhance our Weak controllability scketch of algorithm: before enumerating, one can transform the STPU into an equivalent one for Weak controllability replacing any lower Ctg gi [resp.
any upper Ctg] by the singleton gi = { l i } (resp.
gi = { u i } ] .
This might also be done during the enumeration, since some Ctgs can become upper or lower once others have been instanciated.
J.F.
Allen - Maintaining knowledge about temporal intervals, Communications of the ACM, 26(11):509-  521, 1983.
C.Bessi&re, A.Isli & G.Ligozat - Global consistenc y in interval algebra networks: tractable subclasses, In Proc.
of the 12th European Conference on A.I.
(ECAI-96), pp.
3-7, Budapest (Hungary), 1996.
V.Brusoni, L.Console, B.Pernici & P.Terenziani LaTeR: a general purpose manager of temporal information, Methodologies for Intelligent Systems 8.
Lecture Notes in Computer Science 869:255-264, Springer Verlag, 1994.
R.Dechter, I.Meiri & J.Pearl - Temporal constraint networks, Artificial Intelligence,49: 1-95, 1991.
J.Dorn - Hybrid temporal reasoning, In Proc.
of the 11th European Conference on A.I.
(ECAI-94), pp.
625-629, Amsterdam (Netherlands), 1994.
84  [6] C.Dousson, P.Gaborit & M.Ghallab - Situation recognition: representation and algorithms, In Proc.
of the 13th International Joint Conference on A.I.
(IJCAI93), ChambCry (France), 1993.
[7] T.Drakengren & P.Jonsson - Eight maximal subclasses of Allen's interval algebru with metric time, to appear in Journal of Artificial Intelligence Research (JAIR), 1997.
[8] D.Dubois, H.Fargier & H.Prade - The use of fuzzy constraints in job-shop scheduling, In Proc.
of IJCAI93 Workshop on Knowledge-Based Planning, Scheduling and Control, Chambhry (France), 1993.
[9] H.Fargier, J.Lang & T.Schiex - Mixed constraint satisfaction: a framework for decision problems under incomplete knowledge, In Proc.
of the 12th National Conference on A.I.
(AAAI-96), Portland (Oregon,  USA), 1996.
[lo] M.Ghallab & A.Mounir-Alaoui - Managing eficiently temporal relations through indexed spanning trees, In Proc.
of the 11th International Joint Conference on A.I.
(IJCAI-89), Detroit, USA, 1989.
[ll] M.Ghallab & T.Vida1 - Focusing on a sub-gruph for managing eficiently numerical temporal constraints, in Proc.
of FLorida A.I.
Research Symposium  (FLAIRS-95), Melbourne Beach (FL, USA), 1995.
[12] V.Kumar - Algorithms for Constraint Satisfaction Problems: a survey, in AI Magazine, 13(1):32-44,  1992.
[13] M.Jourdan, N.Layai'da & LSabry-Ismail - Time representation and management in MADEUS: an authoring environment for multimedia documents,  in Multimedia Computing and Networking 1997, M.Freeman, P.Jardetzky & H.M.Vin ed., Proc.
SPIE 3020, pp.
68-79 , February 1997.
[14] A.K.Mackworth & E.C.Freuder - The complexity of some polynomial network consistency algorithms for constraint satisfaction problems, Artificial Intel-  ligence, 25(1):65-74, 1985.
[15] O.Maler, A.Pnueli & J.Sifakis - O n the synthesis of discrete controllers for timed systems, in Proc.
of the 12th Symposium on Theoretical Aspects of Computer Science (STACS), Miinchen, Germany, March 1995.
[16] 1.Meiri - Combining qualitative and quantitative constraints in temporal reasoning, In Proc.
of the 9th National Conference on A.I.
(AAAI-gl), Anaheim (CA, USA), 1991.
[17] B.Nebe1 & H.J.Biirckert - Reasoning about temporal relations: a maximal tractable subclass of Allen's interval algebra, Journal of the ACM, 42(1):43-66, 1995.
[18] T.Vida1 & M.Ghallab - Dealing with Uncertain Durations in Temporal Constraint Networks dedicated to Planning, In Proc.
of the 12th European Conference  on A.I.
(ECAI-96), pp.
48-52, Budapest (Hungary), 1996.
[19] M.Vilain, H.A.
Kautz & P.vanBeek - Constraint Propagation Algorithms: a Revised Report, Readings in Qualitative Reasoning about Physical Systems, Morgan Kaufman, 1989.
85